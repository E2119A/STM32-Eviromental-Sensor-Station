
Meteo_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011ae0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001648  08011c80  08011c80  00012c80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080132c8  080132c8  000151e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080132c8  080132c8  000142c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080132d0  080132d0  000151e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080132d0  080132d0  000142d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080132d4  080132d4  000142d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  080132d8  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005360  200001e0  080134b8  000151e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005540  080134b8  00015540  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000151e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c4d  00000000  00000000  00015210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004fa0  00000000  00000000  00038e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f10  00000000  00000000  0003de00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001835  00000000  00000000  0003fd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ce44  00000000  00000000  00041545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028586  00000000  00000000  0005e389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0b78  00000000  00000000  0008690f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00127487  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000095f8  00000000  00000000  001274cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00130ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e0 	.word	0x200001e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011c68 	.word	0x08011c68

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e4 	.word	0x200001e4
 80001dc:	08011c68 	.word	0x08011c68

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_frsub>:
 8000bb8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000bbc:	e002      	b.n	8000bc4 <__addsf3>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_fsub>:
 8000bc0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000bc4 <__addsf3>:
 8000bc4:	0042      	lsls	r2, r0, #1
 8000bc6:	bf1f      	itttt	ne
 8000bc8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bcc:	ea92 0f03 	teqne	r2, r3
 8000bd0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bd4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bd8:	d06a      	beq.n	8000cb0 <__addsf3+0xec>
 8000bda:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bde:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000be2:	bfc1      	itttt	gt
 8000be4:	18d2      	addgt	r2, r2, r3
 8000be6:	4041      	eorgt	r1, r0
 8000be8:	4048      	eorgt	r0, r1
 8000bea:	4041      	eorgt	r1, r0
 8000bec:	bfb8      	it	lt
 8000bee:	425b      	neglt	r3, r3
 8000bf0:	2b19      	cmp	r3, #25
 8000bf2:	bf88      	it	hi
 8000bf4:	4770      	bxhi	lr
 8000bf6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bfa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bfe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c0a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c0e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000c12:	bf18      	it	ne
 8000c14:	4249      	negne	r1, r1
 8000c16:	ea92 0f03 	teq	r2, r3
 8000c1a:	d03f      	beq.n	8000c9c <__addsf3+0xd8>
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	fa41 fc03 	asr.w	ip, r1, r3
 8000c24:	eb10 000c 	adds.w	r0, r0, ip
 8000c28:	f1c3 0320 	rsb	r3, r3, #32
 8000c2c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c30:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__addsf3+0x78>
 8000c36:	4249      	negs	r1, r1
 8000c38:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c3c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000c40:	d313      	bcc.n	8000c6a <__addsf3+0xa6>
 8000c42:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000c46:	d306      	bcc.n	8000c56 <__addsf3+0x92>
 8000c48:	0840      	lsrs	r0, r0, #1
 8000c4a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c4e:	f102 0201 	add.w	r2, r2, #1
 8000c52:	2afe      	cmp	r2, #254	@ 0xfe
 8000c54:	d251      	bcs.n	8000cfa <__addsf3+0x136>
 8000c56:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c5a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c5e:	bf08      	it	eq
 8000c60:	f020 0001 	biceq.w	r0, r0, #1
 8000c64:	ea40 0003 	orr.w	r0, r0, r3
 8000c68:	4770      	bx	lr
 8000c6a:	0049      	lsls	r1, r1, #1
 8000c6c:	eb40 0000 	adc.w	r0, r0, r0
 8000c70:	3a01      	subs	r2, #1
 8000c72:	bf28      	it	cs
 8000c74:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c78:	d2ed      	bcs.n	8000c56 <__addsf3+0x92>
 8000c7a:	fab0 fc80 	clz	ip, r0
 8000c7e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c82:	ebb2 020c 	subs.w	r2, r2, ip
 8000c86:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c8a:	bfaa      	itet	ge
 8000c8c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c90:	4252      	neglt	r2, r2
 8000c92:	4318      	orrge	r0, r3
 8000c94:	bfbc      	itt	lt
 8000c96:	40d0      	lsrlt	r0, r2
 8000c98:	4318      	orrlt	r0, r3
 8000c9a:	4770      	bx	lr
 8000c9c:	f092 0f00 	teq	r2, #0
 8000ca0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ca4:	bf06      	itte	eq
 8000ca6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000caa:	3201      	addeq	r2, #1
 8000cac:	3b01      	subne	r3, #1
 8000cae:	e7b5      	b.n	8000c1c <__addsf3+0x58>
 8000cb0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cb4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cb8:	bf18      	it	ne
 8000cba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cbe:	d021      	beq.n	8000d04 <__addsf3+0x140>
 8000cc0:	ea92 0f03 	teq	r2, r3
 8000cc4:	d004      	beq.n	8000cd0 <__addsf3+0x10c>
 8000cc6:	f092 0f00 	teq	r2, #0
 8000cca:	bf08      	it	eq
 8000ccc:	4608      	moveq	r0, r1
 8000cce:	4770      	bx	lr
 8000cd0:	ea90 0f01 	teq	r0, r1
 8000cd4:	bf1c      	itt	ne
 8000cd6:	2000      	movne	r0, #0
 8000cd8:	4770      	bxne	lr
 8000cda:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000cde:	d104      	bne.n	8000cea <__addsf3+0x126>
 8000ce0:	0040      	lsls	r0, r0, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000ce8:	4770      	bx	lr
 8000cea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000cee:	bf3c      	itt	cc
 8000cf0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bxcc	lr
 8000cf6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cfa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cfe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d02:	4770      	bx	lr
 8000d04:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d08:	bf16      	itet	ne
 8000d0a:	4608      	movne	r0, r1
 8000d0c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d10:	4601      	movne	r1, r0
 8000d12:	0242      	lsls	r2, r0, #9
 8000d14:	bf06      	itte	eq
 8000d16:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d1a:	ea90 0f01 	teqeq	r0, r1
 8000d1e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000d22:	4770      	bx	lr

08000d24 <__aeabi_ui2f>:
 8000d24:	f04f 0300 	mov.w	r3, #0
 8000d28:	e004      	b.n	8000d34 <__aeabi_i2f+0x8>
 8000d2a:	bf00      	nop

08000d2c <__aeabi_i2f>:
 8000d2c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000d30:	bf48      	it	mi
 8000d32:	4240      	negmi	r0, r0
 8000d34:	ea5f 0c00 	movs.w	ip, r0
 8000d38:	bf08      	it	eq
 8000d3a:	4770      	bxeq	lr
 8000d3c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000d40:	4601      	mov	r1, r0
 8000d42:	f04f 0000 	mov.w	r0, #0
 8000d46:	e01c      	b.n	8000d82 <__aeabi_l2f+0x2a>

08000d48 <__aeabi_ul2f>:
 8000d48:	ea50 0201 	orrs.w	r2, r0, r1
 8000d4c:	bf08      	it	eq
 8000d4e:	4770      	bxeq	lr
 8000d50:	f04f 0300 	mov.w	r3, #0
 8000d54:	e00a      	b.n	8000d6c <__aeabi_l2f+0x14>
 8000d56:	bf00      	nop

08000d58 <__aeabi_l2f>:
 8000d58:	ea50 0201 	orrs.w	r2, r0, r1
 8000d5c:	bf08      	it	eq
 8000d5e:	4770      	bxeq	lr
 8000d60:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d64:	d502      	bpl.n	8000d6c <__aeabi_l2f+0x14>
 8000d66:	4240      	negs	r0, r0
 8000d68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6c:	ea5f 0c01 	movs.w	ip, r1
 8000d70:	bf02      	ittt	eq
 8000d72:	4684      	moveq	ip, r0
 8000d74:	4601      	moveq	r1, r0
 8000d76:	2000      	moveq	r0, #0
 8000d78:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d7c:	bf08      	it	eq
 8000d7e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d82:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d86:	fabc f28c 	clz	r2, ip
 8000d8a:	3a08      	subs	r2, #8
 8000d8c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d90:	db10      	blt.n	8000db4 <__aeabi_l2f+0x5c>
 8000d92:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d96:	4463      	add	r3, ip
 8000d98:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000da4:	fa20 f202 	lsr.w	r2, r0, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	f020 0001 	biceq.w	r0, r0, #1
 8000db2:	4770      	bx	lr
 8000db4:	f102 0220 	add.w	r2, r2, #32
 8000db8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dbc:	f1c2 0220 	rsb	r2, r2, #32
 8000dc0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dc4:	fa21 f202 	lsr.w	r2, r1, r2
 8000dc8:	eb43 0002 	adc.w	r0, r3, r2
 8000dcc:	bf08      	it	eq
 8000dce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dd2:	4770      	bx	lr

08000dd4 <__aeabi_ldivmod>:
 8000dd4:	b97b      	cbnz	r3, 8000df6 <__aeabi_ldivmod+0x22>
 8000dd6:	b972      	cbnz	r2, 8000df6 <__aeabi_ldivmod+0x22>
 8000dd8:	2900      	cmp	r1, #0
 8000dda:	bfbe      	ittt	lt
 8000ddc:	2000      	movlt	r0, #0
 8000dde:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000de2:	e006      	blt.n	8000df2 <__aeabi_ldivmod+0x1e>
 8000de4:	bf08      	it	eq
 8000de6:	2800      	cmpeq	r0, #0
 8000de8:	bf1c      	itt	ne
 8000dea:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000dee:	f04f 30ff 	movne.w	r0, #4294967295
 8000df2:	f000 b9d3 	b.w	800119c <__aeabi_idiv0>
 8000df6:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dfa:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	db09      	blt.n	8000e16 <__aeabi_ldivmod+0x42>
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	db1a      	blt.n	8000e3c <__aeabi_ldivmod+0x68>
 8000e06:	f000 f84d 	bl	8000ea4 <__udivmoddi4>
 8000e0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e12:	b004      	add	sp, #16
 8000e14:	4770      	bx	lr
 8000e16:	4240      	negs	r0, r0
 8000e18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	db1b      	blt.n	8000e58 <__aeabi_ldivmod+0x84>
 8000e20:	f000 f840 	bl	8000ea4 <__udivmoddi4>
 8000e24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e2c:	b004      	add	sp, #16
 8000e2e:	4240      	negs	r0, r0
 8000e30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e34:	4252      	negs	r2, r2
 8000e36:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e3a:	4770      	bx	lr
 8000e3c:	4252      	negs	r2, r2
 8000e3e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e42:	f000 f82f 	bl	8000ea4 <__udivmoddi4>
 8000e46:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e4e:	b004      	add	sp, #16
 8000e50:	4240      	negs	r0, r0
 8000e52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e56:	4770      	bx	lr
 8000e58:	4252      	negs	r2, r2
 8000e5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e5e:	f000 f821 	bl	8000ea4 <__udivmoddi4>
 8000e62:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e6a:	b004      	add	sp, #16
 8000e6c:	4252      	negs	r2, r2
 8000e6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b988 	b.w	800119c <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	468e      	mov	lr, r1
 8000eac:	4604      	mov	r4, r0
 8000eae:	4688      	mov	r8, r1
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d14a      	bne.n	8000f4a <__udivmoddi4+0xa6>
 8000eb4:	428a      	cmp	r2, r1
 8000eb6:	4617      	mov	r7, r2
 8000eb8:	d962      	bls.n	8000f80 <__udivmoddi4+0xdc>
 8000eba:	fab2 f682 	clz	r6, r2
 8000ebe:	b14e      	cbz	r6, 8000ed4 <__udivmoddi4+0x30>
 8000ec0:	f1c6 0320 	rsb	r3, r6, #32
 8000ec4:	fa01 f806 	lsl.w	r8, r1, r6
 8000ec8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ecc:	40b7      	lsls	r7, r6
 8000ece:	ea43 0808 	orr.w	r8, r3, r8
 8000ed2:	40b4      	lsls	r4, r6
 8000ed4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed8:	fa1f fc87 	uxth.w	ip, r7
 8000edc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ee0:	0c23      	lsrs	r3, r4, #16
 8000ee2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ee6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eea:	fb01 f20c 	mul.w	r2, r1, ip
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d909      	bls.n	8000f06 <__udivmoddi4+0x62>
 8000ef2:	18fb      	adds	r3, r7, r3
 8000ef4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ef8:	f080 80ea 	bcs.w	80010d0 <__udivmoddi4+0x22c>
 8000efc:	429a      	cmp	r2, r3
 8000efe:	f240 80e7 	bls.w	80010d0 <__udivmoddi4+0x22c>
 8000f02:	3902      	subs	r1, #2
 8000f04:	443b      	add	r3, r7
 8000f06:	1a9a      	subs	r2, r3, r2
 8000f08:	b2a3      	uxth	r3, r4
 8000f0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f16:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f1a:	459c      	cmp	ip, r3
 8000f1c:	d909      	bls.n	8000f32 <__udivmoddi4+0x8e>
 8000f1e:	18fb      	adds	r3, r7, r3
 8000f20:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f24:	f080 80d6 	bcs.w	80010d4 <__udivmoddi4+0x230>
 8000f28:	459c      	cmp	ip, r3
 8000f2a:	f240 80d3 	bls.w	80010d4 <__udivmoddi4+0x230>
 8000f2e:	443b      	add	r3, r7
 8000f30:	3802      	subs	r0, #2
 8000f32:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f36:	eba3 030c 	sub.w	r3, r3, ip
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	b11d      	cbz	r5, 8000f46 <__udivmoddi4+0xa2>
 8000f3e:	40f3      	lsrs	r3, r6
 8000f40:	2200      	movs	r2, #0
 8000f42:	e9c5 3200 	strd	r3, r2, [r5]
 8000f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	d905      	bls.n	8000f5a <__udivmoddi4+0xb6>
 8000f4e:	b10d      	cbz	r5, 8000f54 <__udivmoddi4+0xb0>
 8000f50:	e9c5 0100 	strd	r0, r1, [r5]
 8000f54:	2100      	movs	r1, #0
 8000f56:	4608      	mov	r0, r1
 8000f58:	e7f5      	b.n	8000f46 <__udivmoddi4+0xa2>
 8000f5a:	fab3 f183 	clz	r1, r3
 8000f5e:	2900      	cmp	r1, #0
 8000f60:	d146      	bne.n	8000ff0 <__udivmoddi4+0x14c>
 8000f62:	4573      	cmp	r3, lr
 8000f64:	d302      	bcc.n	8000f6c <__udivmoddi4+0xc8>
 8000f66:	4282      	cmp	r2, r0
 8000f68:	f200 8105 	bhi.w	8001176 <__udivmoddi4+0x2d2>
 8000f6c:	1a84      	subs	r4, r0, r2
 8000f6e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000f72:	2001      	movs	r0, #1
 8000f74:	4690      	mov	r8, r2
 8000f76:	2d00      	cmp	r5, #0
 8000f78:	d0e5      	beq.n	8000f46 <__udivmoddi4+0xa2>
 8000f7a:	e9c5 4800 	strd	r4, r8, [r5]
 8000f7e:	e7e2      	b.n	8000f46 <__udivmoddi4+0xa2>
 8000f80:	2a00      	cmp	r2, #0
 8000f82:	f000 8090 	beq.w	80010a6 <__udivmoddi4+0x202>
 8000f86:	fab2 f682 	clz	r6, r2
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	f040 80a4 	bne.w	80010d8 <__udivmoddi4+0x234>
 8000f90:	1a8a      	subs	r2, r1, r2
 8000f92:	0c03      	lsrs	r3, r0, #16
 8000f94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f98:	b280      	uxth	r0, r0
 8000f9a:	b2bc      	uxth	r4, r7
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000fa2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000fa6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000faa:	fb04 f20c 	mul.w	r2, r4, ip
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	d907      	bls.n	8000fc2 <__udivmoddi4+0x11e>
 8000fb2:	18fb      	adds	r3, r7, r3
 8000fb4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000fb8:	d202      	bcs.n	8000fc0 <__udivmoddi4+0x11c>
 8000fba:	429a      	cmp	r2, r3
 8000fbc:	f200 80e0 	bhi.w	8001180 <__udivmoddi4+0x2dc>
 8000fc0:	46c4      	mov	ip, r8
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000fc8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000fcc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000fd0:	fb02 f404 	mul.w	r4, r2, r4
 8000fd4:	429c      	cmp	r4, r3
 8000fd6:	d907      	bls.n	8000fe8 <__udivmoddi4+0x144>
 8000fd8:	18fb      	adds	r3, r7, r3
 8000fda:	f102 30ff 	add.w	r0, r2, #4294967295
 8000fde:	d202      	bcs.n	8000fe6 <__udivmoddi4+0x142>
 8000fe0:	429c      	cmp	r4, r3
 8000fe2:	f200 80ca 	bhi.w	800117a <__udivmoddi4+0x2d6>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	1b1b      	subs	r3, r3, r4
 8000fea:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000fee:	e7a5      	b.n	8000f3c <__udivmoddi4+0x98>
 8000ff0:	f1c1 0620 	rsb	r6, r1, #32
 8000ff4:	408b      	lsls	r3, r1
 8000ff6:	fa22 f706 	lsr.w	r7, r2, r6
 8000ffa:	431f      	orrs	r7, r3
 8000ffc:	fa0e f401 	lsl.w	r4, lr, r1
 8001000:	fa20 f306 	lsr.w	r3, r0, r6
 8001004:	fa2e fe06 	lsr.w	lr, lr, r6
 8001008:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800100c:	4323      	orrs	r3, r4
 800100e:	fa00 f801 	lsl.w	r8, r0, r1
 8001012:	fa1f fc87 	uxth.w	ip, r7
 8001016:	fbbe f0f9 	udiv	r0, lr, r9
 800101a:	0c1c      	lsrs	r4, r3, #16
 800101c:	fb09 ee10 	mls	lr, r9, r0, lr
 8001020:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001024:	fb00 fe0c 	mul.w	lr, r0, ip
 8001028:	45a6      	cmp	lr, r4
 800102a:	fa02 f201 	lsl.w	r2, r2, r1
 800102e:	d909      	bls.n	8001044 <__udivmoddi4+0x1a0>
 8001030:	193c      	adds	r4, r7, r4
 8001032:	f100 3aff 	add.w	sl, r0, #4294967295
 8001036:	f080 809c 	bcs.w	8001172 <__udivmoddi4+0x2ce>
 800103a:	45a6      	cmp	lr, r4
 800103c:	f240 8099 	bls.w	8001172 <__udivmoddi4+0x2ce>
 8001040:	3802      	subs	r0, #2
 8001042:	443c      	add	r4, r7
 8001044:	eba4 040e 	sub.w	r4, r4, lr
 8001048:	fa1f fe83 	uxth.w	lr, r3
 800104c:	fbb4 f3f9 	udiv	r3, r4, r9
 8001050:	fb09 4413 	mls	r4, r9, r3, r4
 8001054:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001058:	fb03 fc0c 	mul.w	ip, r3, ip
 800105c:	45a4      	cmp	ip, r4
 800105e:	d908      	bls.n	8001072 <__udivmoddi4+0x1ce>
 8001060:	193c      	adds	r4, r7, r4
 8001062:	f103 3eff 	add.w	lr, r3, #4294967295
 8001066:	f080 8082 	bcs.w	800116e <__udivmoddi4+0x2ca>
 800106a:	45a4      	cmp	ip, r4
 800106c:	d97f      	bls.n	800116e <__udivmoddi4+0x2ca>
 800106e:	3b02      	subs	r3, #2
 8001070:	443c      	add	r4, r7
 8001072:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001076:	eba4 040c 	sub.w	r4, r4, ip
 800107a:	fba0 ec02 	umull	lr, ip, r0, r2
 800107e:	4564      	cmp	r4, ip
 8001080:	4673      	mov	r3, lr
 8001082:	46e1      	mov	r9, ip
 8001084:	d362      	bcc.n	800114c <__udivmoddi4+0x2a8>
 8001086:	d05f      	beq.n	8001148 <__udivmoddi4+0x2a4>
 8001088:	b15d      	cbz	r5, 80010a2 <__udivmoddi4+0x1fe>
 800108a:	ebb8 0203 	subs.w	r2, r8, r3
 800108e:	eb64 0409 	sbc.w	r4, r4, r9
 8001092:	fa04 f606 	lsl.w	r6, r4, r6
 8001096:	fa22 f301 	lsr.w	r3, r2, r1
 800109a:	431e      	orrs	r6, r3
 800109c:	40cc      	lsrs	r4, r1
 800109e:	e9c5 6400 	strd	r6, r4, [r5]
 80010a2:	2100      	movs	r1, #0
 80010a4:	e74f      	b.n	8000f46 <__udivmoddi4+0xa2>
 80010a6:	fbb1 fcf2 	udiv	ip, r1, r2
 80010aa:	0c01      	lsrs	r1, r0, #16
 80010ac:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80010b0:	b280      	uxth	r0, r0
 80010b2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80010b6:	463b      	mov	r3, r7
 80010b8:	4638      	mov	r0, r7
 80010ba:	463c      	mov	r4, r7
 80010bc:	46b8      	mov	r8, r7
 80010be:	46be      	mov	lr, r7
 80010c0:	2620      	movs	r6, #32
 80010c2:	fbb1 f1f7 	udiv	r1, r1, r7
 80010c6:	eba2 0208 	sub.w	r2, r2, r8
 80010ca:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80010ce:	e766      	b.n	8000f9e <__udivmoddi4+0xfa>
 80010d0:	4601      	mov	r1, r0
 80010d2:	e718      	b.n	8000f06 <__udivmoddi4+0x62>
 80010d4:	4610      	mov	r0, r2
 80010d6:	e72c      	b.n	8000f32 <__udivmoddi4+0x8e>
 80010d8:	f1c6 0220 	rsb	r2, r6, #32
 80010dc:	fa2e f302 	lsr.w	r3, lr, r2
 80010e0:	40b7      	lsls	r7, r6
 80010e2:	40b1      	lsls	r1, r6
 80010e4:	fa20 f202 	lsr.w	r2, r0, r2
 80010e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010ec:	430a      	orrs	r2, r1
 80010ee:	fbb3 f8fe 	udiv	r8, r3, lr
 80010f2:	b2bc      	uxth	r4, r7
 80010f4:	fb0e 3318 	mls	r3, lr, r8, r3
 80010f8:	0c11      	lsrs	r1, r2, #16
 80010fa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fe:	fb08 f904 	mul.w	r9, r8, r4
 8001102:	40b0      	lsls	r0, r6
 8001104:	4589      	cmp	r9, r1
 8001106:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800110a:	b280      	uxth	r0, r0
 800110c:	d93e      	bls.n	800118c <__udivmoddi4+0x2e8>
 800110e:	1879      	adds	r1, r7, r1
 8001110:	f108 3cff 	add.w	ip, r8, #4294967295
 8001114:	d201      	bcs.n	800111a <__udivmoddi4+0x276>
 8001116:	4589      	cmp	r9, r1
 8001118:	d81f      	bhi.n	800115a <__udivmoddi4+0x2b6>
 800111a:	eba1 0109 	sub.w	r1, r1, r9
 800111e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001122:	fb09 f804 	mul.w	r8, r9, r4
 8001126:	fb0e 1119 	mls	r1, lr, r9, r1
 800112a:	b292      	uxth	r2, r2
 800112c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001130:	4542      	cmp	r2, r8
 8001132:	d229      	bcs.n	8001188 <__udivmoddi4+0x2e4>
 8001134:	18ba      	adds	r2, r7, r2
 8001136:	f109 31ff 	add.w	r1, r9, #4294967295
 800113a:	d2c4      	bcs.n	80010c6 <__udivmoddi4+0x222>
 800113c:	4542      	cmp	r2, r8
 800113e:	d2c2      	bcs.n	80010c6 <__udivmoddi4+0x222>
 8001140:	f1a9 0102 	sub.w	r1, r9, #2
 8001144:	443a      	add	r2, r7
 8001146:	e7be      	b.n	80010c6 <__udivmoddi4+0x222>
 8001148:	45f0      	cmp	r8, lr
 800114a:	d29d      	bcs.n	8001088 <__udivmoddi4+0x1e4>
 800114c:	ebbe 0302 	subs.w	r3, lr, r2
 8001150:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001154:	3801      	subs	r0, #1
 8001156:	46e1      	mov	r9, ip
 8001158:	e796      	b.n	8001088 <__udivmoddi4+0x1e4>
 800115a:	eba7 0909 	sub.w	r9, r7, r9
 800115e:	4449      	add	r1, r9
 8001160:	f1a8 0c02 	sub.w	ip, r8, #2
 8001164:	fbb1 f9fe 	udiv	r9, r1, lr
 8001168:	fb09 f804 	mul.w	r8, r9, r4
 800116c:	e7db      	b.n	8001126 <__udivmoddi4+0x282>
 800116e:	4673      	mov	r3, lr
 8001170:	e77f      	b.n	8001072 <__udivmoddi4+0x1ce>
 8001172:	4650      	mov	r0, sl
 8001174:	e766      	b.n	8001044 <__udivmoddi4+0x1a0>
 8001176:	4608      	mov	r0, r1
 8001178:	e6fd      	b.n	8000f76 <__udivmoddi4+0xd2>
 800117a:	443b      	add	r3, r7
 800117c:	3a02      	subs	r2, #2
 800117e:	e733      	b.n	8000fe8 <__udivmoddi4+0x144>
 8001180:	f1ac 0c02 	sub.w	ip, ip, #2
 8001184:	443b      	add	r3, r7
 8001186:	e71c      	b.n	8000fc2 <__udivmoddi4+0x11e>
 8001188:	4649      	mov	r1, r9
 800118a:	e79c      	b.n	80010c6 <__udivmoddi4+0x222>
 800118c:	eba1 0109 	sub.w	r1, r1, r9
 8001190:	46c4      	mov	ip, r8
 8001192:	fbb1 f9fe 	udiv	r9, r1, lr
 8001196:	fb09 f804 	mul.w	r8, r9, r4
 800119a:	e7c4      	b.n	8001126 <__udivmoddi4+0x282>

0800119c <__aeabi_idiv0>:
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop

080011a0 <uart_printf>:
/**
 * @brief Thread-safe UART printf function
 * @param fmt: Format string
 */
static void uart_printf(const char *fmt, ...)
{
 80011a0:	b40f      	push	{r0, r1, r2, r3}
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b0a2      	sub	sp, #136	@ 0x88
 80011a6:	af00      	add	r7, sp, #0
    char buf[UART_BUFFER_SIZE];
    va_list args;

    va_start(args, fmt);
 80011a8:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011ac:	607b      	str	r3, [r7, #4]
    vsnprintf(buf, sizeof(buf), fmt, args);
 80011ae:	f107 0008 	add.w	r0, r7, #8
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80011b8:	2180      	movs	r1, #128	@ 0x80
 80011ba:	f00e fc1d 	bl	800f9f8 <vsniprintf>
    va_end(args);

    osMutexAcquire(uartMutexHandle, osWaitForever);
 80011be:	4b10      	ldr	r3, [pc, #64]	@ (8001200 <uart_printf+0x60>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f04f 31ff 	mov.w	r1, #4294967295
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a f8c3 	bl	800b352 <osMutexAcquire>
    HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80011cc:	f107 0308 	add.w	r3, r7, #8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff f855 	bl	8000280 <strlen>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b29a      	uxth	r2, r3
 80011da:	f107 0108 	add.w	r1, r7, #8
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	4808      	ldr	r0, [pc, #32]	@ (8001204 <uart_printf+0x64>)
 80011e4:	f005 fc78 	bl	8006ad8 <HAL_UART_Transmit>
    osMutexRelease(uartMutexHandle);
 80011e8:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <uart_printf+0x60>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f00a f8fb 	bl	800b3e8 <osMutexRelease>
}
 80011f2:	bf00      	nop
 80011f4:	3788      	adds	r7, #136	@ 0x88
 80011f6:	46bd      	mov	sp, r7
 80011f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80011fc:	b004      	add	sp, #16
 80011fe:	4770      	bx	lr
 8001200:	20000308 	.word	0x20000308
 8001204:	200002a8 	.word	0x200002a8

08001208 <SensorTask>:

/**
 * @brief Sensor reading task → sends samples via queues
 */
static void SensorTask(void *argument)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
    osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001210:	4b27      	ldr	r3, [pc, #156]	@ (80012b0 <SensorTask+0xa8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 31ff 	mov.w	r1, #4294967295
 8001218:	4618      	mov	r0, r3
 800121a:	f00a f89a 	bl	800b352 <osMutexAcquire>
    BMP280_Init(&bmp280, &hi2c1);
 800121e:	4925      	ldr	r1, [pc, #148]	@ (80012b4 <SensorTask+0xac>)
 8001220:	4825      	ldr	r0, [pc, #148]	@ (80012b8 <SensorTask+0xb0>)
 8001222:	f001 fc56 	bl	8002ad2 <BMP280_Init>
    BMP280_ReadCalibrationData(&bmp280);
 8001226:	4824      	ldr	r0, [pc, #144]	@ (80012b8 <SensorTask+0xb0>)
 8001228:	f001 fc84 	bl	8002b34 <BMP280_ReadCalibrationData>
    osMutexRelease(i2cMutexHandle);
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <SensorTask+0xa8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4618      	mov	r0, r3
 8001232:	f00a f8d9 	bl	800b3e8 <osMutexRelease>

    for (;;)
    {
        BmpSample_t sample;

        osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001236:	4b1e      	ldr	r3, [pc, #120]	@ (80012b0 <SensorTask+0xa8>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f04f 31ff 	mov.w	r1, #4294967295
 800123e:	4618      	mov	r0, r3
 8001240:	f00a f887 	bl	800b352 <osMutexAcquire>
        sample.temp = BMP280_ReadTemperature(&bmp280);
 8001244:	481c      	ldr	r0, [pc, #112]	@ (80012b8 <SensorTask+0xb0>)
 8001246:	f001 fcdd 	bl	8002c04 <BMP280_ReadTemperature>
 800124a:	eef0 7a40 	vmov.f32	s15, s0
 800124e:	edc7 7a03 	vstr	s15, [r7, #12]
        sample.press = BMP280_ReadPressure(&bmp280);
 8001252:	4819      	ldr	r0, [pc, #100]	@ (80012b8 <SensorTask+0xb0>)
 8001254:	f001 fd34 	bl	8002cc0 <BMP280_ReadPressure>
 8001258:	eef0 7a40 	vmov.f32	s15, s0
 800125c:	edc7 7a04 	vstr	s15, [r7, #16]
        osMutexRelease(i2cMutexHandle);
 8001260:	4b13      	ldr	r3, [pc, #76]	@ (80012b0 <SensorTask+0xa8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4618      	mov	r0, r3
 8001266:	f00a f8bf 	bl	800b3e8 <osMutexRelease>
        sample.tick = HAL_GetTick();
 800126a:	f002 fad9 	bl	8003820 <HAL_GetTick>
 800126e:	4603      	mov	r3, r0
 8001270:	617b      	str	r3, [r7, #20]

        (void)osMessageQueuePut(displayQueueHandle, &sample, 0, 0);
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <SensorTask+0xb4>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	f107 010c 	add.w	r1, r7, #12
 800127a:	2300      	movs	r3, #0
 800127c:	2200      	movs	r2, #0
 800127e:	f00a faa7 	bl	800b7d0 <osMessageQueuePut>
        (void)osMessageQueuePut(uartQueueHandle, &sample, 0, 0);
 8001282:	4b0f      	ldr	r3, [pc, #60]	@ (80012c0 <SensorTask+0xb8>)
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	f107 010c 	add.w	r1, r7, #12
 800128a:	2300      	movs	r3, #0
 800128c:	2200      	movs	r2, #0
 800128e:	f00a fa9f 	bl	800b7d0 <osMessageQueuePut>
        (void)osMessageQueuePut(sdQueueHandle, &sample, 0, 0);
 8001292:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <SensorTask+0xbc>)
 8001294:	6818      	ldr	r0, [r3, #0]
 8001296:	f107 010c 	add.w	r1, r7, #12
 800129a:	2300      	movs	r3, #0
 800129c:	2200      	movs	r2, #0
 800129e:	f00a fa97 	bl	800b7d0 <osMessageQueuePut>

        osDelay(SENSOR_UPDATE_PERIOD_MS);
 80012a2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80012a6:	f009 ffb3 	bl	800b210 <osDelay>
    {
 80012aa:	bf00      	nop
 80012ac:	e7c3      	b.n	8001236 <SensorTask+0x2e>
 80012ae:	bf00      	nop
 80012b0:	20000304 	.word	0x20000304
 80012b4:	200001fc 	.word	0x200001fc
 80012b8:	20000320 	.word	0x20000320
 80012bc:	20000314 	.word	0x20000314
 80012c0:	20000318 	.word	0x20000318
 80012c4:	2000031c 	.word	0x2000031c

080012c8 <DisplayTask>:
/**
 * @brief Display update task
 * @param argument: Not used
 */
static void DisplayTask(void *argument)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b098      	sub	sp, #96	@ 0x60
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
    // Initialize SSD1306 display under I2C mutex protection
    osMutexAcquire(i2cMutexHandle, osWaitForever);
 80012d0:	4b33      	ldr	r3, [pc, #204]	@ (80013a0 <DisplayTask+0xd8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	4618      	mov	r0, r3
 80012da:	f00a f83a 	bl	800b352 <osMutexAcquire>
    SSD1306_Init();
 80012de:	f000 fb37 	bl	8001950 <SSD1306_Init>
    HAL_Delay(DISPLAY_INIT_DELAY_MS);
 80012e2:	2032      	movs	r0, #50	@ 0x32
 80012e4:	f002 faa8 	bl	8003838 <HAL_Delay>
    osMutexRelease(i2cMutexHandle);
 80012e8:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <DisplayTask+0xd8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f00a f87b 	bl	800b3e8 <osMutexRelease>
    char line1[DISPLAY_LINE_SIZE];
    char line2[DISPLAY_LINE_SIZE];

    for (;;)
    {
        if (osMessageQueueGet(displayQueueHandle, &sample, NULL, osWaitForever) != osOK) {
 80012f2:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <DisplayTask+0xdc>)
 80012f4:	6818      	ldr	r0, [r3, #0]
 80012f6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	2200      	movs	r2, #0
 8001300:	f00a fac6 	bl	800b890 <osMessageQueueGet>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d147      	bne.n	800139a <DisplayTask+0xd2>
            continue;
        }

        // Format display strings
        snprintf(line1, sizeof(line1), "T: %.2f C", sample.temp);
 800130a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff f923 	bl	8000558 <__aeabi_f2d>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800131a:	e9cd 2300 	strd	r2, r3, [sp]
 800131e:	4a22      	ldr	r2, [pc, #136]	@ (80013a8 <DisplayTask+0xe0>)
 8001320:	2120      	movs	r1, #32
 8001322:	f00e fac1 	bl	800f8a8 <sniprintf>
        snprintf(line2, sizeof(line2), "P: %.2f hPa", sample.press);
 8001326:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff f915 	bl	8000558 <__aeabi_f2d>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	f107 000c 	add.w	r0, r7, #12
 8001336:	e9cd 2300 	strd	r2, r3, [sp]
 800133a:	4a1c      	ldr	r2, [pc, #112]	@ (80013ac <DisplayTask+0xe4>)
 800133c:	2120      	movs	r1, #32
 800133e:	f00e fab3 	bl	800f8a8 <sniprintf>

        // Update display under I2C mutex protection
        osMutexAcquire(i2cMutexHandle, osWaitForever);
 8001342:	4b17      	ldr	r3, [pc, #92]	@ (80013a0 <DisplayTask+0xd8>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f04f 31ff 	mov.w	r1, #4294967295
 800134a:	4618      	mov	r0, r3
 800134c:	f00a f801 	bl	800b352 <osMutexAcquire>
        SSD1306_Fill(0);
 8001350:	2000      	movs	r0, #0
 8001352:	f000 fbe9 	bl	8001b28 <SSD1306_Fill>
        SSD1306_GotoXY(DISPLAY_LINE1_X, DISPLAY_LINE1_Y);
 8001356:	2102      	movs	r1, #2
 8001358:	2002      	movs	r0, #2
 800135a:	f000 fc5d 	bl	8001c18 <SSD1306_GotoXY>
        SSD1306_Puts(line1, &Font_7x10, 1);
 800135e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001362:	2201      	movs	r2, #1
 8001364:	4912      	ldr	r1, [pc, #72]	@ (80013b0 <DisplayTask+0xe8>)
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fcea 	bl	8001d40 <SSD1306_Puts>
        SSD1306_GotoXY(DISPLAY_LINE2_X, DISPLAY_LINE2_Y);
 800136c:	2110      	movs	r1, #16
 800136e:	2002      	movs	r0, #2
 8001370:	f000 fc52 	bl	8001c18 <SSD1306_GotoXY>
        SSD1306_Puts(line2, &Font_7x10, 1);
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2201      	movs	r2, #1
 800137a:	490d      	ldr	r1, [pc, #52]	@ (80013b0 <DisplayTask+0xe8>)
 800137c:	4618      	mov	r0, r3
 800137e:	f000 fcdf 	bl	8001d40 <SSD1306_Puts>
        SSD1306_UpdateScreen();
 8001382:	f000 fba3 	bl	8001acc <SSD1306_UpdateScreen>
        osMutexRelease(i2cMutexHandle);
 8001386:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <DisplayTask+0xd8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f00a f82c 	bl	800b3e8 <osMutexRelease>

        osDelay(DISPLAY_UPDATE_PERIOD_MS);
 8001390:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001394:	f009 ff3c 	bl	800b210 <osDelay>
 8001398:	e7ab      	b.n	80012f2 <DisplayTask+0x2a>
            continue;
 800139a:	bf00      	nop
        if (osMessageQueueGet(displayQueueHandle, &sample, NULL, osWaitForever) != osOK) {
 800139c:	e7a9      	b.n	80012f2 <DisplayTask+0x2a>
 800139e:	bf00      	nop
 80013a0:	20000304 	.word	0x20000304
 80013a4:	20000314 	.word	0x20000314
 80013a8:	08011d00 	.word	0x08011d00
 80013ac:	08011d0c 	.word	0x08011d0c
 80013b0:	20000000 	.word	0x20000000

080013b4 <UartTask>:
/**
 * @brief UART logging task
 * @param argument: Not used
 */
static void UartTask(void *argument)
{
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        BmpSample_t sample;
        if (osMessageQueueGet(uartQueueHandle, &sample, NULL, osWaitForever) != osOK) {
 80013bc:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <UartTask+0x50>)
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f107 010c 	add.w	r1, r7, #12
 80013c4:	f04f 33ff 	mov.w	r3, #4294967295
 80013c8:	2200      	movs	r2, #0
 80013ca:	f00a fa61 	bl	800b890 <osMessageQueueGet>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d115      	bne.n	8001400 <UartTask+0x4c>
            continue;
        }
        uart_printf("%lu,%.2f,%.2f\r\n", sample.tick, sample.temp, sample.press);
 80013d4:	697e      	ldr	r6, [r7, #20]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8bd 	bl	8000558 <__aeabi_f2d>
 80013de:	4604      	mov	r4, r0
 80013e0:	460d      	mov	r5, r1
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff f8b7 	bl	8000558 <__aeabi_f2d>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	e9cd 2300 	strd	r2, r3, [sp]
 80013f2:	4622      	mov	r2, r4
 80013f4:	462b      	mov	r3, r5
 80013f6:	4631      	mov	r1, r6
 80013f8:	4803      	ldr	r0, [pc, #12]	@ (8001408 <UartTask+0x54>)
 80013fa:	f7ff fed1 	bl	80011a0 <uart_printf>
 80013fe:	e7dd      	b.n	80013bc <UartTask+0x8>
            continue;
 8001400:	bf00      	nop
    {
 8001402:	e7db      	b.n	80013bc <UartTask+0x8>
 8001404:	20000318 	.word	0x20000318
 8001408:	08011d18 	.word	0x08011d18

0800140c <SDLogTask>:
/**
 * @brief SD card logging task
 * @param argument: Not used
 */
static void SDLogTask(void *argument)
{
 800140c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800140e:	b09b      	sub	sp, #108	@ 0x6c
 8001410:	af04      	add	r7, sp, #16
 8001412:	6078      	str	r0, [r7, #4]
    if (sd_mount() != FR_OK) {
 8001414:	f000 fe68 	bl	80020e8 <sd_mount>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d005      	beq.n	800142a <SDLogTask+0x1e>
        uart_printf("SD mount failed!\r\n");
 800141e:	4822      	ldr	r0, [pc, #136]	@ (80014a8 <SDLogTask+0x9c>)
 8001420:	f7ff febe 	bl	80011a0 <uart_printf>
        vTaskDelete(NULL);
 8001424:	2000      	movs	r0, #0
 8001426:	f00b fe1b 	bl	800d060 <vTaskDelete>
    }

    osSemaphoreRelease(sdMountedSemHandle);
 800142a:	4b20      	ldr	r3, [pc, #128]	@ (80014ac <SDLogTask+0xa0>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4618      	mov	r0, r3
 8001430:	f00a f8f2 	bl	800b618 <osSemaphoreRelease>
    char log_buffer[LOG_BUFFER_SIZE];
    BmpSample_t sample;

    for (;;)
    {
        if (osMessageQueueGet(sdQueueHandle, &sample, NULL, osWaitForever) != osOK) {
 8001434:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <SDLogTask+0xa4>)
 8001436:	6818      	ldr	r0, [r3, #0]
 8001438:	f107 010c 	add.w	r1, r7, #12
 800143c:	f04f 33ff 	mov.w	r3, #4294967295
 8001440:	2200      	movs	r2, #0
 8001442:	f00a fa25 	bl	800b890 <osMessageQueueGet>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d12a      	bne.n	80014a2 <SDLogTask+0x96>
            continue;
        }

        snprintf(log_buffer, sizeof(log_buffer), "%lu,%.2f,%.2f\r\n",
 800144c:	697e      	ldr	r6, [r7, #20]
                sample.tick, sample.temp, sample.press);
 800144e:	68fb      	ldr	r3, [r7, #12]
        snprintf(log_buffer, sizeof(log_buffer), "%lu,%.2f,%.2f\r\n",
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f881 	bl	8000558 <__aeabi_f2d>
 8001456:	4604      	mov	r4, r0
 8001458:	460d      	mov	r5, r1
                sample.tick, sample.temp, sample.press);
 800145a:	693b      	ldr	r3, [r7, #16]
        snprintf(log_buffer, sizeof(log_buffer), "%lu,%.2f,%.2f\r\n",
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f87b 	bl	8000558 <__aeabi_f2d>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	f107 0018 	add.w	r0, r7, #24
 800146a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800146e:	e9cd 4500 	strd	r4, r5, [sp]
 8001472:	4633      	mov	r3, r6
 8001474:	4a0f      	ldr	r2, [pc, #60]	@ (80014b4 <SDLogTask+0xa8>)
 8001476:	2140      	movs	r1, #64	@ 0x40
 8001478:	f00e fa16 	bl	800f8a8 <sniprintf>

        osMutexAcquire(sdMutexHandle, osWaitForever);
 800147c:	4b0e      	ldr	r3, [pc, #56]	@ (80014b8 <SDLogTask+0xac>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	4618      	mov	r0, r3
 8001486:	f009 ff64 	bl	800b352 <osMutexAcquire>
        sd_append_file("log.txt", log_buffer);
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	4619      	mov	r1, r3
 8001490:	480a      	ldr	r0, [pc, #40]	@ (80014bc <SDLogTask+0xb0>)
 8001492:	f000 fed3 	bl	800223c <sd_append_file>
        osMutexRelease(sdMutexHandle);
 8001496:	4b08      	ldr	r3, [pc, #32]	@ (80014b8 <SDLogTask+0xac>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f009 ffa4 	bl	800b3e8 <osMutexRelease>
 80014a0:	e7c8      	b.n	8001434 <SDLogTask+0x28>
            continue;
 80014a2:	bf00      	nop
        if (osMessageQueueGet(sdQueueHandle, &sample, NULL, osWaitForever) != osOK) {
 80014a4:	e7c6      	b.n	8001434 <SDLogTask+0x28>
 80014a6:	bf00      	nop
 80014a8:	08011d28 	.word	0x08011d28
 80014ac:	20000310 	.word	0x20000310
 80014b0:	2000031c 	.word	0x2000031c
 80014b4:	08011d18 	.word	0x08011d18
 80014b8:	2000030c 	.word	0x2000030c
 80014bc:	08011d3c 	.word	0x08011d3c

080014c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f002 f976 	bl	80037b4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f8a2 	bl	8001610 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f000 f99a 	bl	8001804 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 f96e 	bl	80017b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80014d4:	f000 f908 	bl	80016e8 <MX_I2C1_Init>
  MX_SPI2_Init();
 80014d8:	f000 f934 	bl	8001744 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014dc:	f009 fdbc 	bl	800b058 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* Create mutexes */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 80014e0:	482e      	ldr	r0, [pc, #184]	@ (800159c <main+0xdc>)
 80014e2:	f009 feb0 	bl	800b246 <osMutexNew>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a2d      	ldr	r2, [pc, #180]	@ (80015a0 <main+0xe0>)
 80014ea:	6013      	str	r3, [r2, #0]
  uartMutexHandle = osMutexNew(&uartMutex_attributes);
 80014ec:	482d      	ldr	r0, [pc, #180]	@ (80015a4 <main+0xe4>)
 80014ee:	f009 feaa 	bl	800b246 <osMutexNew>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a2c      	ldr	r2, [pc, #176]	@ (80015a8 <main+0xe8>)
 80014f6:	6013      	str	r3, [r2, #0]
  sdMutexHandle = osMutexNew(&sdMutex_attributes);
 80014f8:	482c      	ldr	r0, [pc, #176]	@ (80015ac <main+0xec>)
 80014fa:	f009 fea4 	bl	800b246 <osMutexNew>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a2b      	ldr	r2, [pc, #172]	@ (80015b0 <main+0xf0>)
 8001502:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* Create semaphore */
  sdMountedSemHandle = osSemaphoreNew(1, 0, &sdMountedSem_attributes);
 8001504:	4a2b      	ldr	r2, [pc, #172]	@ (80015b4 <main+0xf4>)
 8001506:	2100      	movs	r1, #0
 8001508:	2001      	movs	r0, #1
 800150a:	f009 ffaa 	bl	800b462 <osSemaphoreNew>
 800150e:	4603      	mov	r3, r0
 8001510:	4a29      	ldr	r2, [pc, #164]	@ (80015b8 <main+0xf8>)
 8001512:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* Create queues (depth 8) */
  displayQueueHandle = osMessageQueueNew(8, sizeof(BmpSample_t), &displayQueue_attributes);
 8001514:	4a29      	ldr	r2, [pc, #164]	@ (80015bc <main+0xfc>)
 8001516:	210c      	movs	r1, #12
 8001518:	2008      	movs	r0, #8
 800151a:	f00a f8e5 	bl	800b6e8 <osMessageQueueNew>
 800151e:	4603      	mov	r3, r0
 8001520:	4a27      	ldr	r2, [pc, #156]	@ (80015c0 <main+0x100>)
 8001522:	6013      	str	r3, [r2, #0]
  uartQueueHandle    = osMessageQueueNew(8, sizeof(BmpSample_t), &uartQueue_attributes);
 8001524:	4a27      	ldr	r2, [pc, #156]	@ (80015c4 <main+0x104>)
 8001526:	210c      	movs	r1, #12
 8001528:	2008      	movs	r0, #8
 800152a:	f00a f8dd 	bl	800b6e8 <osMessageQueueNew>
 800152e:	4603      	mov	r3, r0
 8001530:	4a25      	ldr	r2, [pc, #148]	@ (80015c8 <main+0x108>)
 8001532:	6013      	str	r3, [r2, #0]
  sdQueueHandle      = osMessageQueueNew(8, sizeof(BmpSample_t), &sdQueue_attributes);
 8001534:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <main+0x10c>)
 8001536:	210c      	movs	r1, #12
 8001538:	2008      	movs	r0, #8
 800153a:	f00a f8d5 	bl	800b6e8 <osMessageQueueNew>
 800153e:	4603      	mov	r3, r0
 8001540:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <main+0x110>)
 8001542:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001544:	4a23      	ldr	r2, [pc, #140]	@ (80015d4 <main+0x114>)
 8001546:	2100      	movs	r1, #0
 8001548:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <main+0x118>)
 800154a:	f009 fdcf 	bl	800b0ec <osThreadNew>
 800154e:	4603      	mov	r3, r0
 8001550:	4a22      	ldr	r2, [pc, #136]	@ (80015dc <main+0x11c>)
 8001552:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* Create application tasks */
  sensorTaskHandle = osThreadNew(SensorTask, NULL, &sensorTask_attributes);
 8001554:	4a22      	ldr	r2, [pc, #136]	@ (80015e0 <main+0x120>)
 8001556:	2100      	movs	r1, #0
 8001558:	4822      	ldr	r0, [pc, #136]	@ (80015e4 <main+0x124>)
 800155a:	f009 fdc7 	bl	800b0ec <osThreadNew>
 800155e:	4603      	mov	r3, r0
 8001560:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <main+0x128>)
 8001562:	6013      	str	r3, [r2, #0]
  displayTaskHandle = osThreadNew(DisplayTask, NULL, &displayTask_attributes);
 8001564:	4a21      	ldr	r2, [pc, #132]	@ (80015ec <main+0x12c>)
 8001566:	2100      	movs	r1, #0
 8001568:	4821      	ldr	r0, [pc, #132]	@ (80015f0 <main+0x130>)
 800156a:	f009 fdbf 	bl	800b0ec <osThreadNew>
 800156e:	4603      	mov	r3, r0
 8001570:	4a20      	ldr	r2, [pc, #128]	@ (80015f4 <main+0x134>)
 8001572:	6013      	str	r3, [r2, #0]
  uartTaskHandle = osThreadNew(UartTask, NULL, &uartTask_attributes);
 8001574:	4a20      	ldr	r2, [pc, #128]	@ (80015f8 <main+0x138>)
 8001576:	2100      	movs	r1, #0
 8001578:	4820      	ldr	r0, [pc, #128]	@ (80015fc <main+0x13c>)
 800157a:	f009 fdb7 	bl	800b0ec <osThreadNew>
 800157e:	4603      	mov	r3, r0
 8001580:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <main+0x140>)
 8001582:	6013      	str	r3, [r2, #0]
  sdLogTaskHandle = osThreadNew(SDLogTask, NULL, &sdTask_attributes);
 8001584:	4a1f      	ldr	r2, [pc, #124]	@ (8001604 <main+0x144>)
 8001586:	2100      	movs	r1, #0
 8001588:	481f      	ldr	r0, [pc, #124]	@ (8001608 <main+0x148>)
 800158a:	f009 fdaf 	bl	800b0ec <osThreadNew>
 800158e:	4603      	mov	r3, r0
 8001590:	4a1e      	ldr	r2, [pc, #120]	@ (800160c <main+0x14c>)
 8001592:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001594:	f009 fd84 	bl	800b0a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001598:	bf00      	nop
 800159a:	e7fd      	b.n	8001598 <main+0xd8>
 800159c:	080122d4 	.word	0x080122d4
 80015a0:	20000304 	.word	0x20000304
 80015a4:	080122e4 	.word	0x080122e4
 80015a8:	20000308 	.word	0x20000308
 80015ac:	080122f4 	.word	0x080122f4
 80015b0:	2000030c 	.word	0x2000030c
 80015b4:	08012304 	.word	0x08012304
 80015b8:	20000310 	.word	0x20000310
 80015bc:	08012314 	.word	0x08012314
 80015c0:	20000314 	.word	0x20000314
 80015c4:	0801232c 	.word	0x0801232c
 80015c8:	20000318 	.word	0x20000318
 80015cc:	08012344 	.word	0x08012344
 80015d0:	2000031c 	.word	0x2000031c
 80015d4:	08012220 	.word	0x08012220
 80015d8:	08001911 	.word	0x08001911
 80015dc:	200002f0 	.word	0x200002f0
 80015e0:	08012244 	.word	0x08012244
 80015e4:	08001209 	.word	0x08001209
 80015e8:	200002f4 	.word	0x200002f4
 80015ec:	08012268 	.word	0x08012268
 80015f0:	080012c9 	.word	0x080012c9
 80015f4:	200002f8 	.word	0x200002f8
 80015f8:	0801228c 	.word	0x0801228c
 80015fc:	080013b5 	.word	0x080013b5
 8001600:	200002fc 	.word	0x200002fc
 8001604:	080122b0 	.word	0x080122b0
 8001608:	0800140d 	.word	0x0800140d
 800160c:	20000300 	.word	0x20000300

08001610 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b094      	sub	sp, #80	@ 0x50
 8001614:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001616:	f107 0320 	add.w	r3, r7, #32
 800161a:	2230      	movs	r2, #48	@ 0x30
 800161c:	2100      	movs	r1, #0
 800161e:	4618      	mov	r0, r3
 8001620:	f00e fa8c 	bl	800fb3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	2200      	movs	r2, #0
 800162a:	601a      	str	r2, [r3, #0]
 800162c:	605a      	str	r2, [r3, #4]
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	60da      	str	r2, [r3, #12]
 8001632:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	4b29      	ldr	r3, [pc, #164]	@ (80016e0 <SystemClock_Config+0xd0>)
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	4a28      	ldr	r2, [pc, #160]	@ (80016e0 <SystemClock_Config+0xd0>)
 800163e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001642:	6413      	str	r3, [r2, #64]	@ 0x40
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <SystemClock_Config+0xd0>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164c:	60bb      	str	r3, [r7, #8]
 800164e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <SystemClock_Config+0xd4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800165c:	4a21      	ldr	r2, [pc, #132]	@ (80016e4 <SystemClock_Config+0xd4>)
 800165e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b1f      	ldr	r3, [pc, #124]	@ (80016e4 <SystemClock_Config+0xd4>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001670:	2302      	movs	r3, #2
 8001672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001674:	2301      	movs	r3, #1
 8001676:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001678:	2310      	movs	r3, #16
 800167a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167c:	2302      	movs	r3, #2
 800167e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001684:	2310      	movs	r3, #16
 8001686:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001688:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800168c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800168e:	2304      	movs	r3, #4
 8001690:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001692:	2307      	movs	r3, #7
 8001694:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001696:	f107 0320 	add.w	r3, r7, #32
 800169a:	4618      	mov	r0, r3
 800169c:	f003 fe42 	bl	8005324 <HAL_RCC_OscConfig>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016a6:	f000 f94d 	bl	8001944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016aa:	230f      	movs	r3, #15
 80016ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016ae:	2302      	movs	r3, #2
 80016b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	2102      	movs	r1, #2
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f8a4 	bl	8005814 <HAL_RCC_ClockConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016d2:	f000 f937 	bl	8001944 <Error_Handler>
  }
}
 80016d6:	bf00      	nop
 80016d8:	3750      	adds	r7, #80	@ 0x50
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40007000 	.word	0x40007000

080016e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	@ (800173c <MX_I2C1_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <MX_I2C1_Init+0x58>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001706:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800170a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001726:	f002 fb2b 	bl	8003d80 <HAL_I2C_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001730:	f000 f908 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200001fc 	.word	0x200001fc
 800173c:	40005400 	.word	0x40005400
 8001740:	00061a80 	.word	0x00061a80

08001744 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_SPI2_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <MX_SPI2_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_SPI2_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_SPI2_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001778:	2220      	movs	r2, #32
 800177a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <MX_SPI2_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <MX_SPI2_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_SPI2_Init+0x64>)
 8001796:	f004 fa8f 	bl	8005cb8 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 f8d0 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000250 	.word	0x20000250
 80017ac:	40003800 	.word	0x40003800

080017b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <MX_USART2_UART_Init+0x50>)
 80017b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80017c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017c2:	4b0e      	ldr	r3, [pc, #56]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017ce:	4b0b      	ldr	r3, [pc, #44]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017d4:	4b09      	ldr	r3, [pc, #36]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017d6:	220c      	movs	r2, #12
 80017d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017dc:	2200      	movs	r2, #0
 80017de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e0:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017e6:	4805      	ldr	r0, [pc, #20]	@ (80017fc <MX_USART2_UART_Init+0x4c>)
 80017e8:	f005 f926 	bl	8006a38 <HAL_UART_Init>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80017f2:	f000 f8a7 	bl	8001944 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	200002a8 	.word	0x200002a8
 8001800:	40004400 	.word	0x40004400

08001804 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	@ 0x28
 8001808:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
 8001818:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	4b38      	ldr	r3, [pc, #224]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	4a37      	ldr	r2, [pc, #220]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	6313      	str	r3, [r2, #48]	@ 0x30
 800182a:	4b35      	ldr	r3, [pc, #212]	@ (8001900 <MX_GPIO_Init+0xfc>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	f003 0304 	and.w	r3, r3, #4
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b31      	ldr	r3, [pc, #196]	@ (8001900 <MX_GPIO_Init+0xfc>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001840:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b2e      	ldr	r3, [pc, #184]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001852:	2300      	movs	r3, #0
 8001854:	60bb      	str	r3, [r7, #8]
 8001856:	4b2a      	ldr	r3, [pc, #168]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	4a29      	ldr	r2, [pc, #164]	@ (8001900 <MX_GPIO_Init+0xfc>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6313      	str	r3, [r2, #48]	@ 0x30
 8001862:	4b27      	ldr	r3, [pc, #156]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	60bb      	str	r3, [r7, #8]
 800186c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	2300      	movs	r3, #0
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	4b23      	ldr	r3, [pc, #140]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001878:	f043 0302 	orr.w	r3, r3, #2
 800187c:	6313      	str	r3, [r2, #48]	@ 0x30
 800187e:	4b20      	ldr	r3, [pc, #128]	@ (8001900 <MX_GPIO_Init+0xfc>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	607b      	str	r3, [r7, #4]
 8001888:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800188a:	2200      	movs	r2, #0
 800188c:	2120      	movs	r1, #32
 800188e:	481d      	ldr	r0, [pc, #116]	@ (8001904 <MX_GPIO_Init+0x100>)
 8001890:	f002 fa5c 	bl	8003d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8001894:	2201      	movs	r2, #1
 8001896:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800189a:	481b      	ldr	r0, [pc, #108]	@ (8001908 <MX_GPIO_Init+0x104>)
 800189c:	f002 fa56 	bl	8003d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4815      	ldr	r0, [pc, #84]	@ (800190c <MX_GPIO_Init+0x108>)
 80018b8:	f002 f8c4 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018bc:	2320      	movs	r3, #32
 80018be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018c0:	2301      	movs	r3, #1
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c8:	2300      	movs	r3, #0
 80018ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018cc:	f107 0314 	add.w	r3, r7, #20
 80018d0:	4619      	mov	r1, r3
 80018d2:	480c      	ldr	r0, [pc, #48]	@ (8001904 <MX_GPIO_Init+0x100>)
 80018d4:	f002 f8b6 	bl	8003a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80018d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e6:	2302      	movs	r3, #2
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4805      	ldr	r0, [pc, #20]	@ (8001908 <MX_GPIO_Init+0x104>)
 80018f2:	f002 f8a7 	bl	8003a44 <HAL_GPIO_Init>
}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	@ 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	40020400 	.word	0x40020400
 800190c:	40020800 	.word	0x40020800

08001910 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(DEFAULT_TASK_DELAY_MS);
 8001918:	2001      	movs	r0, #1
 800191a:	f009 fc79 	bl	800b210 <osDelay>
 800191e:	e7fb      	b.n	8001918 <StartDefaultTask+0x8>

08001920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d101      	bne.n	8001936 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001932:	f001 ff61 	bl	80037f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40014000 	.word	0x40014000

08001944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001948:	b672      	cpsid	i
}
 800194a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800194c:	bf00      	nop
 800194e:	e7fd      	b.n	800194c <Error_Handler+0x8>

08001950 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001956:	f000 fa19 	bl	8001d8c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800195a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800195e:	2201      	movs	r2, #1
 8001960:	2178      	movs	r1, #120	@ 0x78
 8001962:	4858      	ldr	r0, [pc, #352]	@ (8001ac4 <SSD1306_Init+0x174>)
 8001964:	f002 ff7a 	bl	800485c <HAL_I2C_IsDeviceReady>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800196e:	2300      	movs	r3, #0
 8001970:	e0a4      	b.n	8001abc <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001972:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001976:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001978:	e002      	b.n	8001980 <SSD1306_Init+0x30>
		p--;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3b01      	subs	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f9      	bne.n	800197a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001986:	22ae      	movs	r2, #174	@ 0xae
 8001988:	2100      	movs	r1, #0
 800198a:	2078      	movs	r0, #120	@ 0x78
 800198c:	f000 fa70 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001990:	2220      	movs	r2, #32
 8001992:	2100      	movs	r1, #0
 8001994:	2078      	movs	r0, #120	@ 0x78
 8001996:	f000 fa6b 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800199a:	2210      	movs	r2, #16
 800199c:	2100      	movs	r1, #0
 800199e:	2078      	movs	r0, #120	@ 0x78
 80019a0:	f000 fa66 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80019a4:	22b0      	movs	r2, #176	@ 0xb0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2078      	movs	r0, #120	@ 0x78
 80019aa:	f000 fa61 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80019ae:	22c8      	movs	r2, #200	@ 0xc8
 80019b0:	2100      	movs	r1, #0
 80019b2:	2078      	movs	r0, #120	@ 0x78
 80019b4:	f000 fa5c 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80019b8:	2200      	movs	r2, #0
 80019ba:	2100      	movs	r1, #0
 80019bc:	2078      	movs	r0, #120	@ 0x78
 80019be:	f000 fa57 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80019c2:	2210      	movs	r2, #16
 80019c4:	2100      	movs	r1, #0
 80019c6:	2078      	movs	r0, #120	@ 0x78
 80019c8:	f000 fa52 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80019cc:	2240      	movs	r2, #64	@ 0x40
 80019ce:	2100      	movs	r1, #0
 80019d0:	2078      	movs	r0, #120	@ 0x78
 80019d2:	f000 fa4d 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80019d6:	2281      	movs	r2, #129	@ 0x81
 80019d8:	2100      	movs	r1, #0
 80019da:	2078      	movs	r0, #120	@ 0x78
 80019dc:	f000 fa48 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80019e0:	22ff      	movs	r2, #255	@ 0xff
 80019e2:	2100      	movs	r1, #0
 80019e4:	2078      	movs	r0, #120	@ 0x78
 80019e6:	f000 fa43 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80019ea:	22a1      	movs	r2, #161	@ 0xa1
 80019ec:	2100      	movs	r1, #0
 80019ee:	2078      	movs	r0, #120	@ 0x78
 80019f0:	f000 fa3e 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80019f4:	22a6      	movs	r2, #166	@ 0xa6
 80019f6:	2100      	movs	r1, #0
 80019f8:	2078      	movs	r0, #120	@ 0x78
 80019fa:	f000 fa39 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80019fe:	22a8      	movs	r2, #168	@ 0xa8
 8001a00:	2100      	movs	r1, #0
 8001a02:	2078      	movs	r0, #120	@ 0x78
 8001a04:	f000 fa34 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001a08:	223f      	movs	r2, #63	@ 0x3f
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2078      	movs	r0, #120	@ 0x78
 8001a0e:	f000 fa2f 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001a12:	22a4      	movs	r2, #164	@ 0xa4
 8001a14:	2100      	movs	r1, #0
 8001a16:	2078      	movs	r0, #120	@ 0x78
 8001a18:	f000 fa2a 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001a1c:	22d3      	movs	r2, #211	@ 0xd3
 8001a1e:	2100      	movs	r1, #0
 8001a20:	2078      	movs	r0, #120	@ 0x78
 8001a22:	f000 fa25 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	2078      	movs	r0, #120	@ 0x78
 8001a2c:	f000 fa20 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001a30:	22d5      	movs	r2, #213	@ 0xd5
 8001a32:	2100      	movs	r1, #0
 8001a34:	2078      	movs	r0, #120	@ 0x78
 8001a36:	f000 fa1b 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001a3a:	22f0      	movs	r2, #240	@ 0xf0
 8001a3c:	2100      	movs	r1, #0
 8001a3e:	2078      	movs	r0, #120	@ 0x78
 8001a40:	f000 fa16 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001a44:	22d9      	movs	r2, #217	@ 0xd9
 8001a46:	2100      	movs	r1, #0
 8001a48:	2078      	movs	r0, #120	@ 0x78
 8001a4a:	f000 fa11 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001a4e:	2222      	movs	r2, #34	@ 0x22
 8001a50:	2100      	movs	r1, #0
 8001a52:	2078      	movs	r0, #120	@ 0x78
 8001a54:	f000 fa0c 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001a58:	22da      	movs	r2, #218	@ 0xda
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2078      	movs	r0, #120	@ 0x78
 8001a5e:	f000 fa07 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001a62:	2212      	movs	r2, #18
 8001a64:	2100      	movs	r1, #0
 8001a66:	2078      	movs	r0, #120	@ 0x78
 8001a68:	f000 fa02 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001a6c:	22db      	movs	r2, #219	@ 0xdb
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2078      	movs	r0, #120	@ 0x78
 8001a72:	f000 f9fd 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001a76:	2220      	movs	r2, #32
 8001a78:	2100      	movs	r1, #0
 8001a7a:	2078      	movs	r0, #120	@ 0x78
 8001a7c:	f000 f9f8 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001a80:	228d      	movs	r2, #141	@ 0x8d
 8001a82:	2100      	movs	r1, #0
 8001a84:	2078      	movs	r0, #120	@ 0x78
 8001a86:	f000 f9f3 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001a8a:	2214      	movs	r2, #20
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2078      	movs	r0, #120	@ 0x78
 8001a90:	f000 f9ee 	bl	8001e70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001a94:	22af      	movs	r2, #175	@ 0xaf
 8001a96:	2100      	movs	r1, #0
 8001a98:	2078      	movs	r0, #120	@ 0x78
 8001a9a:	f000 f9e9 	bl	8001e70 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f842 	bl	8001b28 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001aa4:	f000 f812 	bl	8001acc <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	@ (8001ac8 <SSD1306_Init+0x178>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <SSD1306_Init+0x178>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001ab4:	4b04      	ldr	r3, [pc, #16]	@ (8001ac8 <SSD1306_Init+0x178>)
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001aba:	2301      	movs	r3, #1
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200001fc 	.word	0x200001fc
 8001ac8:	20000740 	.word	0x20000740

08001acc <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	71fb      	strb	r3, [r7, #7]
 8001ad6:	e01d      	b.n	8001b14 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	3b50      	subs	r3, #80	@ 0x50
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	461a      	mov	r2, r3
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	2078      	movs	r0, #120	@ 0x78
 8001ae4:	f000 f9c4 	bl	8001e70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2100      	movs	r1, #0
 8001aec:	2078      	movs	r0, #120	@ 0x78
 8001aee:	f000 f9bf 	bl	8001e70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001af2:	2210      	movs	r2, #16
 8001af4:	2100      	movs	r1, #0
 8001af6:	2078      	movs	r0, #120	@ 0x78
 8001af8:	f000 f9ba 	bl	8001e70 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	01db      	lsls	r3, r3, #7
 8001b00:	4a08      	ldr	r2, [pc, #32]	@ (8001b24 <SSD1306_UpdateScreen+0x58>)
 8001b02:	441a      	add	r2, r3
 8001b04:	2380      	movs	r3, #128	@ 0x80
 8001b06:	2140      	movs	r1, #64	@ 0x40
 8001b08:	2078      	movs	r0, #120	@ 0x78
 8001b0a:	f000 f955 	bl	8001db8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	3301      	adds	r3, #1
 8001b12:	71fb      	strb	r3, [r7, #7]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	d9de      	bls.n	8001ad8 <SSD1306_UpdateScreen+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	bf00      	nop
 8001b1e:	3708      	adds	r7, #8
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20000340 	.word	0x20000340

08001b28 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b32:	79fb      	ldrb	r3, [r7, #7]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <SSD1306_Fill+0x14>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	e000      	b.n	8001b3e <SSD1306_Fill+0x16>
 8001b3c:	23ff      	movs	r3, #255	@ 0xff
 8001b3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b42:	4619      	mov	r1, r3
 8001b44:	4803      	ldr	r0, [pc, #12]	@ (8001b54 <SSD1306_Fill+0x2c>)
 8001b46:	f00d fff9 	bl	800fb3c <memset>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000340 	.word	0x20000340

08001b58 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	80fb      	strh	r3, [r7, #6]
 8001b62:	460b      	mov	r3, r1
 8001b64:	80bb      	strh	r3, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	70fb      	strb	r3, [r7, #3]
	if (
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001b6e:	d848      	bhi.n	8001c02 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b74:	d845      	bhi.n	8001c02 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <SSD1306_DrawPixel+0xb8>)
 8001b78:	791b      	ldrb	r3, [r3, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	bf0c      	ite	eq
 8001b84:	2301      	moveq	r3, #1
 8001b86:	2300      	movne	r3, #0
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d11a      	bne.n	8001bc8 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	88bb      	ldrh	r3, [r7, #4]
 8001b96:	08db      	lsrs	r3, r3, #3
 8001b98:	b298      	uxth	r0, r3
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	01db      	lsls	r3, r3, #7
 8001b9e:	4413      	add	r3, r2
 8001ba0:	4a1c      	ldr	r2, [pc, #112]	@ (8001c14 <SSD1306_DrawPixel+0xbc>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	b25a      	sxtb	r2, r3
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	f003 0307 	and.w	r3, r3, #7
 8001bac:	2101      	movs	r1, #1
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	b259      	sxtb	r1, r3
 8001bb8:	88fa      	ldrh	r2, [r7, #6]
 8001bba:	4603      	mov	r3, r0
 8001bbc:	01db      	lsls	r3, r3, #7
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b2c9      	uxtb	r1, r1
 8001bc2:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <SSD1306_DrawPixel+0xbc>)
 8001bc4:	54d1      	strb	r1, [r2, r3]
 8001bc6:	e01d      	b.n	8001c04 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bc8:	88fa      	ldrh	r2, [r7, #6]
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	b298      	uxth	r0, r3
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	01db      	lsls	r3, r3, #7
 8001bd4:	4413      	add	r3, r2
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8001c14 <SSD1306_DrawPixel+0xbc>)
 8001bd8:	5cd3      	ldrb	r3, [r2, r3]
 8001bda:	b25a      	sxtb	r2, r3
 8001bdc:	88bb      	ldrh	r3, [r7, #4]
 8001bde:	f003 0307 	and.w	r3, r3, #7
 8001be2:	2101      	movs	r1, #1
 8001be4:	fa01 f303 	lsl.w	r3, r1, r3
 8001be8:	b25b      	sxtb	r3, r3
 8001bea:	43db      	mvns	r3, r3
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4013      	ands	r3, r2
 8001bf0:	b259      	sxtb	r1, r3
 8001bf2:	88fa      	ldrh	r2, [r7, #6]
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	01db      	lsls	r3, r3, #7
 8001bf8:	4413      	add	r3, r2
 8001bfa:	b2c9      	uxtb	r1, r1
 8001bfc:	4a05      	ldr	r2, [pc, #20]	@ (8001c14 <SSD1306_DrawPixel+0xbc>)
 8001bfe:	54d1      	strb	r1, [r2, r3]
 8001c00:	e000      	b.n	8001c04 <SSD1306_DrawPixel+0xac>
		return;
 8001c02:	bf00      	nop
	}
}
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	20000740 	.word	0x20000740
 8001c14:	20000340 	.word	0x20000340

08001c18 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	460a      	mov	r2, r1
 8001c22:	80fb      	strh	r3, [r7, #6]
 8001c24:	4613      	mov	r3, r2
 8001c26:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001c28:	4a05      	ldr	r2, [pc, #20]	@ (8001c40 <SSD1306_GotoXY+0x28>)
 8001c2a:	88fb      	ldrh	r3, [r7, #6]
 8001c2c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001c2e:	4a04      	ldr	r2, [pc, #16]	@ (8001c40 <SSD1306_GotoXY+0x28>)
 8001c30:	88bb      	ldrh	r3, [r7, #4]
 8001c32:	8053      	strh	r3, [r2, #2]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	20000740 	.word	0x20000740

08001c44 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	6039      	str	r1, [r7, #0]
 8001c4e:	71fb      	strb	r3, [r7, #7]
 8001c50:	4613      	mov	r3, r2
 8001c52:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c54:	4b39      	ldr	r3, [pc, #228]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001c56:	881b      	ldrh	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	781b      	ldrb	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
	if (
 8001c60:	2b7f      	cmp	r3, #127	@ 0x7f
 8001c62:	dc07      	bgt.n	8001c74 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001c66:	885b      	ldrh	r3, [r3, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001c70:	2b3f      	cmp	r3, #63	@ 0x3f
 8001c72:	dd01      	ble.n	8001c78 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001c74:	2300      	movs	r3, #0
 8001c76:	e05d      	b.n	8001d34 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e04b      	b.n	8001d16 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3b20      	subs	r3, #32
 8001c86:	6839      	ldr	r1, [r7, #0]
 8001c88:	7849      	ldrb	r1, [r1, #1]
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4619      	mov	r1, r3
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	440b      	add	r3, r1
 8001c94:	005b      	lsls	r3, r3, #1
 8001c96:	4413      	add	r3, r2
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	e030      	b.n	8001d04 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d010      	beq.n	8001cd4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001cb2:	4b22      	ldr	r3, [pc, #136]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001cb4:	881a      	ldrh	r2, [r3, #0]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	4413      	add	r3, r2
 8001cbc:	b298      	uxth	r0, r3
 8001cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001cc0:	885a      	ldrh	r2, [r3, #2]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	4413      	add	r3, r2
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	79ba      	ldrb	r2, [r7, #6]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7ff ff43 	bl	8001b58 <SSD1306_DrawPixel>
 8001cd2:	e014      	b.n	8001cfe <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001cd4:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001cd6:	881a      	ldrh	r2, [r3, #0]
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	4413      	add	r3, r2
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	4b16      	ldr	r3, [pc, #88]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001ce2:	885a      	ldrh	r2, [r3, #2]
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4413      	add	r3, r2
 8001cea:	b299      	uxth	r1, r3
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	bf0c      	ite	eq
 8001cf2:	2301      	moveq	r3, #1
 8001cf4:	2300      	movne	r3, #0
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	f7ff ff2d 	bl	8001b58 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	3301      	adds	r3, #1
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d3c8      	bcc.n	8001ca2 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	785b      	ldrb	r3, [r3, #1]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d3ad      	bcc.n	8001c7e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	7812      	ldrb	r2, [r2, #0]
 8001d2a:	4413      	add	r3, r2
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <SSD1306_Putc+0xf8>)
 8001d30:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001d32:	79fb      	ldrb	r3, [r7, #7]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	20000740 	.word	0x20000740

08001d40 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001d4e:	e012      	b.n	8001d76 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	79fa      	ldrb	r2, [r7, #7]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff73 	bl	8001c44 <SSD1306_Putc>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	461a      	mov	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d002      	beq.n	8001d70 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	e008      	b.n	8001d82 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	3301      	adds	r3, #1
 8001d74:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1e8      	bne.n	8001d50 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	781b      	ldrb	r3, [r3, #0]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d92:	4b08      	ldr	r3, [pc, #32]	@ (8001db4 <ssd1306_I2C_Init+0x28>)
 8001d94:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d96:	e002      	b.n	8001d9e <ssd1306_I2C_Init+0x12>
		p--;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d1f9      	bne.n	8001d98 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	0003d090 	.word	0x0003d090

08001db8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001dbc:	b089      	sub	sp, #36	@ 0x24
 8001dbe:	af02      	add	r7, sp, #8
 8001dc0:	603a      	str	r2, [r7, #0]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	71fb      	strb	r3, [r7, #7]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	71bb      	strb	r3, [r7, #6]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	80bb      	strh	r3, [r7, #4]
 8001dd0:	466b      	mov	r3, sp
 8001dd2:	461e      	mov	r6, r3
	uint8_t dt[count + 1];
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	1e4b      	subs	r3, r1, #1
 8001dda:	613b      	str	r3, [r7, #16]
 8001ddc:	460a      	mov	r2, r1
 8001dde:	2300      	movs	r3, #0
 8001de0:	4690      	mov	r8, r2
 8001de2:	4699      	mov	r9, r3
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001df0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001df4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001df8:	460a      	mov	r2, r1
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	4614      	mov	r4, r2
 8001dfe:	461d      	mov	r5, r3
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	00eb      	lsls	r3, r5, #3
 8001e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e0e:	00e2      	lsls	r2, r4, #3
 8001e10:	460b      	mov	r3, r1
 8001e12:	3307      	adds	r3, #7
 8001e14:	08db      	lsrs	r3, r3, #3
 8001e16:	00db      	lsls	r3, r3, #3
 8001e18:	ebad 0d03 	sub.w	sp, sp, r3
 8001e1c:	ab02      	add	r3, sp, #8
 8001e1e:	3300      	adds	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	79ba      	ldrb	r2, [r7, #6]
 8001e26:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001e28:	2301      	movs	r3, #1
 8001e2a:	75fb      	strb	r3, [r7, #23]
 8001e2c:	e00a      	b.n	8001e44 <ssd1306_I2C_WriteMulti+0x8c>
		dt[i] = data[i-1];
 8001e2e:	7dfb      	ldrb	r3, [r7, #23]
 8001e30:	3b01      	subs	r3, #1
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	441a      	add	r2, r3
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	7811      	ldrb	r1, [r2, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8001e3e:	7dfb      	ldrb	r3, [r7, #23]
 8001e40:	3301      	adds	r3, #1
 8001e42:	75fb      	strb	r3, [r7, #23]
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	b29b      	uxth	r3, r3
 8001e48:	88ba      	ldrh	r2, [r7, #4]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d2ef      	bcs.n	8001e2e <ssd1306_I2C_WriteMulti+0x76>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001e4e:	79fb      	ldrb	r3, [r7, #7]
 8001e50:	b299      	uxth	r1, r3
 8001e52:	88bb      	ldrh	r3, [r7, #4]
 8001e54:	220a      	movs	r2, #10
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	4804      	ldr	r0, [pc, #16]	@ (8001e6c <ssd1306_I2C_WriteMulti+0xb4>)
 8001e5c:	f002 f8d4 	bl	8004008 <HAL_I2C_Master_Transmit>
 8001e60:	46b5      	mov	sp, r6
}
 8001e62:	bf00      	nop
 8001e64:	371c      	adds	r7, #28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e6c:	200001fc 	.word	0x200001fc

08001e70 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	4603      	mov	r3, r0
 8001e78:	71fb      	strb	r3, [r7, #7]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	71bb      	strb	r3, [r7, #6]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001e86:	797b      	ldrb	r3, [r7, #5]
 8001e88:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	b299      	uxth	r1, r3
 8001e8e:	f107 020c 	add.w	r2, r7, #12
 8001e92:	230a      	movs	r3, #10
 8001e94:	9300      	str	r3, [sp, #0]
 8001e96:	2302      	movs	r3, #2
 8001e98:	4803      	ldr	r0, [pc, #12]	@ (8001ea8 <ssd1306_I2C_Write+0x38>)
 8001e9a:	f002 f8b5 	bl	8004008 <HAL_I2C_Master_Transmit>
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	200001fc 	.word	0x200001fc

08001eac <SD_disk_status>:

#include "diskio.h"
#include "sd_spi.h"
#include "ff_gen_drv.h"

DSTATUS SD_disk_status(BYTE drv) {
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <SD_disk_status+0x14>
        return STA_NOINIT;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <SD_disk_status+0x16>
    return 0;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE drv) {
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	71fb      	strb	r3, [r7, #7]
    if (drv != 0)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <SD_disk_initialize+0x14>
        return STA_NOINIT;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e007      	b.n	8001ef2 <SD_disk_initialize+0x24>

    return (SD_SPI_Init() == SD_OK) ? 0 : STA_NOINIT;
 8001ee2:	f000 faf1 	bl	80024c8 <SD_SPI_Init>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf14      	ite	ne
 8001eec:	2301      	movne	r3, #1
 8001eee:	2300      	moveq	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <SD_disk_read>:

DRESULT SD_disk_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || count == 0)
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d102      	bne.n	8001f18 <SD_disk_read+0x1c>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <SD_disk_read+0x20>
        return RES_PARERR;
 8001f18:	2304      	movs	r3, #4
 8001f1a:	e010      	b.n	8001f3e <SD_disk_read+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f48 <SD_disk_read+0x4c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <SD_disk_read+0x2c>
 8001f24:	2303      	movs	r3, #3
 8001f26:	e00a      	b.n	8001f3e <SD_disk_read+0x42>
    return (SD_ReadBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001f28:	683a      	ldr	r2, [r7, #0]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	68b8      	ldr	r0, [r7, #8]
 8001f2e:	f000 fbc9 	bl	80026c4 <SD_ReadBlocks>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000985 	.word	0x20000985

08001f4c <SD_disk_write>:

DRESULT SD_disk_write(BYTE pdrv,  const BYTE *buff, DWORD sector, UINT count) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	607a      	str	r2, [r7, #4]
 8001f56:	603b      	str	r3, [r7, #0]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	73fb      	strb	r3, [r7, #15]
    if (pdrv || !count) return RES_PARERR;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d102      	bne.n	8001f68 <SD_disk_write+0x1c>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <SD_disk_write+0x20>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e010      	b.n	8001f8e <SD_disk_write+0x42>
    if (!card_initialized) return RES_NOTRDY;
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f98 <SD_disk_write+0x4c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d101      	bne.n	8001f78 <SD_disk_write+0x2c>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e00a      	b.n	8001f8e <SD_disk_write+0x42>
    return (SD_WriteBlocks(buff, sector, count) == SD_OK) ? RES_OK : RES_ERROR;
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	68b8      	ldr	r0, [r7, #8]
 8001f7e:	f000 fc7d 	bl	800287c <SD_WriteBlocks>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	bf14      	ite	ne
 8001f88:	2301      	movne	r3, #1
 8001f8a:	2300      	moveq	r3, #0
 8001f8c:	b2db      	uxtb	r3, r3
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000985 	.word	0x20000985

08001f9c <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE pdrv, BYTE cmd, void *buff) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	603a      	str	r2, [r7, #0]
 8001fa6:	71fb      	strb	r3, [r7, #7]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0)
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SD_disk_ioctl+0x1a>
        return RES_PARERR;
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e022      	b.n	8001ffc <SD_disk_ioctl+0x60>

    switch (cmd) {
 8001fb6:	79bb      	ldrb	r3, [r7, #6]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d81e      	bhi.n	8001ffa <SD_disk_ioctl+0x5e>
 8001fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc4 <SD_disk_ioctl+0x28>)
 8001fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc2:	bf00      	nop
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fe5 	.word	0x08001fe5
 8001fcc:	08001fd9 	.word	0x08001fd9
 8001fd0:	08001ff1 	.word	0x08001ff1
    case CTRL_SYNC:
        return RES_OK;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	e011      	b.n	8001ffc <SD_disk_ioctl+0x60>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fde:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	e00b      	b.n	8001ffc <SD_disk_ioctl+0x60>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 0x10000; // Example: 32MB SD card (65536 * 512)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001fea:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	e005      	b.n	8001ffc <SD_disk_ioctl+0x60>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e000      	b.n	8001ffc <SD_disk_ioctl+0x60>
    default:
        return RES_PARERR;
 8001ffa:	2304      	movs	r3, #4
    }
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <sd_format>:
#include "ffconf.h"

char sd_path[4];
FATFS fs;

int sd_format(void) {
 8002008:	b580      	push	{r7, lr}
 800200a:	f5ad 5d80 	sub.w	sp, sp, #4096	@ 0x1000
 800200e:	b084      	sub	sp, #16
 8002010:	af02      	add	r7, sp, #8
	// Pre-mount required for legacy FatFS
	f_mount(&fs, sd_path, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	4917      	ldr	r1, [pc, #92]	@ (8002074 <sd_format+0x6c>)
 8002016:	4818      	ldr	r0, [pc, #96]	@ (8002078 <sd_format+0x70>)
 8002018:	f007 fa88 	bl	800952c <f_mount>


	BYTE work[4096];
	FRESULT res = f_mkfs(sd_path, 1, 0, work, sizeof(work));
 800201c:	f107 0308 	add.w	r3, r7, #8
 8002020:	3b04      	subs	r3, #4
 8002022:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002026:	9200      	str	r2, [sp, #0]
 8002028:	2200      	movs	r2, #0
 800202a:	2101      	movs	r1, #1
 800202c:	4811      	ldr	r0, [pc, #68]	@ (8002074 <sd_format+0x6c>)
 800202e:	f008 fa23 	bl	800a478 <f_mkfs>
 8002032:	4603      	mov	r3, r0
 8002034:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8002038:	f102 0207 	add.w	r2, r2, #7
 800203c:	7013      	strb	r3, [r2, #0]
	if (res != FR_OK) {
 800203e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002042:	f103 0307 	add.w	r3, r3, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <sd_format+0x56>
		printf("Format failed: f_mkfs returned %d\r\n", res);
 800204c:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002050:	f103 0307 	add.w	r3, r3, #7
 8002054:	781b      	ldrb	r3, [r3, #0]
 8002056:	4619      	mov	r1, r3
 8002058:	4808      	ldr	r0, [pc, #32]	@ (800207c <sd_format+0x74>)
 800205a:	f00d fbb5 	bl	800f7c8 <iprintf>
	}
		return res;
 800205e:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 8002062:	f103 0307 	add.w	r3, r3, #7
 8002066:	781b      	ldrb	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	20000748 	.word	0x20000748
 8002078:	2000074c 	.word	0x2000074c
 800207c:	08011d44 	.word	0x08011d44

08002080 <sd_get_space_kb>:

int sd_get_space_kb(void) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
	FATFS *pfs;
	DWORD fre_clust, tot_sect, fre_sect, total_kb, free_kb;
	FRESULT res = f_getfree(sd_path, &fre_clust, &pfs);
 8002086:	f107 0208 	add.w	r2, r7, #8
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4814      	ldr	r0, [pc, #80]	@ (80020e0 <sd_get_space_kb+0x60>)
 8002090:	f008 f935 	bl	800a2fe <f_getfree>
 8002094:	4603      	mov	r3, r0
 8002096:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8002098:	7ffb      	ldrb	r3, [r7, #31]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <sd_get_space_kb+0x22>
 800209e:	7ffb      	ldrb	r3, [r7, #31]
 80020a0:	e01a      	b.n	80020d8 <sd_get_space_kb+0x58>

	tot_sect = (pfs->n_fatent - 2) * pfs->csize;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	69db      	ldr	r3, [r3, #28]
 80020a6:	3b02      	subs	r3, #2
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	8952      	ldrh	r2, [r2, #10]
 80020ac:	fb02 f303 	mul.w	r3, r2, r3
 80020b0:	61bb      	str	r3, [r7, #24]
	fre_sect = fre_clust * pfs->csize;
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	895b      	ldrh	r3, [r3, #10]
 80020b6:	461a      	mov	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	fb02 f303 	mul.w	r3, r2, r3
 80020be:	617b      	str	r3, [r7, #20]
	total_kb = tot_sect / 2;
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	085b      	lsrs	r3, r3, #1
 80020c4:	613b      	str	r3, [r7, #16]
	free_kb = fre_sect / 2;
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	085b      	lsrs	r3, r3, #1
 80020ca:	60fb      	str	r3, [r7, #12]
	printf("💾 Total: %lu KB, Free: %lu KB\r\n", total_kb, free_kb);
 80020cc:	68fa      	ldr	r2, [r7, #12]
 80020ce:	6939      	ldr	r1, [r7, #16]
 80020d0:	4804      	ldr	r0, [pc, #16]	@ (80020e4 <sd_get_space_kb+0x64>)
 80020d2:	f00d fb79 	bl	800f7c8 <iprintf>
	return FR_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3720      	adds	r7, #32
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	20000748 	.word	0x20000748
 80020e4:	08011d68 	.word	0x08011d68

080020e8 <sd_mount>:

int sd_mount(void) {
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
	FRESULT res;
	extern uint8_t sd_is_sdhc(void);

	printf("Linking SD driver...\r\n");
 80020ee:	4840      	ldr	r0, [pc, #256]	@ (80021f0 <sd_mount+0x108>)
 80020f0:	f00d fbd2 	bl	800f898 <puts>
	if (FATFS_LinkDriver(&SD_Driver, sd_path) != 0) {
 80020f4:	493f      	ldr	r1, [pc, #252]	@ (80021f4 <sd_mount+0x10c>)
 80020f6:	4840      	ldr	r0, [pc, #256]	@ (80021f8 <sd_mount+0x110>)
 80020f8:	f008 fe36 	bl	800ad68 <FATFS_LinkDriver>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d004      	beq.n	800210c <sd_mount+0x24>
		printf("FATFS_LinkDriver failed\r\n");
 8002102:	483e      	ldr	r0, [pc, #248]	@ (80021fc <sd_mount+0x114>)
 8002104:	f00d fbc8 	bl	800f898 <puts>
		return FR_DISK_ERR;
 8002108:	2301      	movs	r3, #1
 800210a:	e06d      	b.n	80021e8 <sd_mount+0x100>
	}

	printf("Initializing disk...\r\n");
 800210c:	483c      	ldr	r0, [pc, #240]	@ (8002200 <sd_mount+0x118>)
 800210e:	f00d fbc3 	bl	800f898 <puts>
	DSTATUS stat = disk_initialize(0);
 8002112:	2000      	movs	r0, #0
 8002114:	f005 f8be 	bl	8007294 <disk_initialize>
 8002118:	4603      	mov	r3, r0
 800211a:	71fb      	strb	r3, [r7, #7]
	if (stat != 0) {
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d009      	beq.n	8002136 <sd_mount+0x4e>
		printf("disk_initialize failed: 0x%02X\r\n", stat);
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4619      	mov	r1, r3
 8002126:	4837      	ldr	r0, [pc, #220]	@ (8002204 <sd_mount+0x11c>)
 8002128:	f00d fb4e 	bl	800f7c8 <iprintf>
		printf("FR_NOT_READY\tTry Hard Reset or Check Connection/Power\r\n");
 800212c:	4836      	ldr	r0, [pc, #216]	@ (8002208 <sd_mount+0x120>)
 800212e:	f00d fbb3 	bl	800f898 <puts>
		return FR_NOT_READY;
 8002132:	2303      	movs	r3, #3
 8002134:	e058      	b.n	80021e8 <sd_mount+0x100>
	}

	printf("Attempting mount at %s...\r\n", sd_path);
 8002136:	492f      	ldr	r1, [pc, #188]	@ (80021f4 <sd_mount+0x10c>)
 8002138:	4834      	ldr	r0, [pc, #208]	@ (800220c <sd_mount+0x124>)
 800213a:	f00d fb45 	bl	800f7c8 <iprintf>
	res = f_mount(&fs, sd_path, 1);
 800213e:	2201      	movs	r2, #1
 8002140:	492c      	ldr	r1, [pc, #176]	@ (80021f4 <sd_mount+0x10c>)
 8002142:	4833      	ldr	r0, [pc, #204]	@ (8002210 <sd_mount+0x128>)
 8002144:	f007 f9f2 	bl	800952c <f_mount>
 8002148:	4603      	mov	r3, r0
 800214a:	71bb      	strb	r3, [r7, #6]
	if (res == FR_OK)
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d113      	bne.n	800217a <sd_mount+0x92>
	{
		printf("SD card mounted successfully at %s\r\n", sd_path);
 8002152:	4928      	ldr	r1, [pc, #160]	@ (80021f4 <sd_mount+0x10c>)
 8002154:	482f      	ldr	r0, [pc, #188]	@ (8002214 <sd_mount+0x12c>)
 8002156:	f00d fb37 	bl	800f7c8 <iprintf>
		printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 800215a:	f000 f9a9 	bl	80024b0 <sd_is_sdhc>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <sd_mount+0x80>
 8002164:	4b2c      	ldr	r3, [pc, #176]	@ (8002218 <sd_mount+0x130>)
 8002166:	e000      	b.n	800216a <sd_mount+0x82>
 8002168:	4b2c      	ldr	r3, [pc, #176]	@ (800221c <sd_mount+0x134>)
 800216a:	4619      	mov	r1, r3
 800216c:	482c      	ldr	r0, [pc, #176]	@ (8002220 <sd_mount+0x138>)
 800216e:	f00d fb2b 	bl	800f7c8 <iprintf>

		// Capacity and free space reporting
		sd_get_space_kb();
 8002172:	f7ff ff85 	bl	8002080 <sd_get_space_kb>
		return FR_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e036      	b.n	80021e8 <sd_mount+0x100>
	}

//	 Handle no filesystem by creating one
	if (res == FR_NO_FILESYSTEM)
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	2b0d      	cmp	r3, #13
 800217e:	d12d      	bne.n	80021dc <sd_mount+0xf4>
	{
		printf("No filesystem found on SD card. Attempting format...\r\nThis will create 32MB Partition (Most Probably)\r\n");
 8002180:	4828      	ldr	r0, [pc, #160]	@ (8002224 <sd_mount+0x13c>)
 8002182:	f00d fb89 	bl	800f898 <puts>
		printf("If you need the full sized SD card, use the computer to format into FAT32\r\n");
 8002186:	4828      	ldr	r0, [pc, #160]	@ (8002228 <sd_mount+0x140>)
 8002188:	f00d fb86 	bl	800f898 <puts>
		sd_format();
 800218c:	f7ff ff3c 	bl	8002008 <sd_format>

		printf("Retrying mount after format...\r\n");
 8002190:	4826      	ldr	r0, [pc, #152]	@ (800222c <sd_mount+0x144>)
 8002192:	f00d fb81 	bl	800f898 <puts>
		res = f_mount(&fs, sd_path, 1);
 8002196:	2201      	movs	r2, #1
 8002198:	4916      	ldr	r1, [pc, #88]	@ (80021f4 <sd_mount+0x10c>)
 800219a:	481d      	ldr	r0, [pc, #116]	@ (8002210 <sd_mount+0x128>)
 800219c:	f007 f9c6 	bl	800952c <f_mount>
 80021a0:	4603      	mov	r3, r0
 80021a2:	71bb      	strb	r3, [r7, #6]
		if (res == FR_OK) {
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d111      	bne.n	80021ce <sd_mount+0xe6>
			printf("SD card formatted and mounted successfully.\r\n");
 80021aa:	4821      	ldr	r0, [pc, #132]	@ (8002230 <sd_mount+0x148>)
 80021ac:	f00d fb74 	bl	800f898 <puts>
			printf("Card Type: %s\r\n", sd_is_sdhc() ? "SDHC/SDXC" : "SDSC");
 80021b0:	f000 f97e 	bl	80024b0 <sd_is_sdhc>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <sd_mount+0xd6>
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <sd_mount+0x130>)
 80021bc:	e000      	b.n	80021c0 <sd_mount+0xd8>
 80021be:	4b17      	ldr	r3, [pc, #92]	@ (800221c <sd_mount+0x134>)
 80021c0:	4619      	mov	r1, r3
 80021c2:	4817      	ldr	r0, [pc, #92]	@ (8002220 <sd_mount+0x138>)
 80021c4:	f00d fb00 	bl	800f7c8 <iprintf>

			// Report capacity after format
			sd_get_space_kb();
 80021c8:	f7ff ff5a 	bl	8002080 <sd_get_space_kb>
 80021cc:	e004      	b.n	80021d8 <sd_mount+0xf0>
		}
		else {
			printf("Mount failed even after format: %d\r\n", res);
 80021ce:	79bb      	ldrb	r3, [r7, #6]
 80021d0:	4619      	mov	r1, r3
 80021d2:	4818      	ldr	r0, [pc, #96]	@ (8002234 <sd_mount+0x14c>)
 80021d4:	f00d faf8 	bl	800f7c8 <iprintf>
		}
		return res;
 80021d8:	79bb      	ldrb	r3, [r7, #6]
 80021da:	e005      	b.n	80021e8 <sd_mount+0x100>
	}

	// Any other mount error
	printf("Mount failed with code: %d\r\n", res);
 80021dc:	79bb      	ldrb	r3, [r7, #6]
 80021de:	4619      	mov	r1, r3
 80021e0:	4815      	ldr	r0, [pc, #84]	@ (8002238 <sd_mount+0x150>)
 80021e2:	f00d faf1 	bl	800f7c8 <iprintf>
	return res;
 80021e6:	79bb      	ldrb	r3, [r7, #6]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3708      	adds	r7, #8
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	08011d8c 	.word	0x08011d8c
 80021f4:	20000748 	.word	0x20000748
 80021f8:	08012ac8 	.word	0x08012ac8
 80021fc:	08011da4 	.word	0x08011da4
 8002200:	08011dc0 	.word	0x08011dc0
 8002204:	08011dd8 	.word	0x08011dd8
 8002208:	08011dfc 	.word	0x08011dfc
 800220c:	08011e34 	.word	0x08011e34
 8002210:	2000074c 	.word	0x2000074c
 8002214:	08011e50 	.word	0x08011e50
 8002218:	08011e78 	.word	0x08011e78
 800221c:	08011e84 	.word	0x08011e84
 8002220:	08011e8c 	.word	0x08011e8c
 8002224:	08011e9c 	.word	0x08011e9c
 8002228:	08011f04 	.word	0x08011f04
 800222c:	08011f50 	.word	0x08011f50
 8002230:	08011f70 	.word	0x08011f70
 8002234:	08011fa0 	.word	0x08011fa0
 8002238:	08011fc8 	.word	0x08011fc8

0800223c <sd_append_file>:
	f_close(&file);
	printf("Write %u bytes to %s\r\n", bw, filename);
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
}

int sd_append_file(const char *filename, const char *text) {
 800223c:	b590      	push	{r4, r7, lr}
 800223e:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8002242:	af00      	add	r7, sp, #0
 8002244:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002248:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 800224c:	6018      	str	r0, [r3, #0]
 800224e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002252:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002256:	6019      	str	r1, [r3, #0]
	FIL file;
	UINT bw;
	FRESULT res = f_open(&file, filename, FA_OPEN_ALWAYS | FA_WRITE);
 8002258:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 800225c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8002260:	f107 000c 	add.w	r0, r7, #12
 8002264:	2212      	movs	r2, #18
 8002266:	6819      	ldr	r1, [r3, #0]
 8002268:	f007 f9c4 	bl	80095f4 <f_open>
 800226c:	4603      	mov	r3, r0
 800226e:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) return res;
 8002272:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8002276:	2b00      	cmp	r3, #0
 8002278:	d002      	beq.n	8002280 <sd_append_file+0x44>
 800227a:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800227e:	e058      	b.n	8002332 <sd_append_file+0xf6>

	res = f_lseek(&file, f_size(&file));
 8002280:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002284:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 8002288:	68da      	ldr	r2, [r3, #12]
 800228a:	f107 030c 	add.w	r3, r7, #12
 800228e:	4611      	mov	r1, r2
 8002290:	4618      	mov	r0, r3
 8002292:	f007 fde1 	bl	8009e58 <f_lseek>
 8002296:	4603      	mov	r3, r0
 8002298:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	if (res != FR_OK) {
 800229c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d007      	beq.n	80022b4 <sd_append_file+0x78>
		f_close(&file);
 80022a4:	f107 030c 	add.w	r3, r7, #12
 80022a8:	4618      	mov	r0, r3
 80022aa:	f007 fda6 	bl	8009dfa <f_close>
		return res;
 80022ae:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 80022b2:	e03e      	b.n	8002332 <sd_append_file+0xf6>
	}

	res = f_write(&file, text, strlen(text), &bw);
 80022b4:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022b8:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	f7fd ffdf 	bl	8000280 <strlen>
 80022c2:	4604      	mov	r4, r0
 80022c4:	f107 0308 	add.w	r3, r7, #8
 80022c8:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 80022cc:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 80022d0:	f107 000c 	add.w	r0, r7, #12
 80022d4:	4622      	mov	r2, r4
 80022d6:	6809      	ldr	r1, [r1, #0]
 80022d8:	f007 fb62 	bl	80099a0 <f_write>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
	f_close(&file);
 80022e2:	f107 030c 	add.w	r3, r7, #12
 80022e6:	4618      	mov	r0, r3
 80022e8:	f007 fd87 	bl	8009dfa <f_close>
	printf("Appended %u bytes to %s\r\n", bw, filename);
 80022ec:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022f0:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 80022fa:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	480e      	ldr	r0, [pc, #56]	@ (800233c <sd_append_file+0x100>)
 8002302:	f00d fa61 	bl	800f7c8 <iprintf>
	return (res == FR_OK && bw == strlen(text)) ? FR_OK : FR_DISK_ERR;
 8002306:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10e      	bne.n	800232c <sd_append_file+0xf0>
 800230e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002312:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	f7fd ffb2 	bl	8000280 <strlen>
 800231c:	4602      	mov	r2, r0
 800231e:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8002322:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <sd_append_file+0xf4>
 800232c:	2301      	movs	r3, #1
 800232e:	e000      	b.n	8002332 <sd_append_file+0xf6>
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8002338:	46bd      	mov	sp, r7
 800233a:	bd90      	pop	{r4, r7, pc}
 800233c:	08012024 	.word	0x08012024

08002340 <SD_TransmitByte>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) {
	if (hspi == &hspi2) dma_rx_done = 1;
}
#endif

static void SD_TransmitByte(uint8_t data) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]
    HAL_SPI_Transmit(&SD_SPI_HANDLE, &data, 1, HAL_MAX_DELAY);
 800234a:	1df9      	adds	r1, r7, #7
 800234c:	f04f 33ff 	mov.w	r3, #4294967295
 8002350:	2201      	movs	r2, #1
 8002352:	4803      	ldr	r0, [pc, #12]	@ (8002360 <SD_TransmitByte+0x20>)
 8002354:	f003 fd39 	bl	8005dca <HAL_SPI_Transmit>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000250 	.word	0x20000250

08002364 <SD_ReceiveByte>:

static uint8_t SD_ReceiveByte(void) {
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af02      	add	r7, sp, #8
    uint8_t dummy = 0xFF, data = 0;
 800236a:	23ff      	movs	r3, #255	@ 0xff
 800236c:	71fb      	strb	r3, [r7, #7]
 800236e:	2300      	movs	r3, #0
 8002370:	71bb      	strb	r3, [r7, #6]
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dummy, &data, 1, HAL_MAX_DELAY);
 8002372:	1dba      	adds	r2, r7, #6
 8002374:	1df9      	adds	r1, r7, #7
 8002376:	f04f 33ff 	mov.w	r3, #4294967295
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2301      	movs	r3, #1
 800237e:	4804      	ldr	r0, [pc, #16]	@ (8002390 <SD_ReceiveByte+0x2c>)
 8002380:	f003 fe67 	bl	8006052 <HAL_SPI_TransmitReceive>
    return data;
 8002384:	79bb      	ldrb	r3, [r7, #6]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	20000250 	.word	0x20000250

08002394 <SD_TransmitBuffer>:

static void SD_TransmitBuffer(const uint8_t *buffer, uint16_t len) {
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
#if USE_DMA
    dma_tx_done = 0;
    HAL_SPI_Transmit_DMA(&SD_SPI_HANDLE, (uint8_t *)buffer, len);
    while (!dma_tx_done);
#else
    HAL_SPI_Transmit(&SD_SPI_HANDLE, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 80023a0:	887a      	ldrh	r2, [r7, #2]
 80023a2:	f04f 33ff 	mov.w	r3, #4294967295
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4803      	ldr	r0, [pc, #12]	@ (80023b8 <SD_TransmitBuffer+0x24>)
 80023aa:	f003 fd0e 	bl	8005dca <HAL_SPI_Transmit>
#endif
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000250 	.word	0x20000250

080023bc <SD_ReceiveBuffer>:

static void SD_ReceiveBuffer(uint8_t *buffer, uint16_t len) {
 80023bc:	b590      	push	{r4, r7, lr}
 80023be:	b085      	sub	sp, #20
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	460b      	mov	r3, r1
 80023c6:	807b      	strh	r3, [r7, #2]
    for (int i = 0; i < len; i++) tx_dummy[i] = 0xFF;  // Fill with 0xFF
    dma_rx_done = 0;
    HAL_SPI_TransmitReceive_DMA(&hspi2, tx_dummy, buffer, len);
    while (!dma_rx_done);
#else
    for (uint16_t i = 0; i < len; i++) {
 80023c8:	2300      	movs	r3, #0
 80023ca:	81fb      	strh	r3, [r7, #14]
 80023cc:	e009      	b.n	80023e2 <SD_ReceiveBuffer+0x26>
        buffer[i] = SD_ReceiveByte();
 80023ce:	89fb      	ldrh	r3, [r7, #14]
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	18d4      	adds	r4, r2, r3
 80023d4:	f7ff ffc6 	bl	8002364 <SD_ReceiveByte>
 80023d8:	4603      	mov	r3, r0
 80023da:	7023      	strb	r3, [r4, #0]
    for (uint16_t i = 0; i < len; i++) {
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	3301      	adds	r3, #1
 80023e0:	81fb      	strh	r3, [r7, #14]
 80023e2:	89fa      	ldrh	r2, [r7, #14]
 80023e4:	887b      	ldrh	r3, [r7, #2]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d3f1      	bcc.n	80023ce <SD_ReceiveBuffer+0x12>
    }
#endif
}
 80023ea:	bf00      	nop
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}

080023f4 <SD_WaitReady>:

static SD_Status SD_WaitReady(void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b082      	sub	sp, #8
 80023f8:	af00      	add	r7, sp, #0
    uint32_t timeout = HAL_GetTick() + 500;
 80023fa:	f001 fa11 	bl	8003820 <HAL_GetTick>
 80023fe:	4603      	mov	r3, r0
 8002400:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002404:	607b      	str	r3, [r7, #4]
    uint8_t resp;
    do {
        resp = SD_ReceiveByte();
 8002406:	f7ff ffad 	bl	8002364 <SD_ReceiveByte>
 800240a:	4603      	mov	r3, r0
 800240c:	70fb      	strb	r3, [r7, #3]
        if (resp == 0xFF) return SD_OK;
 800240e:	78fb      	ldrb	r3, [r7, #3]
 8002410:	2bff      	cmp	r3, #255	@ 0xff
 8002412:	d101      	bne.n	8002418 <SD_WaitReady+0x24>
 8002414:	2300      	movs	r3, #0
 8002416:	e006      	b.n	8002426 <SD_WaitReady+0x32>
    } while (HAL_GetTick() < timeout);
 8002418:	f001 fa02 	bl	8003820 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4293      	cmp	r3, r2
 8002422:	d8f0      	bhi.n	8002406 <SD_WaitReady+0x12>
    return SD_ERROR;
 8002424:	2301      	movs	r3, #1
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <SD_SendCommand>:

static uint8_t SD_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800242e:	b580      	push	{r7, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	6039      	str	r1, [r7, #0]
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	4613      	mov	r3, r2
 800243c:	71bb      	strb	r3, [r7, #6]
    uint8_t response, retry = 0xFF;
 800243e:	23ff      	movs	r3, #255	@ 0xff
 8002440:	73fb      	strb	r3, [r7, #15]

    SD_WaitReady();
 8002442:	f7ff ffd7 	bl	80023f4 <SD_WaitReady>
    SD_TransmitByte(0x40 | cmd);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff76 	bl	8002340 <SD_TransmitByte>
    SD_TransmitByte(arg >> 24);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	b2db      	uxtb	r3, r3
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff70 	bl	8002340 <SD_TransmitByte>
    SD_TransmitByte(arg >> 16);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	b2db      	uxtb	r3, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff ff6a 	bl	8002340 <SD_TransmitByte>
    SD_TransmitByte(arg >> 8);
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	b2db      	uxtb	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	f7ff ff64 	bl	8002340 <SD_TransmitByte>
    SD_TransmitByte(arg);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2db      	uxtb	r3, r3
 800247c:	4618      	mov	r0, r3
 800247e:	f7ff ff5f 	bl	8002340 <SD_TransmitByte>
    SD_TransmitByte(crc);
 8002482:	79bb      	ldrb	r3, [r7, #6]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5b 	bl	8002340 <SD_TransmitByte>

    do {
        response = SD_ReceiveByte();
 800248a:	f7ff ff6b 	bl	8002364 <SD_ReceiveByte>
 800248e:	4603      	mov	r3, r0
 8002490:	73bb      	strb	r3, [r7, #14]
    } while ((response & 0x80) && --retry);
 8002492:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002496:	2b00      	cmp	r3, #0
 8002498:	da05      	bge.n	80024a6 <SD_SendCommand+0x78>
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	3b01      	subs	r3, #1
 800249e:	73fb      	strb	r3, [r7, #15]
 80024a0:	7bfb      	ldrb	r3, [r7, #15]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f1      	bne.n	800248a <SD_SendCommand+0x5c>

    return response;
 80024a6:	7bbb      	ldrb	r3, [r7, #14]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <sd_is_sdhc>:

static uint8_t sdhc = 0;
uint8_t sd_is_sdhc(void) {
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    return sdhc;
 80024b4:	4b03      	ldr	r3, [pc, #12]	@ (80024c4 <sd_is_sdhc+0x14>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000984 	.word	0x20000984

080024c8 <SD_SPI_Init>:
uint8_t card_initialized = 0;


SD_Status SD_SPI_Init(void) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
    uint8_t i, response;
    uint8_t r7[4];
    uint32_t retry;

    SD_CS_HIGH();
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024d4:	4878      	ldr	r0, [pc, #480]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 80024d6:	f001 fc39 	bl	8003d4c <HAL_GPIO_WritePin>
    for (i = 0; i < 10; i++) SD_TransmitByte(0xFF);
 80024da:	2300      	movs	r3, #0
 80024dc:	73fb      	strb	r3, [r7, #15]
 80024de:	e005      	b.n	80024ec <SD_SPI_Init+0x24>
 80024e0:	20ff      	movs	r0, #255	@ 0xff
 80024e2:	f7ff ff2d 	bl	8002340 <SD_TransmitByte>
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b09      	cmp	r3, #9
 80024f0:	d9f6      	bls.n	80024e0 <SD_SPI_Init+0x18>

    SD_CS_LOW();
 80024f2:	2200      	movs	r2, #0
 80024f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80024f8:	486f      	ldr	r0, [pc, #444]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 80024fa:	f001 fc27 	bl	8003d4c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD0, 0, 0x95);
 80024fe:	2295      	movs	r2, #149	@ 0x95
 8002500:	2100      	movs	r1, #0
 8002502:	2000      	movs	r0, #0
 8002504:	f7ff ff93 	bl	800242e <SD_SendCommand>
 8002508:	4603      	mov	r3, r0
 800250a:	73bb      	strb	r3, [r7, #14]
    SD_CS_HIGH();
 800250c:	2201      	movs	r2, #1
 800250e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002512:	4869      	ldr	r0, [pc, #420]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 8002514:	f001 fc1a 	bl	8003d4c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8002518:	20ff      	movs	r0, #255	@ 0xff
 800251a:	f7ff ff11 	bl	8002340 <SD_TransmitByte>
    if (response != 0x01) return SD_ERROR;
 800251e:	7bbb      	ldrb	r3, [r7, #14]
 8002520:	2b01      	cmp	r3, #1
 8002522:	d001      	beq.n	8002528 <SD_SPI_Init+0x60>
 8002524:	2301      	movs	r3, #1
 8002526:	e0c2      	b.n	80026ae <SD_SPI_Init+0x1e6>

    SD_CS_LOW();
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800252e:	4862      	ldr	r0, [pc, #392]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 8002530:	f001 fc0c 	bl	8003d4c <HAL_GPIO_WritePin>
    response = SD_SendCommand(CMD8, 0x000001AA, 0x87);
 8002534:	2287      	movs	r2, #135	@ 0x87
 8002536:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800253a:	2008      	movs	r0, #8
 800253c:	f7ff ff77 	bl	800242e <SD_SendCommand>
 8002540:	4603      	mov	r3, r0
 8002542:	73bb      	strb	r3, [r7, #14]
    for (i = 0; i < 4; i++) r7[i] = SD_ReceiveByte();
 8002544:	2300      	movs	r3, #0
 8002546:	73fb      	strb	r3, [r7, #15]
 8002548:	e00c      	b.n	8002564 <SD_SPI_Init+0x9c>
 800254a:	7bfc      	ldrb	r4, [r7, #15]
 800254c:	f7ff ff0a 	bl	8002364 <SD_ReceiveByte>
 8002550:	4603      	mov	r3, r0
 8002552:	461a      	mov	r2, r3
 8002554:	f104 0310 	add.w	r3, r4, #16
 8002558:	443b      	add	r3, r7
 800255a:	f803 2c0c 	strb.w	r2, [r3, #-12]
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	3301      	adds	r3, #1
 8002562:	73fb      	strb	r3, [r7, #15]
 8002564:	7bfb      	ldrb	r3, [r7, #15]
 8002566:	2b03      	cmp	r3, #3
 8002568:	d9ef      	bls.n	800254a <SD_SPI_Init+0x82>
    SD_CS_HIGH();
 800256a:	2201      	movs	r2, #1
 800256c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002570:	4851      	ldr	r0, [pc, #324]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 8002572:	f001 fbeb 	bl	8003d4c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8002576:	20ff      	movs	r0, #255	@ 0xff
 8002578:	f7ff fee2 	bl	8002340 <SD_TransmitByte>

    sdhc = 0;
 800257c:	4b4f      	ldr	r3, [pc, #316]	@ (80026bc <SD_SPI_Init+0x1f4>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
    retry = HAL_GetTick() + 1000;
 8002582:	f001 f94d 	bl	8003820 <HAL_GetTick>
 8002586:	4603      	mov	r3, r0
 8002588:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800258c:	60bb      	str	r3, [r7, #8]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 800258e:	7bbb      	ldrb	r3, [r7, #14]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d15e      	bne.n	8002652 <SD_SPI_Init+0x18a>
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d15b      	bne.n	8002652 <SD_SPI_Init+0x18a>
 800259a:	79fb      	ldrb	r3, [r7, #7]
 800259c:	2baa      	cmp	r3, #170	@ 0xaa
 800259e:	d158      	bne.n	8002652 <SD_SPI_Init+0x18a>
        do {
            SD_CS_LOW();
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025a6:	4844      	ldr	r0, [pc, #272]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 80025a8:	f001 fbd0 	bl	8003d4c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 80025ac:	22ff      	movs	r2, #255	@ 0xff
 80025ae:	2100      	movs	r1, #0
 80025b0:	2037      	movs	r0, #55	@ 0x37
 80025b2:	f7ff ff3c 	bl	800242e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0x40000000, 0xFF);
 80025b6:	22ff      	movs	r2, #255	@ 0xff
 80025b8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80025bc:	2029      	movs	r0, #41	@ 0x29
 80025be:	f7ff ff36 	bl	800242e <SD_SendCommand>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 80025c6:	2201      	movs	r2, #1
 80025c8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025cc:	483a      	ldr	r0, [pc, #232]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 80025ce:	f001 fbbd 	bl	8003d4c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 80025d2:	20ff      	movs	r0, #255	@ 0xff
 80025d4:	f7ff feb4 	bl	8002340 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d005      	beq.n	80025ea <SD_SPI_Init+0x122>
 80025de:	f001 f91f 	bl	8003820 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d8da      	bhi.n	80025a0 <SD_SPI_Init+0xd8>

        if (response != 0x00) return SD_ERROR;
 80025ea:	7bbb      	ldrb	r3, [r7, #14]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <SD_SPI_Init+0x12c>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e05c      	b.n	80026ae <SD_SPI_Init+0x1e6>

        SD_CS_LOW();
 80025f4:	2200      	movs	r2, #0
 80025f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80025fa:	482f      	ldr	r0, [pc, #188]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 80025fc:	f001 fba6 	bl	8003d4c <HAL_GPIO_WritePin>
        response = SD_SendCommand(CMD58, 0, 0xFF);
 8002600:	22ff      	movs	r2, #255	@ 0xff
 8002602:	2100      	movs	r1, #0
 8002604:	203a      	movs	r0, #58	@ 0x3a
 8002606:	f7ff ff12 	bl	800242e <SD_SendCommand>
 800260a:	4603      	mov	r3, r0
 800260c:	73bb      	strb	r3, [r7, #14]
        uint8_t ocr[4];
        for (i = 0; i < 4; i++) ocr[i] = SD_ReceiveByte();
 800260e:	2300      	movs	r3, #0
 8002610:	73fb      	strb	r3, [r7, #15]
 8002612:	e00c      	b.n	800262e <SD_SPI_Init+0x166>
 8002614:	7bfc      	ldrb	r4, [r7, #15]
 8002616:	f7ff fea5 	bl	8002364 <SD_ReceiveByte>
 800261a:	4603      	mov	r3, r0
 800261c:	461a      	mov	r2, r3
 800261e:	f104 0310 	add.w	r3, r4, #16
 8002622:	443b      	add	r3, r7
 8002624:	f803 2c10 	strb.w	r2, [r3, #-16]
 8002628:	7bfb      	ldrb	r3, [r7, #15]
 800262a:	3301      	adds	r3, #1
 800262c:	73fb      	strb	r3, [r7, #15]
 800262e:	7bfb      	ldrb	r3, [r7, #15]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d9ef      	bls.n	8002614 <SD_SPI_Init+0x14c>
        SD_CS_HIGH();
 8002634:	2201      	movs	r2, #1
 8002636:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800263a:	481f      	ldr	r0, [pc, #124]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 800263c:	f001 fb86 	bl	8003d4c <HAL_GPIO_WritePin>
        if (ocr[0] & 0x40) sdhc = 1;
 8002640:	783b      	ldrb	r3, [r7, #0]
 8002642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002646:	2b00      	cmp	r3, #0
 8002648:	d02c      	beq.n	80026a4 <SD_SPI_Init+0x1dc>
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <SD_SPI_Init+0x1f4>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 8002650:	e028      	b.n	80026a4 <SD_SPI_Init+0x1dc>
    } else {
        do {
            SD_CS_LOW();
 8002652:	2200      	movs	r2, #0
 8002654:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002658:	4817      	ldr	r0, [pc, #92]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 800265a:	f001 fb77 	bl	8003d4c <HAL_GPIO_WritePin>
            SD_SendCommand(CMD55, 0, 0xFF);
 800265e:	22ff      	movs	r2, #255	@ 0xff
 8002660:	2100      	movs	r1, #0
 8002662:	2037      	movs	r0, #55	@ 0x37
 8002664:	f7ff fee3 	bl	800242e <SD_SendCommand>
            response = SD_SendCommand(ACMD41, 0, 0xFF);
 8002668:	22ff      	movs	r2, #255	@ 0xff
 800266a:	2100      	movs	r1, #0
 800266c:	2029      	movs	r0, #41	@ 0x29
 800266e:	f7ff fede 	bl	800242e <SD_SendCommand>
 8002672:	4603      	mov	r3, r0
 8002674:	73bb      	strb	r3, [r7, #14]
            SD_CS_HIGH();
 8002676:	2201      	movs	r2, #1
 8002678:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800267c:	480e      	ldr	r0, [pc, #56]	@ (80026b8 <SD_SPI_Init+0x1f0>)
 800267e:	f001 fb65 	bl	8003d4c <HAL_GPIO_WritePin>
            SD_TransmitByte(0xFF);
 8002682:	20ff      	movs	r0, #255	@ 0xff
 8002684:	f7ff fe5c 	bl	8002340 <SD_TransmitByte>
        } while (response != 0x00 && HAL_GetTick() < retry);
 8002688:	7bbb      	ldrb	r3, [r7, #14]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d005      	beq.n	800269a <SD_SPI_Init+0x1d2>
 800268e:	f001 f8c7 	bl	8003820 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4293      	cmp	r3, r2
 8002698:	d8db      	bhi.n	8002652 <SD_SPI_Init+0x18a>
        if (response != 0x00) return SD_ERROR;
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <SD_SPI_Init+0x1de>
 80026a0:	2301      	movs	r3, #1
 80026a2:	e004      	b.n	80026ae <SD_SPI_Init+0x1e6>
    if (response == 0x01 && r7[2] == 0x01 && r7[3] == 0xAA) {
 80026a4:	bf00      	nop
    }

    card_initialized = 1;
 80026a6:	4b06      	ldr	r3, [pc, #24]	@ (80026c0 <SD_SPI_Init+0x1f8>)
 80026a8:	2201      	movs	r2, #1
 80026aa:	701a      	strb	r2, [r3, #0]
    return SD_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd90      	pop	{r4, r7, pc}
 80026b6:	bf00      	nop
 80026b8:	40020400 	.word	0x40020400
 80026bc:	20000984 	.word	0x20000984
 80026c0:	20000985 	.word	0x20000985

080026c4 <SD_ReadBlocks>:

SD_Status SD_ReadBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <SD_ReadBlocks+0x16>
 80026d6:	2301      	movs	r3, #1
 80026d8:	e058      	b.n	800278c <SD_ReadBlocks+0xc8>
    if (!sdhc) sector *= 512;
 80026da:	4b2e      	ldr	r3, [pc, #184]	@ (8002794 <SD_ReadBlocks+0xd0>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <SD_ReadBlocks+0x24>
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	025b      	lsls	r3, r3, #9
 80026e6:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d148      	bne.n	8002780 <SD_ReadBlocks+0xbc>
        SD_CS_LOW();
 80026ee:	2200      	movs	r2, #0
 80026f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80026f4:	4828      	ldr	r0, [pc, #160]	@ (8002798 <SD_ReadBlocks+0xd4>)
 80026f6:	f001 fb29 	bl	8003d4c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD17, sector, 0xFF) != 0x00) {
 80026fa:	22ff      	movs	r2, #255	@ 0xff
 80026fc:	68b9      	ldr	r1, [r7, #8]
 80026fe:	2011      	movs	r0, #17
 8002700:	f7ff fe95 	bl	800242e <SD_SendCommand>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <SD_ReadBlocks+0x56>
            SD_CS_HIGH();
 800270a:	2201      	movs	r2, #1
 800270c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002710:	4821      	ldr	r0, [pc, #132]	@ (8002798 <SD_ReadBlocks+0xd4>)
 8002712:	f001 fb1b 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e038      	b.n	800278c <SD_ReadBlocks+0xc8>
        }

        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 800271a:	f001 f881 	bl	8003820 <HAL_GetTick>
 800271e:	4603      	mov	r3, r0
 8002720:	33c8      	adds	r3, #200	@ 0xc8
 8002722:	617b      	str	r3, [r7, #20]
        do {
            token = SD_ReceiveByte();
 8002724:	f7ff fe1e 	bl	8002364 <SD_ReceiveByte>
 8002728:	4603      	mov	r3, r0
 800272a:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2bfe      	cmp	r3, #254	@ 0xfe
 8002730:	d006      	beq.n	8002740 <SD_ReadBlocks+0x7c>
        } while (HAL_GetTick() < timeout);
 8002732:	f001 f875 	bl	8003820 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	4293      	cmp	r3, r2
 800273c:	d8f2      	bhi.n	8002724 <SD_ReadBlocks+0x60>
 800273e:	e000      	b.n	8002742 <SD_ReadBlocks+0x7e>
            if (token == 0xFE) break;
 8002740:	bf00      	nop
        if (token != 0xFE) {
 8002742:	7cfb      	ldrb	r3, [r7, #19]
 8002744:	2bfe      	cmp	r3, #254	@ 0xfe
 8002746:	d007      	beq.n	8002758 <SD_ReadBlocks+0x94>
            SD_CS_HIGH();
 8002748:	2201      	movs	r2, #1
 800274a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800274e:	4812      	ldr	r0, [pc, #72]	@ (8002798 <SD_ReadBlocks+0xd4>)
 8002750:	f001 fafc 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e019      	b.n	800278c <SD_ReadBlocks+0xc8>
        }

        SD_ReceiveBuffer(buff, 512);
 8002758:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fe2d 	bl	80023bc <SD_ReceiveBuffer>
        SD_ReceiveByte();  // CRC
 8002762:	f7ff fdff 	bl	8002364 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002766:	f7ff fdfd 	bl	8002364 <SD_ReceiveByte>
        SD_CS_HIGH();
 800276a:	2201      	movs	r2, #1
 800276c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002770:	4809      	ldr	r0, [pc, #36]	@ (8002798 <SD_ReadBlocks+0xd4>)
 8002772:	f001 faeb 	bl	8003d4c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002776:	20ff      	movs	r0, #255	@ 0xff
 8002778:	f7ff fde2 	bl	8002340 <SD_TransmitByte>
        return SD_OK;
 800277c:	2300      	movs	r3, #0
 800277e:	e005      	b.n	800278c <SD_ReadBlocks+0xc8>
    } else {
        return SD_ReadMultiBlocks(buff, sector, count);
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	68f8      	ldr	r0, [r7, #12]
 8002786:	f000 f809 	bl	800279c <SD_ReadMultiBlocks>
 800278a:	4603      	mov	r3, r0
    }
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000984 	.word	0x20000984
 8002798:	40020400 	.word	0x40020400

0800279c <SD_ReadMultiBlocks>:

SD_Status SD_ReadMultiBlocks(uint8_t *buff, uint32_t sector, uint32_t count) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <SD_ReadMultiBlocks+0x16>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e05c      	b.n	800286c <SD_ReadMultiBlocks+0xd0>
    if (!sdhc) sector *= 512;
 80027b2:	4b30      	ldr	r3, [pc, #192]	@ (8002874 <SD_ReadMultiBlocks+0xd8>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <SD_ReadMultiBlocks+0x24>
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	025b      	lsls	r3, r3, #9
 80027be:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027c6:	482c      	ldr	r0, [pc, #176]	@ (8002878 <SD_ReadMultiBlocks+0xdc>)
 80027c8:	f001 fac0 	bl	8003d4c <HAL_GPIO_WritePin>
    if (SD_SendCommand(18, sector, 0xFF) != 0x00) {
 80027cc:	22ff      	movs	r2, #255	@ 0xff
 80027ce:	68b9      	ldr	r1, [r7, #8]
 80027d0:	2012      	movs	r0, #18
 80027d2:	f7ff fe2c 	bl	800242e <SD_SendCommand>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d033      	beq.n	8002844 <SD_ReadMultiBlocks+0xa8>
        SD_CS_HIGH();
 80027dc:	2201      	movs	r2, #1
 80027de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027e2:	4825      	ldr	r0, [pc, #148]	@ (8002878 <SD_ReadMultiBlocks+0xdc>)
 80027e4:	f001 fab2 	bl	8003d4c <HAL_GPIO_WritePin>
        return SD_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e03f      	b.n	800286c <SD_ReadMultiBlocks+0xd0>
    }

    while (count--) {
        uint8_t token;
        uint32_t timeout = HAL_GetTick() + 200;
 80027ec:	f001 f818 	bl	8003820 <HAL_GetTick>
 80027f0:	4603      	mov	r3, r0
 80027f2:	33c8      	adds	r3, #200	@ 0xc8
 80027f4:	617b      	str	r3, [r7, #20]

        do {
            token = SD_ReceiveByte();
 80027f6:	f7ff fdb5 	bl	8002364 <SD_ReceiveByte>
 80027fa:	4603      	mov	r3, r0
 80027fc:	74fb      	strb	r3, [r7, #19]
            if (token == 0xFE) break;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2bfe      	cmp	r3, #254	@ 0xfe
 8002802:	d006      	beq.n	8002812 <SD_ReadMultiBlocks+0x76>
        } while (HAL_GetTick() < timeout);
 8002804:	f001 f80c 	bl	8003820 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	4293      	cmp	r3, r2
 800280e:	d8f2      	bhi.n	80027f6 <SD_ReadMultiBlocks+0x5a>
 8002810:	e000      	b.n	8002814 <SD_ReadMultiBlocks+0x78>
            if (token == 0xFE) break;
 8002812:	bf00      	nop

        if (token != 0xFE) {
 8002814:	7cfb      	ldrb	r3, [r7, #19]
 8002816:	2bfe      	cmp	r3, #254	@ 0xfe
 8002818:	d007      	beq.n	800282a <SD_ReadMultiBlocks+0x8e>
            SD_CS_HIGH();
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002820:	4815      	ldr	r0, [pc, #84]	@ (8002878 <SD_ReadMultiBlocks+0xdc>)
 8002822:	f001 fa93 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e020      	b.n	800286c <SD_ReadMultiBlocks+0xd0>
        }

        SD_ReceiveBuffer(buff, 512);
 800282a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fdc4 	bl	80023bc <SD_ReceiveBuffer>
        SD_ReceiveByte();  // discard CRC
 8002834:	f7ff fd96 	bl	8002364 <SD_ReceiveByte>
        SD_ReceiveByte();
 8002838:	f7ff fd94 	bl	8002364 <SD_ReceiveByte>

        buff += 512;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8002842:	60fb      	str	r3, [r7, #12]
    while (count--) {
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	607a      	str	r2, [r7, #4]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1ce      	bne.n	80027ec <SD_ReadMultiBlocks+0x50>
    }

    SD_SendCommand(12, 0, 0xFF);  // STOP_TRANSMISSION
 800284e:	22ff      	movs	r2, #255	@ 0xff
 8002850:	2100      	movs	r1, #0
 8002852:	200c      	movs	r0, #12
 8002854:	f7ff fdeb 	bl	800242e <SD_SendCommand>
    SD_CS_HIGH();
 8002858:	2201      	movs	r2, #1
 800285a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800285e:	4806      	ldr	r0, [pc, #24]	@ (8002878 <SD_ReadMultiBlocks+0xdc>)
 8002860:	f001 fa74 	bl	8003d4c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF); // Extra 8 clocks
 8002864:	20ff      	movs	r0, #255	@ 0xff
 8002866:	f7ff fd6b 	bl	8002340 <SD_TransmitByte>

    return SD_OK;
 800286a:	2300      	movs	r3, #0
}
 800286c:	4618      	mov	r0, r3
 800286e:	3718      	adds	r7, #24
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000984 	.word	0x20000984
 8002878:	40020400 	.word	0x40020400

0800287c <SD_WriteBlocks>:

SD_Status SD_WriteBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d101      	bne.n	8002892 <SD_WriteBlocks+0x16>
 800288e:	2301      	movs	r3, #1
 8002890:	e055      	b.n	800293e <SD_WriteBlocks+0xc2>
    if (!sdhc) sector *= 512;
 8002892:	4b2d      	ldr	r3, [pc, #180]	@ (8002948 <SD_WriteBlocks+0xcc>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <SD_WriteBlocks+0x24>
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	025b      	lsls	r3, r3, #9
 800289e:	60bb      	str	r3, [r7, #8]

    if (count == 1) {
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d145      	bne.n	8002932 <SD_WriteBlocks+0xb6>
        SD_CS_LOW();
 80028a6:	2200      	movs	r2, #0
 80028a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028ac:	4827      	ldr	r0, [pc, #156]	@ (800294c <SD_WriteBlocks+0xd0>)
 80028ae:	f001 fa4d 	bl	8003d4c <HAL_GPIO_WritePin>
        if (SD_SendCommand(CMD24, sector, 0xFF) != 0x00) {
 80028b2:	22ff      	movs	r2, #255	@ 0xff
 80028b4:	68b9      	ldr	r1, [r7, #8]
 80028b6:	2018      	movs	r0, #24
 80028b8:	f7ff fdb9 	bl	800242e <SD_SendCommand>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d007      	beq.n	80028d2 <SD_WriteBlocks+0x56>
            SD_CS_HIGH();
 80028c2:	2201      	movs	r2, #1
 80028c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80028c8:	4820      	ldr	r0, [pc, #128]	@ (800294c <SD_WriteBlocks+0xd0>)
 80028ca:	f001 fa3f 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e035      	b.n	800293e <SD_WriteBlocks+0xc2>
        }

        SD_TransmitByte(0xFE);
 80028d2:	20fe      	movs	r0, #254	@ 0xfe
 80028d4:	f7ff fd34 	bl	8002340 <SD_TransmitByte>
        SD_TransmitBuffer(buff, 512);
 80028d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80028dc:	68f8      	ldr	r0, [r7, #12]
 80028de:	f7ff fd59 	bl	8002394 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);
 80028e2:	20ff      	movs	r0, #255	@ 0xff
 80028e4:	f7ff fd2c 	bl	8002340 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80028e8:	20ff      	movs	r0, #255	@ 0xff
 80028ea:	f7ff fd29 	bl	8002340 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80028ee:	f7ff fd39 	bl	8002364 <SD_ReceiveByte>
 80028f2:	4603      	mov	r3, r0
 80028f4:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80028f6:	7dfb      	ldrb	r3, [r7, #23]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d007      	beq.n	8002910 <SD_WriteBlocks+0x94>
            SD_CS_HIGH();
 8002900:	2201      	movs	r2, #1
 8002902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002906:	4811      	ldr	r0, [pc, #68]	@ (800294c <SD_WriteBlocks+0xd0>)
 8002908:	f001 fa20 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e016      	b.n	800293e <SD_WriteBlocks+0xc2>
        }

        while (SD_ReceiveByte() == 0);
 8002910:	bf00      	nop
 8002912:	f7ff fd27 	bl	8002364 <SD_ReceiveByte>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0fa      	beq.n	8002912 <SD_WriteBlocks+0x96>
        SD_CS_HIGH();
 800291c:	2201      	movs	r2, #1
 800291e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002922:	480a      	ldr	r0, [pc, #40]	@ (800294c <SD_WriteBlocks+0xd0>)
 8002924:	f001 fa12 	bl	8003d4c <HAL_GPIO_WritePin>
        SD_TransmitByte(0xFF);
 8002928:	20ff      	movs	r0, #255	@ 0xff
 800292a:	f7ff fd09 	bl	8002340 <SD_TransmitByte>

        return SD_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e005      	b.n	800293e <SD_WriteBlocks+0xc2>
    } else {
        return SD_WriteMultiBlocks(buff, sector, count);
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f80a 	bl	8002950 <SD_WriteMultiBlocks>
 800293c:	4603      	mov	r3, r0
    }
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	20000984 	.word	0x20000984
 800294c:	40020400 	.word	0x40020400

08002950 <SD_WriteMultiBlocks>:

SD_Status SD_WriteMultiBlocks(const uint8_t *buff, uint32_t sector, uint32_t count) {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	60f8      	str	r0, [r7, #12]
 8002958:	60b9      	str	r1, [r7, #8]
 800295a:	607a      	str	r2, [r7, #4]
    if (!count) return SD_ERROR;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d101      	bne.n	8002966 <SD_WriteMultiBlocks+0x16>
 8002962:	2301      	movs	r3, #1
 8002964:	e05d      	b.n	8002a22 <SD_WriteMultiBlocks+0xd2>
    if (!sdhc) sector *= 512;
 8002966:	4b31      	ldr	r3, [pc, #196]	@ (8002a2c <SD_WriteMultiBlocks+0xdc>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d102      	bne.n	8002974 <SD_WriteMultiBlocks+0x24>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	025b      	lsls	r3, r3, #9
 8002972:	60bb      	str	r3, [r7, #8]

    SD_CS_LOW();
 8002974:	2200      	movs	r2, #0
 8002976:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800297a:	482d      	ldr	r0, [pc, #180]	@ (8002a30 <SD_WriteMultiBlocks+0xe0>)
 800297c:	f001 f9e6 	bl	8003d4c <HAL_GPIO_WritePin>
    if (SD_SendCommand(25, sector, 0xFF) != 0x00) {
 8002980:	22ff      	movs	r2, #255	@ 0xff
 8002982:	68b9      	ldr	r1, [r7, #8]
 8002984:	2019      	movs	r0, #25
 8002986:	f7ff fd52 	bl	800242e <SD_SendCommand>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d030      	beq.n	80029f2 <SD_WriteMultiBlocks+0xa2>
        SD_CS_HIGH();
 8002990:	2201      	movs	r2, #1
 8002992:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002996:	4826      	ldr	r0, [pc, #152]	@ (8002a30 <SD_WriteMultiBlocks+0xe0>)
 8002998:	f001 f9d8 	bl	8003d4c <HAL_GPIO_WritePin>
        return SD_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e040      	b.n	8002a22 <SD_WriteMultiBlocks+0xd2>
    }

    while (count--) {
        SD_TransmitByte(0xFC);  // Start multi-block write token
 80029a0:	20fc      	movs	r0, #252	@ 0xfc
 80029a2:	f7ff fccd 	bl	8002340 <SD_TransmitByte>

        SD_TransmitBuffer((uint8_t *)buff, 512);
 80029a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80029aa:	68f8      	ldr	r0, [r7, #12]
 80029ac:	f7ff fcf2 	bl	8002394 <SD_TransmitBuffer>
        SD_TransmitByte(0xFF);  // dummy CRC
 80029b0:	20ff      	movs	r0, #255	@ 0xff
 80029b2:	f7ff fcc5 	bl	8002340 <SD_TransmitByte>
        SD_TransmitByte(0xFF);
 80029b6:	20ff      	movs	r0, #255	@ 0xff
 80029b8:	f7ff fcc2 	bl	8002340 <SD_TransmitByte>

        uint8_t resp = SD_ReceiveByte();
 80029bc:	f7ff fcd2 	bl	8002364 <SD_ReceiveByte>
 80029c0:	4603      	mov	r3, r0
 80029c2:	75fb      	strb	r3, [r7, #23]
        if ((resp & 0x1F) != 0x05) {
 80029c4:	7dfb      	ldrb	r3, [r7, #23]
 80029c6:	f003 031f 	and.w	r3, r3, #31
 80029ca:	2b05      	cmp	r3, #5
 80029cc:	d007      	beq.n	80029de <SD_WriteMultiBlocks+0x8e>
            SD_CS_HIGH();
 80029ce:	2201      	movs	r2, #1
 80029d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80029d4:	4816      	ldr	r0, [pc, #88]	@ (8002a30 <SD_WriteMultiBlocks+0xe0>)
 80029d6:	f001 f9b9 	bl	8003d4c <HAL_GPIO_WritePin>
            return SD_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e021      	b.n	8002a22 <SD_WriteMultiBlocks+0xd2>
        }

        while (SD_ReceiveByte() == 0);  // busy wait
 80029de:	bf00      	nop
 80029e0:	f7ff fcc0 	bl	8002364 <SD_ReceiveByte>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d0fa      	beq.n	80029e0 <SD_WriteMultiBlocks+0x90>
        buff += 512;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80029f0:	60fb      	str	r3, [r7, #12]
    while (count--) {
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	1e5a      	subs	r2, r3, #1
 80029f6:	607a      	str	r2, [r7, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1d1      	bne.n	80029a0 <SD_WriteMultiBlocks+0x50>
    }

    SD_TransmitByte(0xFD);  // STOP_TRAN token
 80029fc:	20fd      	movs	r0, #253	@ 0xfd
 80029fe:	f7ff fc9f 	bl	8002340 <SD_TransmitByte>
    while (SD_ReceiveByte() == 0);  // busy wait
 8002a02:	bf00      	nop
 8002a04:	f7ff fcae 	bl	8002364 <SD_ReceiveByte>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0fa      	beq.n	8002a04 <SD_WriteMultiBlocks+0xb4>

    SD_CS_HIGH();
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a14:	4806      	ldr	r0, [pc, #24]	@ (8002a30 <SD_WriteMultiBlocks+0xe0>)
 8002a16:	f001 f999 	bl	8003d4c <HAL_GPIO_WritePin>
    SD_TransmitByte(0xFF);
 8002a1a:	20ff      	movs	r0, #255	@ 0xff
 8002a1c:	f7ff fc90 	bl	8002340 <SD_TransmitByte>

    return SD_OK;
 8002a20:	2300      	movs	r3, #0
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3718      	adds	r7, #24
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000984 	.word	0x20000984
 8002a30:	40020400 	.word	0x40020400

08002a34 <bmp280_read8>:
#include "bmp280.h"

// ====== Внутренние функции ======
static uint8_t bmp280_read8(BMP280_t *dev, uint8_t reg)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b088      	sub	sp, #32
 8002a38:	af04      	add	r7, sp, #16
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	70fb      	strb	r3, [r7, #3]
    uint8_t val;
    HAL_I2C_Mem_Read(dev->hi2c, BMP280_ADDR, reg, 1, &val, 1, HAL_MAX_DELAY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	69d8      	ldr	r0, [r3, #28]
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4c:	9302      	str	r3, [sp, #8]
 8002a4e:	2301      	movs	r3, #1
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	f107 030f 	add.w	r3, r7, #15
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2301      	movs	r3, #1
 8002a5a:	21ec      	movs	r1, #236	@ 0xec
 8002a5c:	f001 fccc 	bl	80043f8 <HAL_I2C_Mem_Read>
    return val;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <bmp280_read16>:

static uint16_t bmp280_read16(BMP280_t *dev, uint8_t reg)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b088      	sub	sp, #32
 8002a6e:	af04      	add	r7, sp, #16
 8002a70:	6078      	str	r0, [r7, #4]
 8002a72:	460b      	mov	r3, r1
 8002a74:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[2];
    HAL_I2C_Mem_Read(dev->hi2c, BMP280_ADDR, reg, 1, buf, 2, HAL_MAX_DELAY);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	69d8      	ldr	r0, [r3, #28]
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a82:	9302      	str	r3, [sp, #8]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9301      	str	r3, [sp, #4]
 8002a88:	f107 030c 	add.w	r3, r7, #12
 8002a8c:	9300      	str	r3, [sp, #0]
 8002a8e:	2301      	movs	r3, #1
 8002a90:	21ec      	movs	r1, #236	@ 0xec
 8002a92:	f001 fcb1 	bl	80043f8 <HAL_I2C_Mem_Read>
    return (buf[1] << 8) | buf[0];
 8002a96:	7b7b      	ldrb	r3, [r7, #13]
 8002a98:	b21b      	sxth	r3, r3
 8002a9a:	021b      	lsls	r3, r3, #8
 8002a9c:	b21a      	sxth	r2, r3
 8002a9e:	7b3b      	ldrb	r3, [r7, #12]
 8002aa0:	b21b      	sxth	r3, r3
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	b21b      	sxth	r3, r3
 8002aa6:	b29b      	uxth	r3, r3
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <bmp280_readS16>:

static int16_t bmp280_readS16(BMP280_t *dev, uint8_t reg)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	70fb      	strb	r3, [r7, #3]
    return (int16_t)bmp280_read16(dev, reg);
 8002abc:	78fb      	ldrb	r3, [r7, #3]
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ffd2 	bl	8002a6a <bmp280_read16>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	b21b      	sxth	r3, r3
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <BMP280_Init>:

// ====== API ======
void BMP280_Init(BMP280_t *dev, I2C_HandleTypeDef *hi2c)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b088      	sub	sp, #32
 8002ad6:	af04      	add	r7, sp, #16
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
    dev->hi2c = hi2c;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	61da      	str	r2, [r3, #28]

    // Нормальный режим, oversampling x1
    uint8_t ctrl_meas = 0x27;
 8002ae2:	2327      	movs	r3, #39	@ 0x27
 8002ae4:	73fb      	strb	r3, [r7, #15]
    uint8_t config = 0x00;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73bb      	strb	r3, [r7, #14]
    HAL_I2C_Mem_Write(dev->hi2c, BMP280_ADDR, 0xF4, 1, &ctrl_meas, 1, HAL_MAX_DELAY);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69d8      	ldr	r0, [r3, #28]
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295
 8002af2:	9302      	str	r3, [sp, #8]
 8002af4:	2301      	movs	r3, #1
 8002af6:	9301      	str	r3, [sp, #4]
 8002af8:	f107 030f 	add.w	r3, r7, #15
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	2301      	movs	r3, #1
 8002b00:	22f4      	movs	r2, #244	@ 0xf4
 8002b02:	21ec      	movs	r1, #236	@ 0xec
 8002b04:	f001 fb7e 	bl	8004204 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(dev->hi2c, BMP280_ADDR, 0xF5, 1, &config, 1, HAL_MAX_DELAY);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69d8      	ldr	r0, [r3, #28]
 8002b0c:	f04f 33ff 	mov.w	r3, #4294967295
 8002b10:	9302      	str	r3, [sp, #8]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	f107 030e 	add.w	r3, r7, #14
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	22f5      	movs	r2, #245	@ 0xf5
 8002b20:	21ec      	movs	r1, #236	@ 0xec
 8002b22:	f001 fb6f 	bl	8004204 <HAL_I2C_Mem_Write>

    BMP280_ReadCalibrationData(dev);
 8002b26:	6878      	ldr	r0, [r7, #4]
 8002b28:	f000 f804 	bl	8002b34 <BMP280_ReadCalibrationData>
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <BMP280_ReadCalibrationData>:

void BMP280_ReadCalibrationData(BMP280_t *dev)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
    dev->dig_T1 = bmp280_read16(dev, 0x88);
 8002b3c:	2188      	movs	r1, #136	@ 0x88
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7ff ff93 	bl	8002a6a <bmp280_read16>
 8002b44:	4603      	mov	r3, r0
 8002b46:	461a      	mov	r2, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	801a      	strh	r2, [r3, #0]
    dev->dig_T2 = bmp280_readS16(dev, 0x8A);
 8002b4c:	218a      	movs	r1, #138	@ 0x8a
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff ffae 	bl	8002ab0 <bmp280_readS16>
 8002b54:	4603      	mov	r3, r0
 8002b56:	461a      	mov	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	805a      	strh	r2, [r3, #2]
    dev->dig_T3 = bmp280_readS16(dev, 0x8C);
 8002b5c:	218c      	movs	r1, #140	@ 0x8c
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa6 	bl	8002ab0 <bmp280_readS16>
 8002b64:	4603      	mov	r3, r0
 8002b66:	461a      	mov	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	809a      	strh	r2, [r3, #4]
    dev->dig_P1 = bmp280_read16(dev, 0x8E);
 8002b6c:	218e      	movs	r1, #142	@ 0x8e
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff7b 	bl	8002a6a <bmp280_read16>
 8002b74:	4603      	mov	r3, r0
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	80da      	strh	r2, [r3, #6]
    dev->dig_P2 = bmp280_readS16(dev, 0x90);
 8002b7c:	2190      	movs	r1, #144	@ 0x90
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ff96 	bl	8002ab0 <bmp280_readS16>
 8002b84:	4603      	mov	r3, r0
 8002b86:	461a      	mov	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	811a      	strh	r2, [r3, #8]
    dev->dig_P3 = bmp280_readS16(dev, 0x92);
 8002b8c:	2192      	movs	r1, #146	@ 0x92
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7ff ff8e 	bl	8002ab0 <bmp280_readS16>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	815a      	strh	r2, [r3, #10]
    dev->dig_P4 = bmp280_readS16(dev, 0x94);
 8002b9c:	2194      	movs	r1, #148	@ 0x94
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff86 	bl	8002ab0 <bmp280_readS16>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	819a      	strh	r2, [r3, #12]
    dev->dig_P5 = bmp280_readS16(dev, 0x96);
 8002bac:	2196      	movs	r1, #150	@ 0x96
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ff7e 	bl	8002ab0 <bmp280_readS16>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	81da      	strh	r2, [r3, #14]
    dev->dig_P6 = bmp280_readS16(dev, 0x98);
 8002bbc:	2198      	movs	r1, #152	@ 0x98
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ff76 	bl	8002ab0 <bmp280_readS16>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	821a      	strh	r2, [r3, #16]
    dev->dig_P7 = bmp280_readS16(dev, 0x9A);
 8002bcc:	219a      	movs	r1, #154	@ 0x9a
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7ff ff6e 	bl	8002ab0 <bmp280_readS16>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	825a      	strh	r2, [r3, #18]
    dev->dig_P8 = bmp280_readS16(dev, 0x9C);
 8002bdc:	219c      	movs	r1, #156	@ 0x9c
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff ff66 	bl	8002ab0 <bmp280_readS16>
 8002be4:	4603      	mov	r3, r0
 8002be6:	461a      	mov	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	829a      	strh	r2, [r3, #20]
    dev->dig_P9 = bmp280_readS16(dev, 0x9E);
 8002bec:	219e      	movs	r1, #158	@ 0x9e
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f7ff ff5e 	bl	8002ab0 <bmp280_readS16>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	82da      	strh	r2, [r3, #22]
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(BMP280_t *dev)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b087      	sub	sp, #28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
    int32_t adc_T = ((uint32_t)bmp280_read8(dev, 0xFA) << 12) |
 8002c0c:	21fa      	movs	r1, #250	@ 0xfa
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff ff10 	bl	8002a34 <bmp280_read8>
 8002c14:	4603      	mov	r3, r0
 8002c16:	031c      	lsls	r4, r3, #12
                    ((uint32_t)bmp280_read8(dev, 0xFB) << 4) |
 8002c18:	21fb      	movs	r1, #251	@ 0xfb
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff ff0a 	bl	8002a34 <bmp280_read8>
 8002c20:	4603      	mov	r3, r0
 8002c22:	011b      	lsls	r3, r3, #4
    int32_t adc_T = ((uint32_t)bmp280_read8(dev, 0xFA) << 12) |
 8002c24:	431c      	orrs	r4, r3
                    ((bmp280_read8(dev, 0xFC) >> 4) & 0x0F);
 8002c26:	21fc      	movs	r1, #252	@ 0xfc
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff ff03 	bl	8002a34 <bmp280_read8>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	091b      	lsrs	r3, r3, #4
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	f003 030f 	and.w	r3, r3, #15
                    ((uint32_t)bmp280_read8(dev, 0xFB) << 4) |
 8002c38:	4323      	orrs	r3, r4
    int32_t adc_T = ((uint32_t)bmp280_read8(dev, 0xFA) << 12) |
 8002c3a:	617b      	str	r3, [r7, #20]

    int32_t var1, var2;
    var1 = ((((adc_T>>3) - ((int32_t)dev->dig_T1<<1))) * ((int32_t)dev->dig_T2)) >> 11;
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	10da      	asrs	r2, r3, #3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8002c4e:	fb02 f303 	mul.w	r3, r2, r3
 8002c52:	12db      	asrs	r3, r3, #11
 8002c54:	613b      	str	r3, [r7, #16]
    var2 = (((((adc_T>>4) - ((int32_t)dev->dig_T1)) * ((adc_T>>4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	111b      	asrs	r3, r3, #4
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	8812      	ldrh	r2, [r2, #0]
 8002c5e:	1a9b      	subs	r3, r3, r2
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	1112      	asrs	r2, r2, #4
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	8809      	ldrh	r1, [r1, #0]
 8002c68:	1a52      	subs	r2, r2, r1
 8002c6a:	fb02 f303 	mul.w	r3, r2, r3
 8002c6e:	131b      	asrs	r3, r3, #12
 8002c70:	687a      	ldr	r2, [r7, #4]
 8002c72:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8002c76:	fb02 f303 	mul.w	r3, r2, r3
 8002c7a:	139b      	asrs	r3, r3, #14
 8002c7c:	60fb      	str	r3, [r7, #12]

    dev->t_fine = var1 + var2;
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	441a      	add	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	619a      	str	r2, [r3, #24]
    float T  = (dev->t_fine * 5 + 128) >> 8;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699a      	ldr	r2, [r3, #24]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	3380      	adds	r3, #128	@ 0x80
 8002c94:	121b      	asrs	r3, r3, #8
 8002c96:	ee07 3a90 	vmov	s15, r3
 8002c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c9e:	edc7 7a02 	vstr	s15, [r7, #8]
    return T / 100.0f;
 8002ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca6:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002cbc <BMP280_ReadTemperature+0xb8>
 8002caa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002cae:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cb2:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd90      	pop	{r4, r7, pc}
 8002cbc:	42c80000 	.word	0x42c80000

08002cc0 <BMP280_ReadPressure>:

float BMP280_ReadPressure(BMP280_t *dev)
{
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	b0cd      	sub	sp, #308	@ 0x134
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
    int32_t adc_P = ((uint32_t)bmp280_read8(dev, 0xF7) << 12) |
 8002ccc:	21f7      	movs	r1, #247	@ 0xf7
 8002cce:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002cd2:	f7ff feaf 	bl	8002a34 <bmp280_read8>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	031e      	lsls	r6, r3, #12
                    ((uint32_t)bmp280_read8(dev, 0xF8) << 4) |
 8002cda:	21f8      	movs	r1, #248	@ 0xf8
 8002cdc:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002ce0:	f7ff fea8 	bl	8002a34 <bmp280_read8>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	011b      	lsls	r3, r3, #4
    int32_t adc_P = ((uint32_t)bmp280_read8(dev, 0xF7) << 12) |
 8002ce8:	431e      	orrs	r6, r3
                    ((bmp280_read8(dev, 0xF9) >> 4) & 0x0F);
 8002cea:	21f9      	movs	r1, #249	@ 0xf9
 8002cec:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8002cf0:	f7ff fea0 	bl	8002a34 <bmp280_read8>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	091b      	lsrs	r3, r3, #4
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f003 030f 	and.w	r3, r3, #15
                    ((uint32_t)bmp280_read8(dev, 0xF8) << 4) |
 8002cfe:	4333      	orrs	r3, r6
    int32_t adc_P = ((uint32_t)bmp280_read8(dev, 0xF7) << 12) |
 8002d00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    int64_t var1, var2, p;
    var1 = ((int64_t)dev->t_fine) - 128000;
 8002d04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	17da      	asrs	r2, r3, #31
 8002d0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d10:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002d14:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d18:	460b      	mov	r3, r1
 8002d1a:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8002d1e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d20:	4613      	mov	r3, r2
 8002d22:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d2c:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (int64_t)dev->dig_P6;
 8002d30:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002d34:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d38:	fb03 f102 	mul.w	r1, r3, r2
 8002d3c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002d40:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d44:	fb02 f303 	mul.w	r3, r2, r3
 8002d48:	18ca      	adds	r2, r1, r3
 8002d4a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d4e:	fba3 4503 	umull	r4, r5, r3, r3
 8002d52:	1953      	adds	r3, r2, r5
 8002d54:	461d      	mov	r5, r3
 8002d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d5a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002d5e:	b21b      	sxth	r3, r3
 8002d60:	17da      	asrs	r2, r3, #31
 8002d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d66:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d6a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	fb03 f205 	mul.w	r2, r3, r5
 8002d74:	460b      	mov	r3, r1
 8002d76:	fb04 f303 	mul.w	r3, r4, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	fba4 8902 	umull	r8, r9, r4, r2
 8002d82:	444b      	add	r3, r9
 8002d84:	4699      	mov	r9, r3
 8002d86:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
 8002d8a:	e9c7 8946 	strd	r8, r9, [r7, #280]	@ 0x118
    var2 = var2 + ((var1*(int64_t)dev->dig_P5)<<17);
 8002d8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002d92:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002d96:	b21b      	sxth	r3, r3
 8002d98:	17da      	asrs	r2, r3, #31
 8002d9a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002d9e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002da6:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 8002daa:	462a      	mov	r2, r5
 8002dac:	fb02 f203 	mul.w	r2, r2, r3
 8002db0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002db4:	4621      	mov	r1, r4
 8002db6:	fb01 f303 	mul.w	r3, r1, r3
 8002dba:	441a      	add	r2, r3
 8002dbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002dc0:	4621      	mov	r1, r4
 8002dc2:	fba3 ab01 	umull	sl, fp, r3, r1
 8002dc6:	eb02 030b 	add.w	r3, r2, fp
 8002dca:	469b      	mov	fp, r3
 8002dcc:	f04f 0000 	mov.w	r0, #0
 8002dd0:	f04f 0100 	mov.w	r1, #0
 8002dd4:	ea4f 414b 	mov.w	r1, fp, lsl #17
 8002dd8:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8002ddc:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8002de0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002de4:	1814      	adds	r4, r2, r0
 8002de6:	643c      	str	r4, [r7, #64]	@ 0x40
 8002de8:	414b      	adcs	r3, r1
 8002dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dec:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002df0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)dev->dig_P4)<<35);
 8002df4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002df8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002dfc:	b21b      	sxth	r3, r3
 8002dfe:	17da      	asrs	r2, r3, #31
 8002e00:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002e04:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002e08:	f04f 0000 	mov.w	r0, #0
 8002e0c:	f04f 0100 	mov.w	r1, #0
 8002e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e14:	00d9      	lsls	r1, r3, #3
 8002e16:	2000      	movs	r0, #0
 8002e18:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002e1c:	1814      	adds	r4, r2, r0
 8002e1e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002e20:	414b      	adcs	r3, r1
 8002e22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e24:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002e28:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)dev->dig_P3)>>8) + ((var1 * (int64_t)dev->dig_P2)<<12);
 8002e2c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002e30:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e34:	fb03 f102 	mul.w	r1, r3, r2
 8002e38:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002e3c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	18ca      	adds	r2, r1, r3
 8002e46:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e4a:	fba3 1303 	umull	r1, r3, r3, r3
 8002e4e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e52:	460b      	mov	r3, r1
 8002e54:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002e58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002e5c:	18d3      	adds	r3, r2, r3
 8002e5e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002e66:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002e6a:	b21b      	sxth	r3, r3
 8002e6c:	17da      	asrs	r2, r3, #31
 8002e6e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e72:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e76:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8002e7a:	462b      	mov	r3, r5
 8002e7c:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 8002e80:	4642      	mov	r2, r8
 8002e82:	fb02 f203 	mul.w	r2, r2, r3
 8002e86:	464b      	mov	r3, r9
 8002e88:	4621      	mov	r1, r4
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	4622      	mov	r2, r4
 8002e92:	4641      	mov	r1, r8
 8002e94:	fba2 1201 	umull	r1, r2, r2, r1
 8002e98:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8002e9c:	460a      	mov	r2, r1
 8002e9e:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8002ea2:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 8002ea6:	4413      	add	r3, r2
 8002ea8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002eac:	f04f 0000 	mov.w	r0, #0
 8002eb0:	f04f 0100 	mov.w	r1, #0
 8002eb4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8002eb8:	4623      	mov	r3, r4
 8002eba:	0a18      	lsrs	r0, r3, #8
 8002ebc:	462b      	mov	r3, r5
 8002ebe:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002ec2:	462b      	mov	r3, r5
 8002ec4:	1219      	asrs	r1, r3, #8
 8002ec6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002eca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002ece:	b21b      	sxth	r3, r3
 8002ed0:	17da      	asrs	r2, r3, #31
 8002ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002eda:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ede:	e9d7 5628 	ldrd	r5, r6, [r7, #160]	@ 0xa0
 8002ee2:	4632      	mov	r2, r6
 8002ee4:	fb02 f203 	mul.w	r2, r2, r3
 8002ee8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002eec:	462c      	mov	r4, r5
 8002eee:	fb04 f303 	mul.w	r3, r4, r3
 8002ef2:	441a      	add	r2, r3
 8002ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ef8:	462c      	mov	r4, r5
 8002efa:	fba3 4304 	umull	r4, r3, r3, r4
 8002efe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f02:	4623      	mov	r3, r4
 8002f04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f0c:	18d3      	adds	r3, r2, r3
 8002f0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 563c 	ldrd	r5, r6, [r7, #240]	@ 0xf0
 8002f1e:	4634      	mov	r4, r6
 8002f20:	0323      	lsls	r3, r4, #12
 8002f22:	462c      	mov	r4, r5
 8002f24:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002f28:	462c      	mov	r4, r5
 8002f2a:	0322      	lsls	r2, r4, #12
 8002f2c:	1884      	adds	r4, r0, r2
 8002f2e:	633c      	str	r4, [r7, #48]	@ 0x30
 8002f30:	eb41 0303 	adc.w	r3, r1, r3
 8002f34:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f36:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002f3a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dev->dig_P1)>>33;
 8002f3e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002f42:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002f46:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8002f4a:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002f52:	88db      	ldrh	r3, [r3, #6]
 8002f54:	b29b      	uxth	r3, r3
 8002f56:	2200      	movs	r2, #0
 8002f58:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f5c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f60:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 8002f64:	462b      	mov	r3, r5
 8002f66:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002f6a:	4642      	mov	r2, r8
 8002f6c:	fb02 f203 	mul.w	r2, r2, r3
 8002f70:	464b      	mov	r3, r9
 8002f72:	4621      	mov	r1, r4
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	4622      	mov	r2, r4
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	fba2 1201 	umull	r1, r2, r2, r1
 8002f82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002f86:	460a      	mov	r2, r1
 8002f88:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 8002f8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002f90:	4413      	add	r3, r2
 8002f92:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002f96:	f04f 0200 	mov.w	r2, #0
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	104a      	asrs	r2, r1, #1
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	17cb      	asrs	r3, r1, #31
 8002faa:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    if (var1 == 0) return 0;
 8002fae:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	d102      	bne.n	8002fbc <BMP280_ReadPressure+0x2fc>
 8002fb6:	eddf 7aae 	vldr	s15, [pc, #696]	@ 8003270 <BMP280_ReadPressure+0x5b0>
 8002fba:	e152      	b.n	8003262 <BMP280_ReadPressure+0x5a2>
    p = 1048576 - adc_P;
 8002fbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002fc0:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8002fc4:	17da      	asrs	r2, r3, #31
 8002fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fc8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fca:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002fce:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p<<31) - var2)*3125)/var1;
 8002fd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fd6:	105b      	asrs	r3, r3, #1
 8002fd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8002fdc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002fe0:	07db      	lsls	r3, r3, #31
 8002fe2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fe6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002fea:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002fee:	4621      	mov	r1, r4
 8002ff0:	1a89      	subs	r1, r1, r2
 8002ff2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	eb61 0303 	sbc.w	r3, r1, r3
 8002ffc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003000:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8003004:	4622      	mov	r2, r4
 8003006:	462b      	mov	r3, r5
 8003008:	1891      	adds	r1, r2, r2
 800300a:	6239      	str	r1, [r7, #32]
 800300c:	415b      	adcs	r3, r3
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003010:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003014:	4621      	mov	r1, r4
 8003016:	1851      	adds	r1, r2, r1
 8003018:	61b9      	str	r1, [r7, #24]
 800301a:	4629      	mov	r1, r5
 800301c:	414b      	adcs	r3, r1
 800301e:	61fb      	str	r3, [r7, #28]
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800302c:	4649      	mov	r1, r9
 800302e:	018b      	lsls	r3, r1, #6
 8003030:	4641      	mov	r1, r8
 8003032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003036:	4641      	mov	r1, r8
 8003038:	018a      	lsls	r2, r1, #6
 800303a:	4641      	mov	r1, r8
 800303c:	1889      	adds	r1, r1, r2
 800303e:	6139      	str	r1, [r7, #16]
 8003040:	4649      	mov	r1, r9
 8003042:	eb43 0101 	adc.w	r1, r3, r1
 8003046:	6179      	str	r1, [r7, #20]
 8003048:	f04f 0200 	mov.w	r2, #0
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003054:	4649      	mov	r1, r9
 8003056:	008b      	lsls	r3, r1, #2
 8003058:	4641      	mov	r1, r8
 800305a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800305e:	4641      	mov	r1, r8
 8003060:	008a      	lsls	r2, r1, #2
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	4603      	mov	r3, r0
 8003068:	4622      	mov	r2, r4
 800306a:	189b      	adds	r3, r3, r2
 800306c:	60bb      	str	r3, [r7, #8]
 800306e:	460b      	mov	r3, r1
 8003070:	462a      	mov	r2, r5
 8003072:	eb42 0303 	adc.w	r3, r2, r3
 8003076:	60fb      	str	r3, [r7, #12]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8003084:	4649      	mov	r1, r9
 8003086:	008b      	lsls	r3, r1, #2
 8003088:	4641      	mov	r1, r8
 800308a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800308e:	4641      	mov	r1, r8
 8003090:	008a      	lsls	r2, r1, #2
 8003092:	4610      	mov	r0, r2
 8003094:	4619      	mov	r1, r3
 8003096:	4603      	mov	r3, r0
 8003098:	4622      	mov	r2, r4
 800309a:	189b      	adds	r3, r3, r2
 800309c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800309e:	462b      	mov	r3, r5
 80030a0:	460a      	mov	r2, r1
 80030a2:	eb42 0303 	adc.w	r3, r2, r3
 80030a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80030a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80030ac:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80030b0:	f7fd fe90 	bl	8000dd4 <__aeabi_ldivmod>
 80030b4:	4602      	mov	r2, r0
 80030b6:	460b      	mov	r3, r1
 80030b8:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)dev->dig_P9) * (p>>13) * (p>>13)) >> 25;
 80030bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80030c0:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	17da      	asrs	r2, r3, #31
 80030c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80030ca:	677a      	str	r2, [r7, #116]	@ 0x74
 80030cc:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80030d0:	f04f 0000 	mov.w	r0, #0
 80030d4:	f04f 0100 	mov.w	r1, #0
 80030d8:	0b50      	lsrs	r0, r2, #13
 80030da:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80030de:	1359      	asrs	r1, r3, #13
 80030e0:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80030e4:	462b      	mov	r3, r5
 80030e6:	fb00 f203 	mul.w	r2, r0, r3
 80030ea:	4623      	mov	r3, r4
 80030ec:	fb03 f301 	mul.w	r3, r3, r1
 80030f0:	4413      	add	r3, r2
 80030f2:	4622      	mov	r2, r4
 80030f4:	fba2 1200 	umull	r1, r2, r2, r0
 80030f8:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80030fc:	460a      	mov	r2, r1
 80030fe:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8003102:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003106:	4413      	add	r3, r2
 8003108:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800310c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	0b50      	lsrs	r0, r2, #13
 800311a:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800311e:	1359      	asrs	r1, r3, #13
 8003120:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8003124:	462b      	mov	r3, r5
 8003126:	fb00 f203 	mul.w	r2, r0, r3
 800312a:	4623      	mov	r3, r4
 800312c:	fb03 f301 	mul.w	r3, r3, r1
 8003130:	4413      	add	r3, r2
 8003132:	4622      	mov	r2, r4
 8003134:	fba2 1200 	umull	r1, r2, r2, r0
 8003138:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800313c:	460a      	mov	r2, r1
 800313e:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8003142:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8003146:	4413      	add	r3, r2
 8003148:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800314c:	f04f 0200 	mov.w	r2, #0
 8003150:	f04f 0300 	mov.w	r3, #0
 8003154:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8003158:	4621      	mov	r1, r4
 800315a:	0e4a      	lsrs	r2, r1, #25
 800315c:	4629      	mov	r1, r5
 800315e:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8003162:	4629      	mov	r1, r5
 8003164:	164b      	asrs	r3, r1, #25
 8003166:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)dev->dig_P8) * p) >> 19;
 800316a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800316e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8003172:	b21b      	sxth	r3, r3
 8003174:	17da      	asrs	r2, r3, #31
 8003176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003178:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800317a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800317e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8003182:	462a      	mov	r2, r5
 8003184:	fb02 f203 	mul.w	r2, r2, r3
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800318c:	4621      	mov	r1, r4
 800318e:	fb01 f303 	mul.w	r3, r1, r3
 8003192:	4413      	add	r3, r2
 8003194:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8003198:	4621      	mov	r1, r4
 800319a:	fba2 1201 	umull	r1, r2, r2, r1
 800319e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80031a2:	460a      	mov	r2, r1
 80031a4:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80031a8:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80031ac:	4413      	add	r3, r2
 80031ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	f04f 0300 	mov.w	r3, #0
 80031ba:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80031be:	4621      	mov	r1, r4
 80031c0:	0cca      	lsrs	r2, r1, #19
 80031c2:	4629      	mov	r1, r5
 80031c4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80031c8:	4629      	mov	r1, r5
 80031ca:	14cb      	asrs	r3, r1, #19
 80031cc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = ((p + var1 + var2) >> 8) + (((int64_t)dev->dig_P7)<<4);
 80031d0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 80031d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80031d8:	1884      	adds	r4, r0, r2
 80031da:	663c      	str	r4, [r7, #96]	@ 0x60
 80031dc:	eb41 0303 	adc.w	r3, r1, r3
 80031e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80031e2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80031e6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80031ea:	4621      	mov	r1, r4
 80031ec:	1889      	adds	r1, r1, r2
 80031ee:	65b9      	str	r1, [r7, #88]	@ 0x58
 80031f0:	4629      	mov	r1, r5
 80031f2:	eb43 0101 	adc.w	r1, r3, r1
 80031f6:	65f9      	str	r1, [r7, #92]	@ 0x5c
 80031f8:	f04f 0000 	mov.w	r0, #0
 80031fc:	f04f 0100 	mov.w	r1, #0
 8003200:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8003204:	4623      	mov	r3, r4
 8003206:	0a18      	lsrs	r0, r3, #8
 8003208:	462b      	mov	r3, r5
 800320a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800320e:	462b      	mov	r3, r5
 8003210:	1219      	asrs	r1, r3, #8
 8003212:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003216:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800321a:	b21b      	sxth	r3, r3
 800321c:	17da      	asrs	r2, r3, #31
 800321e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003220:	657a      	str	r2, [r7, #84]	@ 0x54
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 5614 	ldrd	r5, r6, [r7, #80]	@ 0x50
 800322e:	4634      	mov	r4, r6
 8003230:	0123      	lsls	r3, r4, #4
 8003232:	462c      	mov	r4, r5
 8003234:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003238:	462c      	mov	r4, r5
 800323a:	0122      	lsls	r2, r4, #4
 800323c:	1884      	adds	r4, r0, r2
 800323e:	603c      	str	r4, [r7, #0]
 8003240:	eb41 0303 	adc.w	r3, r1, r3
 8003244:	607b      	str	r3, [r7, #4]
 8003246:	e9d7 3400 	ldrd	r3, r4, [r7]
 800324a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (float)p / 25600.0f;
 800324e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003252:	f7fd fd81 	bl	8000d58 <__aeabi_l2f>
 8003256:	ee06 0a90 	vmov	s13, r0
 800325a:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8003274 <BMP280_ReadPressure+0x5b4>
 800325e:	eec6 7a87 	vdiv.f32	s15, s13, s14
}
 8003262:	eeb0 0a67 	vmov.f32	s0, s15
 8003266:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800326a:	46bd      	mov	sp, r7
 800326c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003270:	00000000 	.word	0x00000000
 8003274:	46c80000 	.word	0x46c80000

08003278 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b082      	sub	sp, #8
 800327c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_MspInit+0x54>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	4a11      	ldr	r2, [pc, #68]	@ (80032cc <HAL_MspInit+0x54>)
 8003288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800328c:	6453      	str	r3, [r2, #68]	@ 0x44
 800328e:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <HAL_MspInit+0x54>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	603b      	str	r3, [r7, #0]
 800329e:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_MspInit+0x54>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a2:	4a0a      	ldr	r2, [pc, #40]	@ (80032cc <HAL_MspInit+0x54>)
 80032a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80032aa:	4b08      	ldr	r3, [pc, #32]	@ (80032cc <HAL_MspInit+0x54>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80032b6:	2200      	movs	r2, #0
 80032b8:	210f      	movs	r1, #15
 80032ba:	f06f 0001 	mvn.w	r0, #1
 80032be:	f000 fb97 	bl	80039f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800

080032d0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b08a      	sub	sp, #40	@ 0x28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	605a      	str	r2, [r3, #4]
 80032e2:	609a      	str	r2, [r3, #8]
 80032e4:	60da      	str	r2, [r3, #12]
 80032e6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a19      	ldr	r2, [pc, #100]	@ (8003354 <HAL_I2C_MspInit+0x84>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d12b      	bne.n	800334a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	4b18      	ldr	r3, [pc, #96]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	4a17      	ldr	r2, [pc, #92]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6313      	str	r3, [r2, #48]	@ 0x30
 8003302:	4b15      	ldr	r3, [pc, #84]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800330e:	23c0      	movs	r3, #192	@ 0xc0
 8003310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003312:	2312      	movs	r3, #18
 8003314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800331a:	2303      	movs	r3, #3
 800331c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800331e:	2304      	movs	r3, #4
 8003320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003322:	f107 0314 	add.w	r3, r7, #20
 8003326:	4619      	mov	r1, r3
 8003328:	480c      	ldr	r0, [pc, #48]	@ (800335c <HAL_I2C_MspInit+0x8c>)
 800332a:	f000 fb8b 	bl	8003a44 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b09      	ldr	r3, [pc, #36]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	4a08      	ldr	r2, [pc, #32]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 8003338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800333c:	6413      	str	r3, [r2, #64]	@ 0x40
 800333e:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <HAL_I2C_MspInit+0x88>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800334a:	bf00      	nop
 800334c:	3728      	adds	r7, #40	@ 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	40005400 	.word	0x40005400
 8003358:	40023800 	.word	0x40023800
 800335c:	40020400 	.word	0x40020400

08003360 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b08a      	sub	sp, #40	@ 0x28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003368:	f107 0314 	add.w	r3, r7, #20
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	605a      	str	r2, [r3, #4]
 8003372:	609a      	str	r2, [r3, #8]
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a19      	ldr	r2, [pc, #100]	@ (80033e4 <HAL_SPI_MspInit+0x84>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12c      	bne.n	80033dc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	4b18      	ldr	r3, [pc, #96]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800338a:	4a17      	ldr	r2, [pc, #92]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 800338c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003390:	6413      	str	r3, [r2, #64]	@ 0x40
 8003392:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003396:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800339a:	613b      	str	r3, [r7, #16]
 800339c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
 80033a2:	4b11      	ldr	r3, [pc, #68]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033a6:	4a10      	ldr	r2, [pc, #64]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 80033a8:	f043 0302 	orr.w	r3, r3, #2
 80033ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <HAL_SPI_MspInit+0x88>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80033ba:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80033be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033cc:	2305      	movs	r3, #5
 80033ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033d0:	f107 0314 	add.w	r3, r7, #20
 80033d4:	4619      	mov	r1, r3
 80033d6:	4805      	ldr	r0, [pc, #20]	@ (80033ec <HAL_SPI_MspInit+0x8c>)
 80033d8:	f000 fb34 	bl	8003a44 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80033dc:	bf00      	nop
 80033de:	3728      	adds	r7, #40	@ 0x28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40003800 	.word	0x40003800
 80033e8:	40023800 	.word	0x40023800
 80033ec:	40020400 	.word	0x40020400

080033f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b08a      	sub	sp, #40	@ 0x28
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f8:	f107 0314 	add.w	r3, r7, #20
 80033fc:	2200      	movs	r2, #0
 80033fe:	601a      	str	r2, [r3, #0]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	609a      	str	r2, [r3, #8]
 8003404:	60da      	str	r2, [r3, #12]
 8003406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a19      	ldr	r2, [pc, #100]	@ (8003474 <HAL_UART_MspInit+0x84>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d12b      	bne.n	800346a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
 8003416:	4b18      	ldr	r3, [pc, #96]	@ (8003478 <HAL_UART_MspInit+0x88>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341a:	4a17      	ldr	r2, [pc, #92]	@ (8003478 <HAL_UART_MspInit+0x88>)
 800341c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003420:	6413      	str	r3, [r2, #64]	@ 0x40
 8003422:	4b15      	ldr	r3, [pc, #84]	@ (8003478 <HAL_UART_MspInit+0x88>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b11      	ldr	r3, [pc, #68]	@ (8003478 <HAL_UART_MspInit+0x88>)
 8003434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003436:	4a10      	ldr	r2, [pc, #64]	@ (8003478 <HAL_UART_MspInit+0x88>)
 8003438:	f043 0301 	orr.w	r3, r3, #1
 800343c:	6313      	str	r3, [r2, #48]	@ 0x30
 800343e:	4b0e      	ldr	r3, [pc, #56]	@ (8003478 <HAL_UART_MspInit+0x88>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f003 0301 	and.w	r3, r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800344a:	230c      	movs	r3, #12
 800344c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800344e:	2302      	movs	r3, #2
 8003450:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003456:	2300      	movs	r3, #0
 8003458:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800345a:	2307      	movs	r3, #7
 800345c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800345e:	f107 0314 	add.w	r3, r7, #20
 8003462:	4619      	mov	r1, r3
 8003464:	4805      	ldr	r0, [pc, #20]	@ (800347c <HAL_UART_MspInit+0x8c>)
 8003466:	f000 faed 	bl	8003a44 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800346a:	bf00      	nop
 800346c:	3728      	adds	r7, #40	@ 0x28
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	40004400 	.word	0x40004400
 8003478:	40023800 	.word	0x40023800
 800347c:	40020000 	.word	0x40020000

08003480 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b08c      	sub	sp, #48	@ 0x30
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8003490:	2300      	movs	r3, #0
 8003492:	60bb      	str	r3, [r7, #8]
 8003494:	4b2e      	ldr	r3, [pc, #184]	@ (8003550 <HAL_InitTick+0xd0>)
 8003496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003498:	4a2d      	ldr	r2, [pc, #180]	@ (8003550 <HAL_InitTick+0xd0>)
 800349a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800349e:	6453      	str	r3, [r2, #68]	@ 0x44
 80034a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003550 <HAL_InitTick+0xd0>)
 80034a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034ac:	f107 020c 	add.w	r2, r7, #12
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	4611      	mov	r1, r2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f002 fbcc 	bl	8005c54 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80034bc:	f002 fbb6 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 80034c0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c4:	4a23      	ldr	r2, [pc, #140]	@ (8003554 <HAL_InitTick+0xd4>)
 80034c6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ca:	0c9b      	lsrs	r3, r3, #18
 80034cc:	3b01      	subs	r3, #1
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 80034d0:	4b21      	ldr	r3, [pc, #132]	@ (8003558 <HAL_InitTick+0xd8>)
 80034d2:	4a22      	ldr	r2, [pc, #136]	@ (800355c <HAL_InitTick+0xdc>)
 80034d4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 80034d6:	4b20      	ldr	r3, [pc, #128]	@ (8003558 <HAL_InitTick+0xd8>)
 80034d8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034dc:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 80034de:	4a1e      	ldr	r2, [pc, #120]	@ (8003558 <HAL_InitTick+0xd8>)
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 80034e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003558 <HAL_InitTick+0xd8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003558 <HAL_InitTick+0xd8>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034f0:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_InitTick+0xd8>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 80034f6:	4818      	ldr	r0, [pc, #96]	@ (8003558 <HAL_InitTick+0xd8>)
 80034f8:	f003 f830 	bl	800655c <HAL_TIM_Base_Init>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8003502:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003506:	2b00      	cmp	r3, #0
 8003508:	d11b      	bne.n	8003542 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 800350a:	4813      	ldr	r0, [pc, #76]	@ (8003558 <HAL_InitTick+0xd8>)
 800350c:	f003 f880 	bl	8006610 <HAL_TIM_Base_Start_IT>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003516:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800351a:	2b00      	cmp	r3, #0
 800351c:	d111      	bne.n	8003542 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800351e:	2018      	movs	r0, #24
 8003520:	f000 fa82 	bl	8003a28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2b0f      	cmp	r3, #15
 8003528:	d808      	bhi.n	800353c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 800352a:	2200      	movs	r2, #0
 800352c:	6879      	ldr	r1, [r7, #4]
 800352e:	2018      	movs	r0, #24
 8003530:	f000 fa5e 	bl	80039f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003534:	4a0a      	ldr	r2, [pc, #40]	@ (8003560 <HAL_InitTick+0xe0>)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e002      	b.n	8003542 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003542:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003546:	4618      	mov	r0, r3
 8003548:	3730      	adds	r7, #48	@ 0x30
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40023800 	.word	0x40023800
 8003554:	431bde83 	.word	0x431bde83
 8003558:	20000988 	.word	0x20000988
 800355c:	40014000 	.word	0x40014000
 8003560:	2000000c 	.word	0x2000000c

08003564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003568:	bf00      	nop
 800356a:	e7fd      	b.n	8003568 <NMI_Handler+0x4>

0800356c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003570:	bf00      	nop
 8003572:	e7fd      	b.n	8003570 <HardFault_Handler+0x4>

08003574 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003578:	bf00      	nop
 800357a:	e7fd      	b.n	8003578 <MemManage_Handler+0x4>

0800357c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003580:	bf00      	nop
 8003582:	e7fd      	b.n	8003580 <BusFault_Handler+0x4>

08003584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <UsageFault_Handler+0x4>

0800358c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003590:	bf00      	nop
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80035a2:	f003 f897 	bl	80066d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000988 	.word	0x20000988

080035b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035b0:	b480      	push	{r7}
 80035b2:	af00      	add	r7, sp, #0
  return 1;
 80035b4:	2301      	movs	r3, #1
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <_kill>:

int _kill(int pid, int sig)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035ca:	f00c fb67 	bl	800fc9c <__errno>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2216      	movs	r2, #22
 80035d2:	601a      	str	r2, [r3, #0]
  return -1;
 80035d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3708      	adds	r7, #8
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <_exit>:

void _exit (int status)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b082      	sub	sp, #8
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035e8:	f04f 31ff 	mov.w	r1, #4294967295
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff ffe7 	bl	80035c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80035f2:	bf00      	nop
 80035f4:	e7fd      	b.n	80035f2 <_exit+0x12>

080035f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	60f8      	str	r0, [r7, #12]
 80035fe:	60b9      	str	r1, [r7, #8]
 8003600:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003602:	2300      	movs	r3, #0
 8003604:	617b      	str	r3, [r7, #20]
 8003606:	e00a      	b.n	800361e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003608:	f3af 8000 	nop.w
 800360c:	4601      	mov	r1, r0
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	60ba      	str	r2, [r7, #8]
 8003614:	b2ca      	uxtb	r2, r1
 8003616:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	3301      	adds	r3, #1
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	697a      	ldr	r2, [r7, #20]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	dbf0      	blt.n	8003608 <_read+0x12>
  }

  return len;
 8003626:	687b      	ldr	r3, [r7, #4]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800363c:	2300      	movs	r3, #0
 800363e:	617b      	str	r3, [r7, #20]
 8003640:	e009      	b.n	8003656 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	60ba      	str	r2, [r7, #8]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	3301      	adds	r3, #1
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	429a      	cmp	r2, r3
 800365c:	dbf1      	blt.n	8003642 <_write+0x12>
  }
  return len;
 800365e:	687b      	ldr	r3, [r7, #4]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3718      	adds	r7, #24
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <_close>:

int _close(int file)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003670:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003674:	4618      	mov	r0, r3
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003690:	605a      	str	r2, [r3, #4]
  return 0;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	370c      	adds	r7, #12
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr

080036a0 <_isatty>:

int _isatty(int file)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b083      	sub	sp, #12
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036a8:	2301      	movs	r3, #1
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	370c      	adds	r7, #12
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr

080036b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b085      	sub	sp, #20
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b086      	sub	sp, #24
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036d8:	4a14      	ldr	r2, [pc, #80]	@ (800372c <_sbrk+0x5c>)
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <_sbrk+0x60>)
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036e4:	4b13      	ldr	r3, [pc, #76]	@ (8003734 <_sbrk+0x64>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80036ec:	4b11      	ldr	r3, [pc, #68]	@ (8003734 <_sbrk+0x64>)
 80036ee:	4a12      	ldr	r2, [pc, #72]	@ (8003738 <_sbrk+0x68>)
 80036f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80036f2:	4b10      	ldr	r3, [pc, #64]	@ (8003734 <_sbrk+0x64>)
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4413      	add	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d207      	bcs.n	8003710 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003700:	f00c facc 	bl	800fc9c <__errno>
 8003704:	4603      	mov	r3, r0
 8003706:	220c      	movs	r2, #12
 8003708:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	e009      	b.n	8003724 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003710:	4b08      	ldr	r3, [pc, #32]	@ (8003734 <_sbrk+0x64>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003716:	4b07      	ldr	r3, [pc, #28]	@ (8003734 <_sbrk+0x64>)
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	4a05      	ldr	r2, [pc, #20]	@ (8003734 <_sbrk+0x64>)
 8003720:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003722:	68fb      	ldr	r3, [r7, #12]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20018000 	.word	0x20018000
 8003730:	00000400 	.word	0x00000400
 8003734:	200009d0 	.word	0x200009d0
 8003738:	20005540 	.word	0x20005540

0800373c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003740:	4b06      	ldr	r3, [pc, #24]	@ (800375c <SystemInit+0x20>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	4a05      	ldr	r2, [pc, #20]	@ (800375c <SystemInit+0x20>)
 8003748:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800374c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003750:	bf00      	nop
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003760:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003798 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003764:	f7ff ffea 	bl	800373c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003768:	480c      	ldr	r0, [pc, #48]	@ (800379c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800376a:	490d      	ldr	r1, [pc, #52]	@ (80037a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800376c:	4a0d      	ldr	r2, [pc, #52]	@ (80037a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800376e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003770:	e002      	b.n	8003778 <LoopCopyDataInit>

08003772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003776:	3304      	adds	r3, #4

08003778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800377a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800377c:	d3f9      	bcc.n	8003772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003780:	4c0a      	ldr	r4, [pc, #40]	@ (80037ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003784:	e001      	b.n	800378a <LoopFillZerobss>

08003786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003788:	3204      	adds	r2, #4

0800378a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800378a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800378c:	d3fb      	bcc.n	8003786 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800378e:	f00c fa8b 	bl	800fca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003792:	f7fd fe95 	bl	80014c0 <main>
  bx  lr    
 8003796:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003798:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800379c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037a0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80037a4:	080132d8 	.word	0x080132d8
  ldr r2, =_sbss
 80037a8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80037ac:	20005540 	.word	0x20005540

080037b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037b0:	e7fe      	b.n	80037b0 <ADC_IRQHandler>
	...

080037b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037b8:	4b0e      	ldr	r3, [pc, #56]	@ (80037f4 <HAL_Init+0x40>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a0d      	ldr	r2, [pc, #52]	@ (80037f4 <HAL_Init+0x40>)
 80037be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037c4:	4b0b      	ldr	r3, [pc, #44]	@ (80037f4 <HAL_Init+0x40>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a0a      	ldr	r2, [pc, #40]	@ (80037f4 <HAL_Init+0x40>)
 80037ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_Init+0x40>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a07      	ldr	r2, [pc, #28]	@ (80037f4 <HAL_Init+0x40>)
 80037d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037dc:	2003      	movs	r0, #3
 80037de:	f000 f8fc 	bl	80039da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037e2:	200f      	movs	r0, #15
 80037e4:	f7ff fe4c 	bl	8003480 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037e8:	f7ff fd46 	bl	8003278 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023c00 	.word	0x40023c00

080037f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80037fc:	4b06      	ldr	r3, [pc, #24]	@ (8003818 <HAL_IncTick+0x20>)
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	461a      	mov	r2, r3
 8003802:	4b06      	ldr	r3, [pc, #24]	@ (800381c <HAL_IncTick+0x24>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4413      	add	r3, r2
 8003808:	4a04      	ldr	r2, [pc, #16]	@ (800381c <HAL_IncTick+0x24>)
 800380a:	6013      	str	r3, [r2, #0]
}
 800380c:	bf00      	nop
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	20000010 	.word	0x20000010
 800381c:	200009d4 	.word	0x200009d4

08003820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return uwTick;
 8003824:	4b03      	ldr	r3, [pc, #12]	@ (8003834 <HAL_GetTick+0x14>)
 8003826:	681b      	ldr	r3, [r3, #0]
}
 8003828:	4618      	mov	r0, r3
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	200009d4 	.word	0x200009d4

08003838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003840:	f7ff ffee 	bl	8003820 <HAL_GetTick>
 8003844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003850:	d005      	beq.n	800385e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003852:	4b0a      	ldr	r3, [pc, #40]	@ (800387c <HAL_Delay+0x44>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4413      	add	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800385e:	bf00      	nop
 8003860:	f7ff ffde 	bl	8003820 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	429a      	cmp	r2, r3
 800386e:	d8f7      	bhi.n	8003860 <HAL_Delay+0x28>
  {
  }
}
 8003870:	bf00      	nop
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20000010 	.word	0x20000010

08003880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003890:	4b0c      	ldr	r3, [pc, #48]	@ (80038c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800389c:	4013      	ands	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038b2:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <__NVIC_SetPriorityGrouping+0x44>)
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	60d3      	str	r3, [r2, #12]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	f003 0307 	and.w	r3, r3, #7
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	db0b      	blt.n	800390e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	f003 021f 	and.w	r2, r3, #31
 80038fc:	4907      	ldr	r1, [pc, #28]	@ (800391c <__NVIC_EnableIRQ+0x38>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2001      	movs	r0, #1
 8003906:	fa00 f202 	lsl.w	r2, r0, r2
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100

08003920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	db0a      	blt.n	800394a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	490c      	ldr	r1, [pc, #48]	@ (800396c <__NVIC_SetPriority+0x4c>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	0112      	lsls	r2, r2, #4
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	440b      	add	r3, r1
 8003944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003948:	e00a      	b.n	8003960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4908      	ldr	r1, [pc, #32]	@ (8003970 <__NVIC_SetPriority+0x50>)
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	3b04      	subs	r3, #4
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	440b      	add	r3, r1
 800395e:	761a      	strb	r2, [r3, #24]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000e100 	.word	0xe000e100
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	@ 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f1c3 0307 	rsb	r3, r3, #7
 800398e:	2b04      	cmp	r3, #4
 8003990:	bf28      	it	cs
 8003992:	2304      	movcs	r3, #4
 8003994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3304      	adds	r3, #4
 800399a:	2b06      	cmp	r3, #6
 800399c:	d902      	bls.n	80039a4 <NVIC_EncodePriority+0x30>
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3b03      	subs	r3, #3
 80039a2:	e000      	b.n	80039a6 <NVIC_EncodePriority+0x32>
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	401a      	ands	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039bc:	f04f 31ff 	mov.w	r1, #4294967295
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43d9      	mvns	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	4313      	orrs	r3, r2
         );
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3724      	adds	r7, #36	@ 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b082      	sub	sp, #8
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7ff ff4c 	bl	8003880 <__NVIC_SetPriorityGrouping>
}
 80039e8:	bf00      	nop
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	4603      	mov	r3, r0
 80039f8:	60b9      	str	r1, [r7, #8]
 80039fa:	607a      	str	r2, [r7, #4]
 80039fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a02:	f7ff ff61 	bl	80038c8 <__NVIC_GetPriorityGrouping>
 8003a06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	68b9      	ldr	r1, [r7, #8]
 8003a0c:	6978      	ldr	r0, [r7, #20]
 8003a0e:	f7ff ffb1 	bl	8003974 <NVIC_EncodePriority>
 8003a12:	4602      	mov	r2, r0
 8003a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a18:	4611      	mov	r1, r2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7ff ff80 	bl	8003920 <__NVIC_SetPriority>
}
 8003a20:	bf00      	nop
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b082      	sub	sp, #8
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	4603      	mov	r3, r0
 8003a30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a36:	4618      	mov	r0, r3
 8003a38:	f7ff ff54 	bl	80038e4 <__NVIC_EnableIRQ>
}
 8003a3c:	bf00      	nop
 8003a3e:	3708      	adds	r7, #8
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b089      	sub	sp, #36	@ 0x24
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a56:	2300      	movs	r3, #0
 8003a58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e159      	b.n	8003d14 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a60:	2201      	movs	r2, #1
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	697a      	ldr	r2, [r7, #20]
 8003a70:	4013      	ands	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	f040 8148 	bne.w	8003d0e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d005      	beq.n	8003a96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d130      	bne.n	8003af8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	2203      	movs	r2, #3
 8003aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003acc:	2201      	movs	r2, #1
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	091b      	lsrs	r3, r3, #4
 8003ae2:	f003 0201 	and.w	r2, r3, #1
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f003 0303 	and.w	r3, r3, #3
 8003b00:	2b03      	cmp	r3, #3
 8003b02:	d017      	beq.n	8003b34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	689a      	ldr	r2, [r3, #8]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d123      	bne.n	8003b88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	f003 0307 	and.w	r3, r3, #7
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	220f      	movs	r2, #15
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	43db      	mvns	r3, r3
 8003b5e:	69ba      	ldr	r2, [r7, #24]
 8003b60:	4013      	ands	r3, r2
 8003b62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	fa02 f303 	lsl.w	r3, r2, r3
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	08da      	lsrs	r2, r3, #3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	3208      	adds	r2, #8
 8003b82:	69b9      	ldr	r1, [r7, #24]
 8003b84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	005b      	lsls	r3, r3, #1
 8003b92:	2203      	movs	r2, #3
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	43db      	mvns	r3, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	f003 0203 	and.w	r2, r3, #3
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	005b      	lsls	r3, r3, #1
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 80a2 	beq.w	8003d0e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
 8003bce:	4b57      	ldr	r3, [pc, #348]	@ (8003d2c <HAL_GPIO_Init+0x2e8>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a56      	ldr	r2, [pc, #344]	@ (8003d2c <HAL_GPIO_Init+0x2e8>)
 8003bd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b54      	ldr	r3, [pc, #336]	@ (8003d2c <HAL_GPIO_Init+0x2e8>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003be2:	60fb      	str	r3, [r7, #12]
 8003be4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003be6:	4a52      	ldr	r2, [pc, #328]	@ (8003d30 <HAL_GPIO_Init+0x2ec>)
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0303 	and.w	r3, r3, #3
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a49      	ldr	r2, [pc, #292]	@ (8003d34 <HAL_GPIO_Init+0x2f0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d019      	beq.n	8003c46 <HAL_GPIO_Init+0x202>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a48      	ldr	r2, [pc, #288]	@ (8003d38 <HAL_GPIO_Init+0x2f4>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d013      	beq.n	8003c42 <HAL_GPIO_Init+0x1fe>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a47      	ldr	r2, [pc, #284]	@ (8003d3c <HAL_GPIO_Init+0x2f8>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d00d      	beq.n	8003c3e <HAL_GPIO_Init+0x1fa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a46      	ldr	r2, [pc, #280]	@ (8003d40 <HAL_GPIO_Init+0x2fc>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d007      	beq.n	8003c3a <HAL_GPIO_Init+0x1f6>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a45      	ldr	r2, [pc, #276]	@ (8003d44 <HAL_GPIO_Init+0x300>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d101      	bne.n	8003c36 <HAL_GPIO_Init+0x1f2>
 8003c32:	2304      	movs	r3, #4
 8003c34:	e008      	b.n	8003c48 <HAL_GPIO_Init+0x204>
 8003c36:	2307      	movs	r3, #7
 8003c38:	e006      	b.n	8003c48 <HAL_GPIO_Init+0x204>
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e004      	b.n	8003c48 <HAL_GPIO_Init+0x204>
 8003c3e:	2302      	movs	r3, #2
 8003c40:	e002      	b.n	8003c48 <HAL_GPIO_Init+0x204>
 8003c42:	2301      	movs	r3, #1
 8003c44:	e000      	b.n	8003c48 <HAL_GPIO_Init+0x204>
 8003c46:	2300      	movs	r3, #0
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	f002 0203 	and.w	r2, r2, #3
 8003c4e:	0092      	lsls	r2, r2, #2
 8003c50:	4093      	lsls	r3, r2
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c58:	4935      	ldr	r1, [pc, #212]	@ (8003d30 <HAL_GPIO_Init+0x2ec>)
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	089b      	lsrs	r3, r3, #2
 8003c5e:	3302      	adds	r3, #2
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c66:	4b38      	ldr	r3, [pc, #224]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c90:	4b2d      	ldr	r3, [pc, #180]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cb4:	4a24      	ldr	r2, [pc, #144]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003cba:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	43db      	mvns	r3, r3
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cde:	4a1a      	ldr	r2, [pc, #104]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ce4:	4b18      	ldr	r3, [pc, #96]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	43db      	mvns	r3, r3
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d003      	beq.n	8003d08 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d08:	4a0f      	ldr	r2, [pc, #60]	@ (8003d48 <HAL_GPIO_Init+0x304>)
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	3301      	adds	r3, #1
 8003d12:	61fb      	str	r3, [r7, #28]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	2b0f      	cmp	r3, #15
 8003d18:	f67f aea2 	bls.w	8003a60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	bf00      	nop
 8003d20:	3724      	adds	r7, #36	@ 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	40013800 	.word	0x40013800
 8003d34:	40020000 	.word	0x40020000
 8003d38:	40020400 	.word	0x40020400
 8003d3c:	40020800 	.word	0x40020800
 8003d40:	40020c00 	.word	0x40020c00
 8003d44:	40021000 	.word	0x40021000
 8003d48:	40013c00 	.word	0x40013c00

08003d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	460b      	mov	r3, r1
 8003d56:	807b      	strh	r3, [r7, #2]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d5c:	787b      	ldrb	r3, [r7, #1]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d62:	887a      	ldrh	r2, [r7, #2]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d68:	e003      	b.n	8003d72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d6a:	887b      	ldrh	r3, [r7, #2]
 8003d6c:	041a      	lsls	r2, r3, #16
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	619a      	str	r2, [r3, #24]
}
 8003d72:	bf00      	nop
 8003d74:	370c      	adds	r7, #12
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
	...

08003d80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e12b      	b.n	8003fea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f7ff fa92 	bl	80032d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2224      	movs	r2, #36	@ 0x24
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f022 0201 	bic.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003dd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003de2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003de4:	f001 ff0e 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8003de8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	4a81      	ldr	r2, [pc, #516]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d807      	bhi.n	8003e04 <HAL_I2C_Init+0x84>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	4a80      	ldr	r2, [pc, #512]	@ (8003ff8 <HAL_I2C_Init+0x278>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	bf94      	ite	ls
 8003dfc:	2301      	movls	r3, #1
 8003dfe:	2300      	movhi	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e006      	b.n	8003e12 <HAL_I2C_Init+0x92>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4a7d      	ldr	r2, [pc, #500]	@ (8003ffc <HAL_I2C_Init+0x27c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bf94      	ite	ls
 8003e0c:	2301      	movls	r3, #1
 8003e0e:	2300      	movhi	r3, #0
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e0e7      	b.n	8003fea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	4a78      	ldr	r2, [pc, #480]	@ (8004000 <HAL_I2C_Init+0x280>)
 8003e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e22:	0c9b      	lsrs	r3, r3, #18
 8003e24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	4a6a      	ldr	r2, [pc, #424]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d802      	bhi.n	8003e54 <HAL_I2C_Init+0xd4>
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	3301      	adds	r3, #1
 8003e52:	e009      	b.n	8003e68 <HAL_I2C_Init+0xe8>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003e5a:	fb02 f303 	mul.w	r3, r2, r3
 8003e5e:	4a69      	ldr	r2, [pc, #420]	@ (8004004 <HAL_I2C_Init+0x284>)
 8003e60:	fba2 2303 	umull	r2, r3, r2, r3
 8003e64:	099b      	lsrs	r3, r3, #6
 8003e66:	3301      	adds	r3, #1
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003e7a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	495c      	ldr	r1, [pc, #368]	@ (8003ff4 <HAL_I2C_Init+0x274>)
 8003e84:	428b      	cmp	r3, r1
 8003e86:	d819      	bhi.n	8003ebc <HAL_I2C_Init+0x13c>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1e59      	subs	r1, r3, #1
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e96:	1c59      	adds	r1, r3, #1
 8003e98:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003e9c:	400b      	ands	r3, r1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <HAL_I2C_Init+0x138>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1e59      	subs	r1, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	fbb1 f3f3 	udiv	r3, r1, r3
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb6:	e051      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003eb8:	2304      	movs	r3, #4
 8003eba:	e04f      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d111      	bne.n	8003ee8 <HAL_I2C_Init+0x168>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	1e58      	subs	r0, r3, #1
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6859      	ldr	r1, [r3, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	440b      	add	r3, r1
 8003ed2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	e012      	b.n	8003f0e <HAL_I2C_Init+0x18e>
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	1e58      	subs	r0, r3, #1
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6859      	ldr	r1, [r3, #4]
 8003ef0:	460b      	mov	r3, r1
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	0099      	lsls	r1, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efe:	3301      	adds	r3, #1
 8003f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	bf0c      	ite	eq
 8003f08:	2301      	moveq	r3, #1
 8003f0a:	2300      	movne	r3, #0
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d001      	beq.n	8003f16 <HAL_I2C_Init+0x196>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e022      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10e      	bne.n	8003f3c <HAL_I2C_Init+0x1bc>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1e58      	subs	r0, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6859      	ldr	r1, [r3, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	005b      	lsls	r3, r3, #1
 8003f2a:	440b      	add	r3, r1
 8003f2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f30:	3301      	adds	r3, #1
 8003f32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f36:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f3a:	e00f      	b.n	8003f5c <HAL_I2C_Init+0x1dc>
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1e58      	subs	r0, r3, #1
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6859      	ldr	r1, [r3, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	440b      	add	r3, r1
 8003f4a:	0099      	lsls	r1, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f52:	3301      	adds	r3, #1
 8003f54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f58:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	6809      	ldr	r1, [r1, #0]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003f8a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	6911      	ldr	r1, [r2, #16]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	68d2      	ldr	r2, [r2, #12]
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695a      	ldr	r2, [r3, #20]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2220      	movs	r2, #32
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	000186a0 	.word	0x000186a0
 8003ff8:	001e847f 	.word	0x001e847f
 8003ffc:	003d08ff 	.word	0x003d08ff
 8004000:	431bde83 	.word	0x431bde83
 8004004:	10624dd3 	.word	0x10624dd3

08004008 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	460b      	mov	r3, r1
 8004016:	817b      	strh	r3, [r7, #10]
 8004018:	4613      	mov	r3, r2
 800401a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800401c:	f7ff fc00 	bl	8003820 <HAL_GetTick>
 8004020:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b20      	cmp	r3, #32
 800402c:	f040 80e0 	bne.w	80041f0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	2319      	movs	r3, #25
 8004036:	2201      	movs	r2, #1
 8004038:	4970      	ldr	r1, [pc, #448]	@ (80041fc <HAL_I2C_Master_Transmit+0x1f4>)
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 ff3c 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	e0d3      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004050:	2b01      	cmp	r3, #1
 8004052:	d101      	bne.n	8004058 <HAL_I2C_Master_Transmit+0x50>
 8004054:	2302      	movs	r3, #2
 8004056:	e0cc      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2201      	movs	r2, #1
 800405c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	2b01      	cmp	r3, #1
 800406c:	d007      	beq.n	800407e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f042 0201 	orr.w	r2, r2, #1
 800407c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800408c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2221      	movs	r2, #33	@ 0x21
 8004092:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2210      	movs	r2, #16
 800409a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	893a      	ldrh	r2, [r7, #8]
 80040ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	4a50      	ldr	r2, [pc, #320]	@ (8004200 <HAL_I2C_Master_Transmit+0x1f8>)
 80040be:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040c0:	8979      	ldrh	r1, [r7, #10]
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fcf6 	bl	8004ab8 <I2C_MasterRequestWrite>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e08d      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040d6:	2300      	movs	r3, #0
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80040ec:	e066      	b.n	80041bc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	6a39      	ldr	r1, [r7, #32]
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fffa 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00d      	beq.n	800411a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	2b04      	cmp	r3, #4
 8004104:	d107      	bne.n	8004116 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004114:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e06b      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	781a      	ldrb	r2, [r3, #0]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004134:	b29b      	uxth	r3, r3
 8004136:	3b01      	subs	r3, #1
 8004138:	b29a      	uxth	r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695b      	ldr	r3, [r3, #20]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b04      	cmp	r3, #4
 8004156:	d11b      	bne.n	8004190 <HAL_I2C_Master_Transmit+0x188>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800415c:	2b00      	cmp	r3, #0
 800415e:	d017      	beq.n	8004190 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004170:	1c5a      	adds	r2, r3, #1
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	3b01      	subs	r3, #1
 800417e:	b29a      	uxth	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004188:	3b01      	subs	r3, #1
 800418a:	b29a      	uxth	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004190:	697a      	ldr	r2, [r7, #20]
 8004192:	6a39      	ldr	r1, [r7, #32]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fff1 	bl	800517c <I2C_WaitOnBTFFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a4:	2b04      	cmp	r3, #4
 80041a6:	d107      	bne.n	80041b8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e01a      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d194      	bne.n	80040ee <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2220      	movs	r2, #32
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2200      	movs	r2, #0
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80041ec:	2300      	movs	r3, #0
 80041ee:	e000      	b.n	80041f2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80041f0:	2302      	movs	r3, #2
  }
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	00100002 	.word	0x00100002
 8004200:	ffff0000 	.word	0xffff0000

08004204 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	4608      	mov	r0, r1
 800420e:	4611      	mov	r1, r2
 8004210:	461a      	mov	r2, r3
 8004212:	4603      	mov	r3, r0
 8004214:	817b      	strh	r3, [r7, #10]
 8004216:	460b      	mov	r3, r1
 8004218:	813b      	strh	r3, [r7, #8]
 800421a:	4613      	mov	r3, r2
 800421c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800421e:	f7ff faff 	bl	8003820 <HAL_GetTick>
 8004222:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800422a:	b2db      	uxtb	r3, r3
 800422c:	2b20      	cmp	r3, #32
 800422e:	f040 80d9 	bne.w	80043e4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2319      	movs	r3, #25
 8004238:	2201      	movs	r2, #1
 800423a:	496d      	ldr	r1, [pc, #436]	@ (80043f0 <HAL_I2C_Mem_Write+0x1ec>)
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fe3b 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
 800424a:	e0cc      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004252:	2b01      	cmp	r3, #1
 8004254:	d101      	bne.n	800425a <HAL_I2C_Mem_Write+0x56>
 8004256:	2302      	movs	r3, #2
 8004258:	e0c5      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d007      	beq.n	8004280 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800428e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2221      	movs	r2, #33	@ 0x21
 8004294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2240      	movs	r2, #64	@ 0x40
 800429c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6a3a      	ldr	r2, [r7, #32]
 80042aa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80042b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	4a4d      	ldr	r2, [pc, #308]	@ (80043f4 <HAL_I2C_Mem_Write+0x1f0>)
 80042c0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80042c2:	88f8      	ldrh	r0, [r7, #6]
 80042c4:	893a      	ldrh	r2, [r7, #8]
 80042c6:	8979      	ldrh	r1, [r7, #10]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	9301      	str	r3, [sp, #4]
 80042cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	4603      	mov	r3, r0
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 fc72 	bl	8004bbc <I2C_RequestMemoryWrite>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d052      	beq.n	8004384 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e081      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 ff00 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004308:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e06b      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004312:	781a      	ldrb	r2, [r3, #0]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d11b      	bne.n	8004384 <HAL_I2C_Mem_Write+0x180>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d017      	beq.n	8004384 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004358:	781a      	ldrb	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1aa      	bne.n	80042e2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 fef3 	bl	800517c <I2C_WaitOnBTFFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d107      	bne.n	80043b4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e016      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e000      	b.n	80043e6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043e4:	2302      	movs	r3, #2
  }
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3718      	adds	r7, #24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	00100002 	.word	0x00100002
 80043f4:	ffff0000 	.word	0xffff0000

080043f8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08c      	sub	sp, #48	@ 0x30
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	4608      	mov	r0, r1
 8004402:	4611      	mov	r1, r2
 8004404:	461a      	mov	r2, r3
 8004406:	4603      	mov	r3, r0
 8004408:	817b      	strh	r3, [r7, #10]
 800440a:	460b      	mov	r3, r1
 800440c:	813b      	strh	r3, [r7, #8]
 800440e:	4613      	mov	r3, r2
 8004410:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004412:	f7ff fa05 	bl	8003820 <HAL_GetTick>
 8004416:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b20      	cmp	r3, #32
 8004422:	f040 8214 	bne.w	800484e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	2319      	movs	r3, #25
 800442c:	2201      	movs	r2, #1
 800442e:	497b      	ldr	r1, [pc, #492]	@ (800461c <HAL_I2C_Mem_Read+0x224>)
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fd41 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800443c:	2302      	movs	r3, #2
 800443e:	e207      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <HAL_I2C_Mem_Read+0x56>
 800444a:	2302      	movs	r3, #2
 800444c:	e200      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0301 	and.w	r3, r3, #1
 8004460:	2b01      	cmp	r3, #1
 8004462:	d007      	beq.n	8004474 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004482:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2222      	movs	r2, #34	@ 0x22
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2240      	movs	r2, #64	@ 0x40
 8004490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800449e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80044a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	4a5b      	ldr	r2, [pc, #364]	@ (8004620 <HAL_I2C_Mem_Read+0x228>)
 80044b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80044b6:	88f8      	ldrh	r0, [r7, #6]
 80044b8:	893a      	ldrh	r2, [r7, #8]
 80044ba:	8979      	ldrh	r1, [r7, #10]
 80044bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044be:	9301      	str	r3, [sp, #4]
 80044c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4603      	mov	r3, r0
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fc0e 	bl	8004ce8 <I2C_RequestMemoryRead>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d001      	beq.n	80044d6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e1bc      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d113      	bne.n	8004506 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	623b      	str	r3, [r7, #32]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	623b      	str	r3, [r7, #32]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e190      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800450a:	2b01      	cmp	r3, #1
 800450c:	d11b      	bne.n	8004546 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800451c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800451e:	2300      	movs	r3, #0
 8004520:	61fb      	str	r3, [r7, #28]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	695b      	ldr	r3, [r3, #20]
 8004528:	61fb      	str	r3, [r7, #28]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	61fb      	str	r3, [r7, #28]
 8004532:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e170      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800454a:	2b02      	cmp	r3, #2
 800454c:	d11b      	bne.n	8004586 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800456c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456e:	2300      	movs	r3, #0
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	695b      	ldr	r3, [r3, #20]
 8004578:	61bb      	str	r3, [r7, #24]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	699b      	ldr	r3, [r3, #24]
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	e150      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800459c:	e144      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	f200 80f1 	bhi.w	800478a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d123      	bne.n	80045f8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fe29 	bl	800520c <I2C_WaitOnRXNEFlagUntilTimeout>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d001      	beq.n	80045c4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e145      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d6:	1c5a      	adds	r2, r3, #1
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045e0:	3b01      	subs	r3, #1
 80045e2:	b29a      	uxth	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80045f6:	e117      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d14e      	bne.n	800469e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	9300      	str	r3, [sp, #0]
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	2200      	movs	r2, #0
 8004608:	4906      	ldr	r1, [pc, #24]	@ (8004624 <HAL_I2C_Mem_Read+0x22c>)
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f000 fc54 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d008      	beq.n	8004628 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e11a      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
 800461a:	bf00      	nop
 800461c:	00100002 	.word	0x00100002
 8004620:	ffff0000 	.word	0xffff0000
 8004624:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004636:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691a      	ldr	r2, [r3, #16]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	1c5a      	adds	r2, r3, #1
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	691a      	ldr	r2, [r3, #16]
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004686:	3b01      	subs	r3, #1
 8004688:	b29a      	uxth	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004692:	b29b      	uxth	r3, r3
 8004694:	3b01      	subs	r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800469c:	e0c4      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	9300      	str	r3, [sp, #0]
 80046a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046a4:	2200      	movs	r2, #0
 80046a6:	496c      	ldr	r1, [pc, #432]	@ (8004858 <HAL_I2C_Mem_Read+0x460>)
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f000 fc05 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e0cb      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	691a      	ldr	r2, [r3, #16]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046d2:	b2d2      	uxtb	r2, r2
 80046d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046da:	1c5a      	adds	r2, r3, #1
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046e4:	3b01      	subs	r3, #1
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004700:	2200      	movs	r2, #0
 8004702:	4955      	ldr	r1, [pc, #340]	@ (8004858 <HAL_I2C_Mem_Read+0x460>)
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f000 fbd7 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d001      	beq.n	8004714 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e09d      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	691a      	ldr	r2, [r3, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472e:	b2d2      	uxtb	r2, r2
 8004730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	1c5a      	adds	r2, r3, #1
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800474c:	b29b      	uxth	r3, r3
 800474e:	3b01      	subs	r3, #1
 8004750:	b29a      	uxth	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	691a      	ldr	r2, [r3, #16]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	b2d2      	uxtb	r2, r2
 8004762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004772:	3b01      	subs	r3, #1
 8004774:	b29a      	uxth	r2, r3
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004788:	e04e      	b.n	8004828 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800478c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f000 fd3c 	bl	800520c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d001      	beq.n	800479e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e058      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	691a      	ldr	r2, [r3, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a8:	b2d2      	uxtb	r2, r2
 80047aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29a      	uxth	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	3b01      	subs	r3, #1
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	f003 0304 	and.w	r3, r3, #4
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d124      	bne.n	8004828 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d107      	bne.n	80047f6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c5a      	adds	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	3b01      	subs	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800482c:	2b00      	cmp	r3, #0
 800482e:	f47f aeb6 	bne.w	800459e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3728      	adds	r7, #40	@ 0x28
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}
 8004858:	00010004 	.word	0x00010004

0800485c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b08a      	sub	sp, #40	@ 0x28
 8004860:	af02      	add	r7, sp, #8
 8004862:	60f8      	str	r0, [r7, #12]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
 8004868:	460b      	mov	r3, r1
 800486a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800486c:	f7fe ffd8 	bl	8003820 <HAL_GetTick>
 8004870:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b20      	cmp	r3, #32
 8004880:	f040 8111 	bne.w	8004aa6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004884:	69fb      	ldr	r3, [r7, #28]
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	2319      	movs	r3, #25
 800488a:	2201      	movs	r2, #1
 800488c:	4988      	ldr	r1, [pc, #544]	@ (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 800488e:	68f8      	ldr	r0, [r7, #12]
 8004890:	f000 fb12 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800489a:	2302      	movs	r3, #2
 800489c:	e104      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d101      	bne.n	80048ac <HAL_I2C_IsDeviceReady+0x50>
 80048a8:	2302      	movs	r3, #2
 80048aa:	e0fd      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d007      	beq.n	80048d2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80048e0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2224      	movs	r2, #36	@ 0x24
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4a70      	ldr	r2, [pc, #448]	@ (8004ab4 <HAL_I2C_IsDeviceReady+0x258>)
 80048f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004904:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2200      	movs	r2, #0
 800490e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fad0 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00d      	beq.n	800493a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004928:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800492c:	d103      	bne.n	8004936 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004934:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e0b6      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800493a:	897b      	ldrh	r3, [r7, #10]
 800493c:	b2db      	uxtb	r3, r3
 800493e:	461a      	mov	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004948:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800494a:	f7fe ff69 	bl	8003820 <HAL_GetTick>
 800494e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b02      	cmp	r3, #2
 800495c:	bf0c      	ite	eq
 800495e:	2301      	moveq	r3, #1
 8004960:	2300      	movne	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	695b      	ldr	r3, [r3, #20]
 800496c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004970:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004974:	bf0c      	ite	eq
 8004976:	2301      	moveq	r3, #1
 8004978:	2300      	movne	r3, #0
 800497a:	b2db      	uxtb	r3, r3
 800497c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800497e:	e025      	b.n	80049cc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004980:	f7fe ff4e 	bl	8003820 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	429a      	cmp	r2, r3
 800498e:	d302      	bcc.n	8004996 <HAL_I2C_IsDeviceReady+0x13a>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d103      	bne.n	800499e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22a0      	movs	r2, #160	@ 0xa0
 800499a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	bf0c      	ite	eq
 80049ac:	2301      	moveq	r3, #1
 80049ae:	2300      	movne	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80049be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2ba0      	cmp	r3, #160	@ 0xa0
 80049d6:	d005      	beq.n	80049e4 <HAL_I2C_IsDeviceReady+0x188>
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d102      	bne.n	80049e4 <HAL_I2C_IsDeviceReady+0x188>
 80049de:	7dbb      	ldrb	r3, [r7, #22]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d0cd      	beq.n	8004980 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d129      	bne.n	8004a4e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a08:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	613b      	str	r3, [r7, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2319      	movs	r3, #25
 8004a26:	2201      	movs	r2, #1
 8004a28:	4921      	ldr	r1, [pc, #132]	@ (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a2a:	68f8      	ldr	r0, [r7, #12]
 8004a2c:	f000 fa44 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e036      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	e02c      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a5c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a66:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2319      	movs	r3, #25
 8004a6e:	2201      	movs	r2, #1
 8004a70:	490f      	ldr	r1, [pc, #60]	@ (8004ab0 <HAL_I2C_IsDeviceReady+0x254>)
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f000 fa20 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e012      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	3301      	adds	r3, #1
 8004a86:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004a88:	69ba      	ldr	r2, [r7, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	f4ff af32 	bcc.w	80048f6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2220      	movs	r2, #32
 8004a96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004aa6:	2302      	movs	r3, #2
  }
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3720      	adds	r7, #32
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	00100002 	.word	0x00100002
 8004ab4:	ffff0000 	.word	0xffff0000

08004ab8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b088      	sub	sp, #32
 8004abc:	af02      	add	r7, sp, #8
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	607a      	str	r2, [r7, #4]
 8004ac2:	603b      	str	r3, [r7, #0]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d006      	beq.n	8004ae2 <I2C_MasterRequestWrite+0x2a>
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d003      	beq.n	8004ae2 <I2C_MasterRequestWrite+0x2a>
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ae0:	d108      	bne.n	8004af4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e00b      	b.n	8004b0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af8:	2b12      	cmp	r3, #18
 8004afa:	d107      	bne.n	8004b0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	9300      	str	r3, [sp, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b18:	68f8      	ldr	r0, [r7, #12]
 8004b1a:	f000 f9cd 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d00d      	beq.n	8004b40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b32:	d103      	bne.n	8004b3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b3c:	2303      	movs	r3, #3
 8004b3e:	e035      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b4a:	897b      	ldrh	r3, [r7, #10]
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b58:	611a      	str	r2, [r3, #16]
 8004b5a:	e01b      	b.n	8004b94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b5c:	897b      	ldrh	r3, [r7, #10]
 8004b5e:	11db      	asrs	r3, r3, #7
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f003 0306 	and.w	r3, r3, #6
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f063 030f 	orn	r3, r3, #15
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	490e      	ldr	r1, [pc, #56]	@ (8004bb4 <I2C_MasterRequestWrite+0xfc>)
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f000 fa16 	bl	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e010      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b8a:	897b      	ldrh	r3, [r7, #10]
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4907      	ldr	r1, [pc, #28]	@ (8004bb8 <I2C_MasterRequestWrite+0x100>)
 8004b9a:	68f8      	ldr	r0, [r7, #12]
 8004b9c:	f000 fa06 	bl	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d001      	beq.n	8004baa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e000      	b.n	8004bac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	00010008 	.word	0x00010008
 8004bb8:	00010002 	.word	0x00010002

08004bbc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	4608      	mov	r0, r1
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	461a      	mov	r2, r3
 8004bca:	4603      	mov	r3, r0
 8004bcc:	817b      	strh	r3, [r7, #10]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	813b      	strh	r3, [r7, #8]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be8:	9300      	str	r3, [sp, #0]
 8004bea:	6a3b      	ldr	r3, [r7, #32]
 8004bec:	2200      	movs	r2, #0
 8004bee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 f960 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00d      	beq.n	8004c1a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c0c:	d103      	bne.n	8004c16 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c14:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e05f      	b.n	8004cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c1a:	897b      	ldrh	r3, [r7, #10]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2c:	6a3a      	ldr	r2, [r7, #32]
 8004c2e:	492d      	ldr	r1, [pc, #180]	@ (8004ce4 <I2C_RequestMemoryWrite+0x128>)
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	f000 f9bb 	bl	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c36:	4603      	mov	r3, r0
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d001      	beq.n	8004c40 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e04c      	b.n	8004cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	617b      	str	r3, [r7, #20]
 8004c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c58:	6a39      	ldr	r1, [r7, #32]
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 fa46 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00d      	beq.n	8004c82 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2b04      	cmp	r3, #4
 8004c6c:	d107      	bne.n	8004c7e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e02b      	b.n	8004cda <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d105      	bne.n	8004c94 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c88:	893b      	ldrh	r3, [r7, #8]
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	e021      	b.n	8004cd8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c94:	893b      	ldrh	r3, [r7, #8]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ca4:	6a39      	ldr	r1, [r7, #32]
 8004ca6:	68f8      	ldr	r0, [r7, #12]
 8004ca8:	f000 fa20 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00d      	beq.n	8004cce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d107      	bne.n	8004cca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e005      	b.n	8004cda <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004cce:	893b      	ldrh	r3, [r7, #8]
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	4608      	mov	r0, r1
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	817b      	strh	r3, [r7, #10]
 8004cfa:	460b      	mov	r3, r1
 8004cfc:	813b      	strh	r3, [r7, #8]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004d10:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d20:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	9300      	str	r3, [sp, #0]
 8004d26:	6a3b      	ldr	r3, [r7, #32]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 f8c2 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00d      	beq.n	8004d56 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d48:	d103      	bne.n	8004d52 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d50:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e0aa      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d56:	897b      	ldrh	r3, [r7, #10]
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d64:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d68:	6a3a      	ldr	r2, [r7, #32]
 8004d6a:	4952      	ldr	r1, [pc, #328]	@ (8004eb4 <I2C_RequestMemoryRead+0x1cc>)
 8004d6c:	68f8      	ldr	r0, [r7, #12]
 8004d6e:	f000 f91d 	bl	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e097      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	617b      	str	r3, [r7, #20]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	617b      	str	r3, [r7, #20]
 8004d90:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d94:	6a39      	ldr	r1, [r7, #32]
 8004d96:	68f8      	ldr	r0, [r7, #12]
 8004d98:	f000 f9a8 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00d      	beq.n	8004dbe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da6:	2b04      	cmp	r3, #4
 8004da8:	d107      	bne.n	8004dba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004db8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e076      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004dbe:	88fb      	ldrh	r3, [r7, #6]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d105      	bne.n	8004dd0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dc4:	893b      	ldrh	r3, [r7, #8]
 8004dc6:	b2da      	uxtb	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	611a      	str	r2, [r3, #16]
 8004dce:	e021      	b.n	8004e14 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004dd0:	893b      	ldrh	r3, [r7, #8]
 8004dd2:	0a1b      	lsrs	r3, r3, #8
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	b2da      	uxtb	r2, r3
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004de0:	6a39      	ldr	r1, [r7, #32]
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f000 f982 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00d      	beq.n	8004e0a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d107      	bne.n	8004e06 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e04:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e050      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e0a:	893b      	ldrh	r3, [r7, #8]
 8004e0c:	b2da      	uxtb	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e16:	6a39      	ldr	r1, [r7, #32]
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f000 f967 	bl	80050ec <I2C_WaitOnTXEFlagUntilTimeout>
 8004e1e:	4603      	mov	r3, r0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00d      	beq.n	8004e40 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d107      	bne.n	8004e3c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e035      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004e4e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	6a3b      	ldr	r3, [r7, #32]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f82b 	bl	8004eb8 <I2C_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e76:	d103      	bne.n	8004e80 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e7e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e013      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004e84:	897b      	ldrh	r3, [r7, #10]
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	f043 0301 	orr.w	r3, r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	6a3a      	ldr	r2, [r7, #32]
 8004e98:	4906      	ldr	r1, [pc, #24]	@ (8004eb4 <I2C_RequestMemoryRead+0x1cc>)
 8004e9a:	68f8      	ldr	r0, [r7, #12]
 8004e9c:	f000 f886 	bl	8004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e000      	b.n	8004eac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3718      	adds	r7, #24
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	00010002 	.word	0x00010002

08004eb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b084      	sub	sp, #16
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	603b      	str	r3, [r7, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ec8:	e048      	b.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ed0:	d044      	beq.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ed2:	f7fe fca5 	bl	8003820 <HAL_GetTick>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	1ad3      	subs	r3, r2, r3
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d302      	bcc.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d139      	bne.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10d      	bne.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	e00c      	b.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d116      	bne.n	8004f5c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	e023      	b.n	8004fa4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	d10d      	bne.n	8004f82 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	43da      	mvns	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4013      	ands	r3, r2
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf0c      	ite	eq
 8004f78:	2301      	moveq	r3, #1
 8004f7a:	2300      	movne	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	e00c      	b.n	8004f9c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	43da      	mvns	r2, r3
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	79fb      	ldrb	r3, [r7, #7]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d093      	beq.n	8004eca <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
 8004fb8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004fba:	e071      	b.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fca:	d123      	bne.n	8005014 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fda:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004fe4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2220      	movs	r2, #32
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005000:	f043 0204 	orr.w	r2, r3, #4
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e067      	b.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f1b3 3fff 	cmp.w	r3, #4294967295
 800501a:	d041      	beq.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800501c:	f7fe fc00 	bl	8003820 <HAL_GetTick>
 8005020:	4602      	mov	r2, r0
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	1ad3      	subs	r3, r2, r3
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	429a      	cmp	r2, r3
 800502a:	d302      	bcc.n	8005032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d136      	bne.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b01      	cmp	r3, #1
 800503a:	d10c      	bne.n	8005056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	43da      	mvns	r2, r3
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	4013      	ands	r3, r2
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	e00b      	b.n	800506e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	43da      	mvns	r2, r3
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	4013      	ands	r3, r2
 8005062:	b29b      	uxth	r3, r3
 8005064:	2b00      	cmp	r3, #0
 8005066:	bf14      	ite	ne
 8005068:	2301      	movne	r3, #1
 800506a:	2300      	moveq	r3, #0
 800506c:	b2db      	uxtb	r3, r3
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508c:	f043 0220 	orr.w	r2, r3, #32
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e021      	b.n	80050e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	0c1b      	lsrs	r3, r3, #16
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d10c      	bne.n	80050c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695b      	ldr	r3, [r3, #20]
 80050b0:	43da      	mvns	r2, r3
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	4013      	ands	r3, r2
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e00b      	b.n	80050dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	43da      	mvns	r2, r3
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	bf14      	ite	ne
 80050d6:	2301      	movne	r3, #1
 80050d8:	2300      	moveq	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f47f af6d 	bne.w	8004fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}

080050ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f8:	e034      	b.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 f8e3 	bl	80052c6 <I2C_IsAcknowledgeFailed>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e034      	b.n	8005174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005110:	d028      	beq.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005112:	f7fe fb85 	bl	8003820 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	429a      	cmp	r2, r3
 8005120:	d302      	bcc.n	8005128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d11d      	bne.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005132:	2b80      	cmp	r3, #128	@ 0x80
 8005134:	d016      	beq.n	8005164 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2220      	movs	r2, #32
 8005140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e007      	b.n	8005174 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d1c3      	bne.n	80050fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3710      	adds	r7, #16
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}

0800517c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	60f8      	str	r0, [r7, #12]
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005188:	e034      	b.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800518a:	68f8      	ldr	r0, [r7, #12]
 800518c:	f000 f89b 	bl	80052c6 <I2C_IsAcknowledgeFailed>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e034      	b.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d028      	beq.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051a2:	f7fe fb3d 	bl	8003820 <HAL_GetTick>
 80051a6:	4602      	mov	r2, r0
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1ad3      	subs	r3, r2, r3
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d302      	bcc.n	80051b8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11d      	bne.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f003 0304 	and.w	r3, r3, #4
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d016      	beq.n	80051f4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2200      	movs	r2, #0
 80051ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2220      	movs	r2, #32
 80051d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2200      	movs	r2, #0
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e0:	f043 0220 	orr.w	r2, r3, #32
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2200      	movs	r2, #0
 80051ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e007      	b.n	8005204 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f003 0304 	and.w	r3, r3, #4
 80051fe:	2b04      	cmp	r3, #4
 8005200:	d1c3      	bne.n	800518a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005202:	2300      	movs	r3, #0
}
 8005204:	4618      	mov	r0, r3
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005218:	e049      	b.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	695b      	ldr	r3, [r3, #20]
 8005220:	f003 0310 	and.w	r3, r3, #16
 8005224:	2b10      	cmp	r3, #16
 8005226:	d119      	bne.n	800525c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f06f 0210 	mvn.w	r2, #16
 8005230:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2220      	movs	r2, #32
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e030      	b.n	80052be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800525c:	f7fe fae0 	bl	8003820 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	429a      	cmp	r2, r3
 800526a:	d302      	bcc.n	8005272 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d11d      	bne.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	695b      	ldr	r3, [r3, #20]
 8005278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527c:	2b40      	cmp	r3, #64	@ 0x40
 800527e:	d016      	beq.n	80052ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2200      	movs	r2, #0
 8005284:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2220      	movs	r2, #32
 800528a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800529a:	f043 0220 	orr.w	r2, r3, #32
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e007      	b.n	80052be <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	695b      	ldr	r3, [r3, #20]
 80052b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052b8:	2b40      	cmp	r3, #64	@ 0x40
 80052ba:	d1ae      	bne.n	800521a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80052bc:	2300      	movs	r3, #0
}
 80052be:	4618      	mov	r0, r3
 80052c0:	3710      	adds	r7, #16
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80052d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80052dc:	d11b      	bne.n	8005316 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80052e6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005302:	f043 0204 	orr.w	r2, r3, #4
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e000      	b.n	8005318 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e267      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d075      	beq.n	800542e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005342:	4b88      	ldr	r3, [pc, #544]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b04      	cmp	r3, #4
 800534c:	d00c      	beq.n	8005368 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800534e:	4b85      	ldr	r3, [pc, #532]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005356:	2b08      	cmp	r3, #8
 8005358:	d112      	bne.n	8005380 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800535a:	4b82      	ldr	r3, [pc, #520]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005366:	d10b      	bne.n	8005380 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005368:	4b7e      	ldr	r3, [pc, #504]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d05b      	beq.n	800542c <HAL_RCC_OscConfig+0x108>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d157      	bne.n	800542c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e242      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005388:	d106      	bne.n	8005398 <HAL_RCC_OscConfig+0x74>
 800538a:	4b76      	ldr	r3, [pc, #472]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a75      	ldr	r2, [pc, #468]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005390:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005394:	6013      	str	r3, [r2, #0]
 8005396:	e01d      	b.n	80053d4 <HAL_RCC_OscConfig+0xb0>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x98>
 80053a2:	4b70      	ldr	r3, [pc, #448]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a6f      	ldr	r2, [pc, #444]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80053ac:	6013      	str	r3, [r2, #0]
 80053ae:	4b6d      	ldr	r3, [pc, #436]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4a6c      	ldr	r2, [pc, #432]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0xb0>
 80053bc:	4b69      	ldr	r3, [pc, #420]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a68      	ldr	r2, [pc, #416]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	4b66      	ldr	r3, [pc, #408]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a65      	ldr	r2, [pc, #404]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80053d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d013      	beq.n	8005404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053dc:	f7fe fa20 	bl	8003820 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e2:	e008      	b.n	80053f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053e4:	f7fe fa1c 	bl	8003820 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b64      	cmp	r3, #100	@ 0x64
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e207      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f0      	beq.n	80053e4 <HAL_RCC_OscConfig+0xc0>
 8005402:	e014      	b.n	800542e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005404:	f7fe fa0c 	bl	8003820 <HAL_GetTick>
 8005408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800540c:	f7fe fa08 	bl	8003820 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b64      	cmp	r3, #100	@ 0x64
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e1f3      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800541e:	4b51      	ldr	r3, [pc, #324]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005426:	2b00      	cmp	r3, #0
 8005428:	d1f0      	bne.n	800540c <HAL_RCC_OscConfig+0xe8>
 800542a:	e000      	b.n	800542e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800542c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d063      	beq.n	8005502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800543a:	4b4a      	ldr	r3, [pc, #296]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	f003 030c 	and.w	r3, r3, #12
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005446:	4b47      	ldr	r3, [pc, #284]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800544e:	2b08      	cmp	r3, #8
 8005450:	d11c      	bne.n	800548c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005452:	4b44      	ldr	r3, [pc, #272]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d116      	bne.n	800548c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800545e:	4b41      	ldr	r3, [pc, #260]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d005      	beq.n	8005476 <HAL_RCC_OscConfig+0x152>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	2b01      	cmp	r3, #1
 8005470:	d001      	beq.n	8005476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e1c7      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005476:	4b3b      	ldr	r3, [pc, #236]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	00db      	lsls	r3, r3, #3
 8005484:	4937      	ldr	r1, [pc, #220]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005486:	4313      	orrs	r3, r2
 8005488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	e03a      	b.n	8005502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d020      	beq.n	80054d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005494:	4b34      	ldr	r3, [pc, #208]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549a:	f7fe f9c1 	bl	8003820 <HAL_GetTick>
 800549e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054a0:	e008      	b.n	80054b4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a2:	f7fe f9bd 	bl	8003820 <HAL_GetTick>
 80054a6:	4602      	mov	r2, r0
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	1ad3      	subs	r3, r2, r3
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d901      	bls.n	80054b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e1a8      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054b4:	4b2b      	ldr	r3, [pc, #172]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0f0      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054c0:	4b28      	ldr	r3, [pc, #160]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4925      	ldr	r1, [pc, #148]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	600b      	str	r3, [r1, #0]
 80054d4:	e015      	b.n	8005502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054d6:	4b24      	ldr	r3, [pc, #144]	@ (8005568 <HAL_RCC_OscConfig+0x244>)
 80054d8:	2200      	movs	r2, #0
 80054da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054dc:	f7fe f9a0 	bl	8003820 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054e2:	e008      	b.n	80054f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054e4:	f7fe f99c 	bl	8003820 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d901      	bls.n	80054f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e187      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0302 	and.w	r3, r3, #2
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d1f0      	bne.n	80054e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d036      	beq.n	800557c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d016      	beq.n	8005544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005516:	4b15      	ldr	r3, [pc, #84]	@ (800556c <HAL_RCC_OscConfig+0x248>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800551c:	f7fe f980 	bl	8003820 <HAL_GetTick>
 8005520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005522:	e008      	b.n	8005536 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005524:	f7fe f97c 	bl	8003820 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	2b02      	cmp	r3, #2
 8005530:	d901      	bls.n	8005536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005532:	2303      	movs	r3, #3
 8005534:	e167      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005536:	4b0b      	ldr	r3, [pc, #44]	@ (8005564 <HAL_RCC_OscConfig+0x240>)
 8005538:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d0f0      	beq.n	8005524 <HAL_RCC_OscConfig+0x200>
 8005542:	e01b      	b.n	800557c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005544:	4b09      	ldr	r3, [pc, #36]	@ (800556c <HAL_RCC_OscConfig+0x248>)
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800554a:	f7fe f969 	bl	8003820 <HAL_GetTick>
 800554e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005550:	e00e      	b.n	8005570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005552:	f7fe f965 	bl	8003820 <HAL_GetTick>
 8005556:	4602      	mov	r2, r0
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	2b02      	cmp	r3, #2
 800555e:	d907      	bls.n	8005570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e150      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
 8005564:	40023800 	.word	0x40023800
 8005568:	42470000 	.word	0x42470000
 800556c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005570:	4b88      	ldr	r3, [pc, #544]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005572:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d1ea      	bne.n	8005552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8097 	beq.w	80056b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800558a:	2300      	movs	r3, #0
 800558c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800558e:	4b81      	ldr	r3, [pc, #516]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005592:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10f      	bne.n	80055ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800559a:	2300      	movs	r3, #0
 800559c:	60bb      	str	r3, [r7, #8]
 800559e:	4b7d      	ldr	r3, [pc, #500]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80055a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a2:	4a7c      	ldr	r2, [pc, #496]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80055a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055aa:	4b7a      	ldr	r3, [pc, #488]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80055ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055b2:	60bb      	str	r3, [r7, #8]
 80055b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b6:	2301      	movs	r3, #1
 80055b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ba:	4b77      	ldr	r3, [pc, #476]	@ (8005798 <HAL_RCC_OscConfig+0x474>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d118      	bne.n	80055f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c6:	4b74      	ldr	r3, [pc, #464]	@ (8005798 <HAL_RCC_OscConfig+0x474>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a73      	ldr	r2, [pc, #460]	@ (8005798 <HAL_RCC_OscConfig+0x474>)
 80055cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055d2:	f7fe f925 	bl	8003820 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055da:	f7fe f921 	bl	8003820 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e10c      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055ec:	4b6a      	ldr	r3, [pc, #424]	@ (8005798 <HAL_RCC_OscConfig+0x474>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d0f0      	beq.n	80055da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d106      	bne.n	800560e <HAL_RCC_OscConfig+0x2ea>
 8005600:	4b64      	ldr	r3, [pc, #400]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005604:	4a63      	ldr	r2, [pc, #396]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005606:	f043 0301 	orr.w	r3, r3, #1
 800560a:	6713      	str	r3, [r2, #112]	@ 0x70
 800560c:	e01c      	b.n	8005648 <HAL_RCC_OscConfig+0x324>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	2b05      	cmp	r3, #5
 8005614:	d10c      	bne.n	8005630 <HAL_RCC_OscConfig+0x30c>
 8005616:	4b5f      	ldr	r3, [pc, #380]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005618:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800561a:	4a5e      	ldr	r2, [pc, #376]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 800561c:	f043 0304 	orr.w	r3, r3, #4
 8005620:	6713      	str	r3, [r2, #112]	@ 0x70
 8005622:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005624:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005626:	4a5b      	ldr	r2, [pc, #364]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	6713      	str	r3, [r2, #112]	@ 0x70
 800562e:	e00b      	b.n	8005648 <HAL_RCC_OscConfig+0x324>
 8005630:	4b58      	ldr	r3, [pc, #352]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005634:	4a57      	ldr	r2, [pc, #348]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	6713      	str	r3, [r2, #112]	@ 0x70
 800563c:	4b55      	ldr	r3, [pc, #340]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005640:	4a54      	ldr	r2, [pc, #336]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005642:	f023 0304 	bic.w	r3, r3, #4
 8005646:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d015      	beq.n	800567c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fe f8e6 	bl	8003820 <HAL_GetTick>
 8005654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005656:	e00a      	b.n	800566e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005658:	f7fe f8e2 	bl	8003820 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005666:	4293      	cmp	r3, r2
 8005668:	d901      	bls.n	800566e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e0cb      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566e:	4b49      	ldr	r3, [pc, #292]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0ee      	beq.n	8005658 <HAL_RCC_OscConfig+0x334>
 800567a:	e014      	b.n	80056a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800567c:	f7fe f8d0 	bl	8003820 <HAL_GetTick>
 8005680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005682:	e00a      	b.n	800569a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005684:	f7fe f8cc 	bl	8003820 <HAL_GetTick>
 8005688:	4602      	mov	r2, r0
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005692:	4293      	cmp	r3, r2
 8005694:	d901      	bls.n	800569a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e0b5      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800569a:	4b3e      	ldr	r3, [pc, #248]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1ee      	bne.n	8005684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d105      	bne.n	80056b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056ac:	4b39      	ldr	r3, [pc, #228]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80056ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b0:	4a38      	ldr	r2, [pc, #224]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80056b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056b6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 80a1 	beq.w	8005804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056c2:	4b34      	ldr	r3, [pc, #208]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	f003 030c 	and.w	r3, r3, #12
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d05c      	beq.n	8005788 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	699b      	ldr	r3, [r3, #24]
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d141      	bne.n	800575a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056d6:	4b31      	ldr	r3, [pc, #196]	@ (800579c <HAL_RCC_OscConfig+0x478>)
 80056d8:	2200      	movs	r2, #0
 80056da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80056dc:	f7fe f8a0 	bl	8003820 <HAL_GetTick>
 80056e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056e2:	e008      	b.n	80056f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056e4:	f7fe f89c 	bl	8003820 <HAL_GetTick>
 80056e8:	4602      	mov	r2, r0
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e087      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80056f6:	4b27      	ldr	r3, [pc, #156]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1f0      	bne.n	80056e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69da      	ldr	r2, [r3, #28]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005710:	019b      	lsls	r3, r3, #6
 8005712:	431a      	orrs	r2, r3
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	3b01      	subs	r3, #1
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005724:	061b      	lsls	r3, r3, #24
 8005726:	491b      	ldr	r1, [pc, #108]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 8005728:	4313      	orrs	r3, r2
 800572a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800572c:	4b1b      	ldr	r3, [pc, #108]	@ (800579c <HAL_RCC_OscConfig+0x478>)
 800572e:	2201      	movs	r2, #1
 8005730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005732:	f7fe f875 	bl	8003820 <HAL_GetTick>
 8005736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005738:	e008      	b.n	800574c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800573a:	f7fe f871 	bl	8003820 <HAL_GetTick>
 800573e:	4602      	mov	r2, r0
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	2b02      	cmp	r3, #2
 8005746:	d901      	bls.n	800574c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005748:	2303      	movs	r3, #3
 800574a:	e05c      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800574c:	4b11      	ldr	r3, [pc, #68]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d0f0      	beq.n	800573a <HAL_RCC_OscConfig+0x416>
 8005758:	e054      	b.n	8005804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575a:	4b10      	ldr	r3, [pc, #64]	@ (800579c <HAL_RCC_OscConfig+0x478>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fe f85e 	bl	8003820 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005768:	f7fe f85a 	bl	8003820 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e045      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	4b06      	ldr	r3, [pc, #24]	@ (8005794 <HAL_RCC_OscConfig+0x470>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x444>
 8005786:	e03d      	b.n	8005804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d107      	bne.n	80057a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e038      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
 8005794:	40023800 	.word	0x40023800
 8005798:	40007000 	.word	0x40007000
 800579c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057a0:	4b1b      	ldr	r3, [pc, #108]	@ (8005810 <HAL_RCC_OscConfig+0x4ec>)
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d028      	beq.n	8005800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d121      	bne.n	8005800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d11a      	bne.n	8005800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ca:	68fa      	ldr	r2, [r7, #12]
 80057cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80057d0:	4013      	ands	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80057d8:	4293      	cmp	r3, r2
 80057da:	d111      	bne.n	8005800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	3b01      	subs	r3, #1
 80057ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d001      	beq.n	8005804 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e000      	b.n	8005806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005804:	2300      	movs	r3, #0
}
 8005806:	4618      	mov	r0, r3
 8005808:	3718      	adds	r7, #24
 800580a:	46bd      	mov	sp, r7
 800580c:	bd80      	pop	{r7, pc}
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800

08005814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e0cc      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005828:	4b68      	ldr	r3, [pc, #416]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	683a      	ldr	r2, [r7, #0]
 8005832:	429a      	cmp	r2, r3
 8005834:	d90c      	bls.n	8005850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005836:	4b65      	ldr	r3, [pc, #404]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800583e:	4b63      	ldr	r3, [pc, #396]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f003 0307 	and.w	r3, r3, #7
 8005846:	683a      	ldr	r2, [r7, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d001      	beq.n	8005850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b8      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d020      	beq.n	800589e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0304 	and.w	r3, r3, #4
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005868:	4b59      	ldr	r3, [pc, #356]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4a58      	ldr	r2, [pc, #352]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 800586e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005872:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f003 0308 	and.w	r3, r3, #8
 800587c:	2b00      	cmp	r3, #0
 800587e:	d005      	beq.n	800588c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005880:	4b53      	ldr	r3, [pc, #332]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4a52      	ldr	r2, [pc, #328]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005886:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800588a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800588c:	4b50      	ldr	r3, [pc, #320]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	494d      	ldr	r1, [pc, #308]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 800589a:	4313      	orrs	r3, r2
 800589c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d044      	beq.n	8005934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d107      	bne.n	80058c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058b2:	4b47      	ldr	r3, [pc, #284]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d119      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e07f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	2b02      	cmp	r3, #2
 80058c8:	d003      	beq.n	80058d2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d107      	bne.n	80058e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d2:	4b3f      	ldr	r3, [pc, #252]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d109      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	e06f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058e2:	4b3b      	ldr	r3, [pc, #236]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0302 	and.w	r3, r3, #2
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e067      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058f2:	4b37      	ldr	r3, [pc, #220]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f023 0203 	bic.w	r2, r3, #3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	4934      	ldr	r1, [pc, #208]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005900:	4313      	orrs	r3, r2
 8005902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005904:	f7fd ff8c 	bl	8003820 <HAL_GetTick>
 8005908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800590a:	e00a      	b.n	8005922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800590c:	f7fd ff88 	bl	8003820 <HAL_GetTick>
 8005910:	4602      	mov	r2, r0
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	1ad3      	subs	r3, r2, r3
 8005916:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591a:	4293      	cmp	r3, r2
 800591c:	d901      	bls.n	8005922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e04f      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005922:	4b2b      	ldr	r3, [pc, #172]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f003 020c 	and.w	r2, r3, #12
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	429a      	cmp	r2, r3
 8005932:	d1eb      	bne.n	800590c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0307 	and.w	r3, r3, #7
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d20c      	bcs.n	800595c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005942:	4b22      	ldr	r3, [pc, #136]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	b2d2      	uxtb	r2, r2
 8005948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b20      	ldr	r3, [pc, #128]	@ (80059cc <HAL_RCC_ClockConfig+0x1b8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0307 	and.w	r3, r3, #7
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e032      	b.n	80059c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0304 	and.w	r3, r3, #4
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005968:	4b19      	ldr	r3, [pc, #100]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	4916      	ldr	r1, [pc, #88]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0308 	and.w	r3, r3, #8
 8005982:	2b00      	cmp	r3, #0
 8005984:	d009      	beq.n	800599a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005986:	4b12      	ldr	r3, [pc, #72]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	490e      	ldr	r1, [pc, #56]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005996:	4313      	orrs	r3, r2
 8005998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800599a:	f000 f821 	bl	80059e0 <HAL_RCC_GetSysClockFreq>
 800599e:	4602      	mov	r2, r0
 80059a0:	4b0b      	ldr	r3, [pc, #44]	@ (80059d0 <HAL_RCC_ClockConfig+0x1bc>)
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	091b      	lsrs	r3, r3, #4
 80059a6:	f003 030f 	and.w	r3, r3, #15
 80059aa:	490a      	ldr	r1, [pc, #40]	@ (80059d4 <HAL_RCC_ClockConfig+0x1c0>)
 80059ac:	5ccb      	ldrb	r3, [r1, r3]
 80059ae:	fa22 f303 	lsr.w	r3, r2, r3
 80059b2:	4a09      	ldr	r2, [pc, #36]	@ (80059d8 <HAL_RCC_ClockConfig+0x1c4>)
 80059b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80059b6:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <HAL_RCC_ClockConfig+0x1c8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f7fd fd60 	bl	8003480 <HAL_InitTick>

  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40023c00 	.word	0x40023c00
 80059d0:	40023800 	.word	0x40023800
 80059d4:	08012adc 	.word	0x08012adc
 80059d8:	20000008 	.word	0x20000008
 80059dc:	2000000c 	.word	0x2000000c

080059e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e4:	b094      	sub	sp, #80	@ 0x50
 80059e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80059ec:	2300      	movs	r3, #0
 80059ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80059f4:	2300      	movs	r3, #0
 80059f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80059f8:	4b79      	ldr	r3, [pc, #484]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	f003 030c 	and.w	r3, r3, #12
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	d00d      	beq.n	8005a20 <HAL_RCC_GetSysClockFreq+0x40>
 8005a04:	2b08      	cmp	r3, #8
 8005a06:	f200 80e1 	bhi.w	8005bcc <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d002      	beq.n	8005a14 <HAL_RCC_GetSysClockFreq+0x34>
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	d003      	beq.n	8005a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a12:	e0db      	b.n	8005bcc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a14:	4b73      	ldr	r3, [pc, #460]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a18:	e0db      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a1a:	4b73      	ldr	r3, [pc, #460]	@ (8005be8 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a1e:	e0d8      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a20:	4b6f      	ldr	r3, [pc, #444]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a2a:	4b6d      	ldr	r3, [pc, #436]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d063      	beq.n	8005afe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a36:	4b6a      	ldr	r3, [pc, #424]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	099b      	lsrs	r3, r3, #6
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	f04f 0000 	mov.w	r0, #0
 8005a5a:	f04f 0100 	mov.w	r1, #0
 8005a5e:	0159      	lsls	r1, r3, #5
 8005a60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005a64:	0150      	lsls	r0, r2, #5
 8005a66:	4602      	mov	r2, r0
 8005a68:	460b      	mov	r3, r1
 8005a6a:	4621      	mov	r1, r4
 8005a6c:	1a51      	subs	r1, r2, r1
 8005a6e:	6139      	str	r1, [r7, #16]
 8005a70:	4629      	mov	r1, r5
 8005a72:	eb63 0301 	sbc.w	r3, r3, r1
 8005a76:	617b      	str	r3, [r7, #20]
 8005a78:	f04f 0200 	mov.w	r2, #0
 8005a7c:	f04f 0300 	mov.w	r3, #0
 8005a80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a84:	4659      	mov	r1, fp
 8005a86:	018b      	lsls	r3, r1, #6
 8005a88:	4651      	mov	r1, sl
 8005a8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005a8e:	4651      	mov	r1, sl
 8005a90:	018a      	lsls	r2, r1, #6
 8005a92:	4651      	mov	r1, sl
 8005a94:	ebb2 0801 	subs.w	r8, r2, r1
 8005a98:	4659      	mov	r1, fp
 8005a9a:	eb63 0901 	sbc.w	r9, r3, r1
 8005a9e:	f04f 0200 	mov.w	r2, #0
 8005aa2:	f04f 0300 	mov.w	r3, #0
 8005aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab2:	4690      	mov	r8, r2
 8005ab4:	4699      	mov	r9, r3
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	eb18 0303 	adds.w	r3, r8, r3
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	462b      	mov	r3, r5
 8005ac0:	eb49 0303 	adc.w	r3, r9, r3
 8005ac4:	60fb      	str	r3, [r7, #12]
 8005ac6:	f04f 0200 	mov.w	r2, #0
 8005aca:	f04f 0300 	mov.w	r3, #0
 8005ace:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005ad2:	4629      	mov	r1, r5
 8005ad4:	024b      	lsls	r3, r1, #9
 8005ad6:	4621      	mov	r1, r4
 8005ad8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005adc:	4621      	mov	r1, r4
 8005ade:	024a      	lsls	r2, r1, #9
 8005ae0:	4610      	mov	r0, r2
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005aec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005af0:	f7fb f9c0 	bl	8000e74 <__aeabi_uldivmod>
 8005af4:	4602      	mov	r2, r0
 8005af6:	460b      	mov	r3, r1
 8005af8:	4613      	mov	r3, r2
 8005afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005afc:	e058      	b.n	8005bb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005afe:	4b38      	ldr	r3, [pc, #224]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	099b      	lsrs	r3, r3, #6
 8005b04:	2200      	movs	r2, #0
 8005b06:	4618      	mov	r0, r3
 8005b08:	4611      	mov	r1, r2
 8005b0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b0e:	623b      	str	r3, [r7, #32]
 8005b10:	2300      	movs	r3, #0
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b18:	4642      	mov	r2, r8
 8005b1a:	464b      	mov	r3, r9
 8005b1c:	f04f 0000 	mov.w	r0, #0
 8005b20:	f04f 0100 	mov.w	r1, #0
 8005b24:	0159      	lsls	r1, r3, #5
 8005b26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b2a:	0150      	lsls	r0, r2, #5
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
 8005b30:	4641      	mov	r1, r8
 8005b32:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b36:	4649      	mov	r1, r9
 8005b38:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b3c:	f04f 0200 	mov.w	r2, #0
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005b48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005b4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005b50:	ebb2 040a 	subs.w	r4, r2, sl
 8005b54:	eb63 050b 	sbc.w	r5, r3, fp
 8005b58:	f04f 0200 	mov.w	r2, #0
 8005b5c:	f04f 0300 	mov.w	r3, #0
 8005b60:	00eb      	lsls	r3, r5, #3
 8005b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b66:	00e2      	lsls	r2, r4, #3
 8005b68:	4614      	mov	r4, r2
 8005b6a:	461d      	mov	r5, r3
 8005b6c:	4643      	mov	r3, r8
 8005b6e:	18e3      	adds	r3, r4, r3
 8005b70:	603b      	str	r3, [r7, #0]
 8005b72:	464b      	mov	r3, r9
 8005b74:	eb45 0303 	adc.w	r3, r5, r3
 8005b78:	607b      	str	r3, [r7, #4]
 8005b7a:	f04f 0200 	mov.w	r2, #0
 8005b7e:	f04f 0300 	mov.w	r3, #0
 8005b82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005b86:	4629      	mov	r1, r5
 8005b88:	028b      	lsls	r3, r1, #10
 8005b8a:	4621      	mov	r1, r4
 8005b8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b90:	4621      	mov	r1, r4
 8005b92:	028a      	lsls	r2, r1, #10
 8005b94:	4610      	mov	r0, r2
 8005b96:	4619      	mov	r1, r3
 8005b98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	61fa      	str	r2, [r7, #28]
 8005ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba4:	f7fb f966 	bl	8000e74 <__aeabi_uldivmod>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	460b      	mov	r3, r1
 8005bac:	4613      	mov	r3, r2
 8005bae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	f003 0303 	and.w	r3, r3, #3
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005bc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bca:	e002      	b.n	8005bd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	@ (8005be4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005bce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005bd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	3750      	adds	r7, #80	@ 0x50
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bde:	bf00      	nop
 8005be0:	40023800 	.word	0x40023800
 8005be4:	00f42400 	.word	0x00f42400
 8005be8:	007a1200 	.word	0x007a1200

08005bec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bec:	b480      	push	{r7}
 8005bee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf0:	4b03      	ldr	r3, [pc, #12]	@ (8005c00 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20000008 	.word	0x20000008

08005c04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c08:	f7ff fff0 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c0c:	4602      	mov	r2, r0
 8005c0e:	4b05      	ldr	r3, [pc, #20]	@ (8005c24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	0a9b      	lsrs	r3, r3, #10
 8005c14:	f003 0307 	and.w	r3, r3, #7
 8005c18:	4903      	ldr	r1, [pc, #12]	@ (8005c28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1a:	5ccb      	ldrb	r3, [r1, r3]
 8005c1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	40023800 	.word	0x40023800
 8005c28:	08012aec 	.word	0x08012aec

08005c2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c30:	f7ff ffdc 	bl	8005bec <HAL_RCC_GetHCLKFreq>
 8005c34:	4602      	mov	r2, r0
 8005c36:	4b05      	ldr	r3, [pc, #20]	@ (8005c4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	0b5b      	lsrs	r3, r3, #13
 8005c3c:	f003 0307 	and.w	r3, r3, #7
 8005c40:	4903      	ldr	r1, [pc, #12]	@ (8005c50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c42:	5ccb      	ldrb	r3, [r1, r3]
 8005c44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	40023800 	.word	0x40023800
 8005c50:	08012aec 	.word	0x08012aec

08005c54 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	220f      	movs	r2, #15
 8005c62:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005c64:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 0203 	and.w	r2, r3, #3
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005c70:	4b0f      	ldr	r3, [pc, #60]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005c88:	4b09      	ldr	r3, [pc, #36]	@ (8005cb0 <HAL_RCC_GetClockConfig+0x5c>)
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	08db      	lsrs	r3, r3, #3
 8005c8e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005c96:	4b07      	ldr	r3, [pc, #28]	@ (8005cb4 <HAL_RCC_GetClockConfig+0x60>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f003 0207 	and.w	r2, r3, #7
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	601a      	str	r2, [r3, #0]
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	40023c00 	.word	0x40023c00

08005cb8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e07b      	b.n	8005dc2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d108      	bne.n	8005ce4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cda:	d009      	beq.n	8005cf0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	61da      	str	r2, [r3, #28]
 8005ce2:	e005      	b.n	8005cf0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2200      	movs	r2, #0
 8005cee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d106      	bne.n	8005d10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f7fd fb28 	bl	8003360 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d38:	431a      	orrs	r2, r3
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d42:	431a      	orrs	r2, r3
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	695b      	ldr	r3, [r3, #20]
 8005d52:	f003 0301 	and.w	r3, r3, #1
 8005d56:	431a      	orrs	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	699b      	ldr	r3, [r3, #24]
 8005d5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d74:	ea42 0103 	orr.w	r1, r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	0c1b      	lsrs	r3, r3, #16
 8005d8e:	f003 0104 	and.w	r1, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	f003 0210 	and.w	r2, r3, #16
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	69da      	ldr	r2, [r3, #28]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005db0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b088      	sub	sp, #32
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	603b      	str	r3, [r7, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dda:	f7fd fd21 	bl	8003820 <HAL_GetTick>
 8005dde:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d001      	beq.n	8005df4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005df0:	2302      	movs	r3, #2
 8005df2:	e12a      	b.n	800604a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0x36>
 8005dfa:	88fb      	ldrh	r3, [r7, #6]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d101      	bne.n	8005e04 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e122      	b.n	800604a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_SPI_Transmit+0x48>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	e11b      	b.n	800604a <HAL_SPI_Transmit+0x280>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e60:	d10f      	bne.n	8005e82 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e8c:	2b40      	cmp	r3, #64	@ 0x40
 8005e8e:	d007      	beq.n	8005ea0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea8:	d152      	bne.n	8005f50 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_Transmit+0xee>
 8005eb2:	8b7b      	ldrh	r3, [r7, #26]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d145      	bne.n	8005f44 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005edc:	e032      	b.n	8005f44 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d112      	bne.n	8005f12 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f10:	e018      	b.n	8005f44 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fd fc85 	bl	8003820 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <HAL_SPI_Transmit+0x160>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Transmit+0x166>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d109      	bne.n	8005f44 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e082      	b.n	800604a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1c7      	bne.n	8005ede <HAL_SPI_Transmit+0x114>
 8005f4e:	e053      	b.n	8005ff8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_Transmit+0x194>
 8005f58:	8b7b      	ldrh	r3, [r7, #26]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d147      	bne.n	8005fee <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f84:	e033      	b.n	8005fee <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d113      	bne.n	8005fbc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	330c      	adds	r3, #12
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	3b01      	subs	r3, #1
 8005fb4:	b29a      	uxth	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fba:	e018      	b.n	8005fee <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fbc:	f7fd fc30 	bl	8003820 <HAL_GetTick>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	1ad3      	subs	r3, r2, r3
 8005fc6:	683a      	ldr	r2, [r7, #0]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d803      	bhi.n	8005fd4 <HAL_SPI_Transmit+0x20a>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd2:	d102      	bne.n	8005fda <HAL_SPI_Transmit+0x210>
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d109      	bne.n	8005fee <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fea:	2303      	movs	r3, #3
 8005fec:	e02d      	b.n	800604a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d1c6      	bne.n	8005f86 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff8:	69fa      	ldr	r2, [r7, #28]
 8005ffa:	6839      	ldr	r1, [r7, #0]
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f000 fa59 	bl	80064b4 <SPI_EndRxTxTransaction>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d002      	beq.n	800600e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2220      	movs	r2, #32
 800600c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	689b      	ldr	r3, [r3, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d10a      	bne.n	800602c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006016:	2300      	movs	r3, #0
 8006018:	617b      	str	r3, [r7, #20]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	617b      	str	r3, [r7, #20]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	617b      	str	r3, [r7, #20]
 800602a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006040:	2b00      	cmp	r3, #0
 8006042:	d001      	beq.n	8006048 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	e000      	b.n	800604a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006048:	2300      	movs	r3, #0
  }
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b08a      	sub	sp, #40	@ 0x28
 8006056:	af00      	add	r7, sp, #0
 8006058:	60f8      	str	r0, [r7, #12]
 800605a:	60b9      	str	r1, [r7, #8]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006060:	2301      	movs	r3, #1
 8006062:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006064:	f7fd fbdc 	bl	8003820 <HAL_GetTick>
 8006068:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006070:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006078:	887b      	ldrh	r3, [r7, #2]
 800607a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800607c:	7ffb      	ldrb	r3, [r7, #31]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d00c      	beq.n	800609c <HAL_SPI_TransmitReceive+0x4a>
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006088:	d106      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d102      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x46>
 8006092:	7ffb      	ldrb	r3, [r7, #31]
 8006094:	2b04      	cmp	r3, #4
 8006096:	d001      	beq.n	800609c <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006098:	2302      	movs	r3, #2
 800609a:	e17f      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d005      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x5c>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_SPI_TransmitReceive+0x5c>
 80060a8:	887b      	ldrh	r3, [r7, #2]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e174      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d101      	bne.n	80060c0 <HAL_SPI_TransmitReceive+0x6e>
 80060bc:	2302      	movs	r3, #2
 80060be:	e16d      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d003      	beq.n	80060dc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2205      	movs	r2, #5
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	687a      	ldr	r2, [r7, #4]
 80060e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	887a      	ldrh	r2, [r7, #2]
 80060ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	887a      	ldrh	r2, [r7, #2]
 80060f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	68ba      	ldr	r2, [r7, #8]
 80060f8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	887a      	ldrh	r2, [r7, #2]
 80060fe:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	887a      	ldrh	r2, [r7, #2]
 8006104:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	2200      	movs	r2, #0
 8006110:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611c:	2b40      	cmp	r3, #64	@ 0x40
 800611e:	d007      	beq.n	8006130 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800612e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006138:	d17e      	bne.n	8006238 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <HAL_SPI_TransmitReceive+0xf6>
 8006142:	8afb      	ldrh	r3, [r7, #22]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d16c      	bne.n	8006222 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800614c:	881a      	ldrh	r2, [r3, #0]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006158:	1c9a      	adds	r2, r3, #2
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006162:	b29b      	uxth	r3, r3
 8006164:	3b01      	subs	r3, #1
 8006166:	b29a      	uxth	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800616c:	e059      	b.n	8006222 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b02      	cmp	r3, #2
 800617a:	d11b      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x162>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006180:	b29b      	uxth	r3, r3
 8006182:	2b00      	cmp	r3, #0
 8006184:	d016      	beq.n	80061b4 <HAL_SPI_TransmitReceive+0x162>
 8006186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006188:	2b01      	cmp	r3, #1
 800618a:	d113      	bne.n	80061b4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006190:	881a      	ldrh	r2, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800619c:	1c9a      	adds	r2, r3, #2
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	3b01      	subs	r3, #1
 80061aa:	b29a      	uxth	r2, r3
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d119      	bne.n	80061f6 <HAL_SPI_TransmitReceive+0x1a4>
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d014      	beq.n	80061f6 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68da      	ldr	r2, [r3, #12]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061d6:	b292      	uxth	r2, r2
 80061d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	1c9a      	adds	r2, r3, #2
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061e8:	b29b      	uxth	r3, r3
 80061ea:	3b01      	subs	r3, #1
 80061ec:	b29a      	uxth	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061f2:	2301      	movs	r3, #1
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80061f6:	f7fd fb13 	bl	8003820 <HAL_GetTick>
 80061fa:	4602      	mov	r2, r0
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	1ad3      	subs	r3, r2, r3
 8006200:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006202:	429a      	cmp	r2, r3
 8006204:	d80d      	bhi.n	8006222 <HAL_SPI_TransmitReceive+0x1d0>
 8006206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800620c:	d009      	beq.n	8006222 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2201      	movs	r2, #1
 8006212:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e0bc      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006226:	b29b      	uxth	r3, r3
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1a0      	bne.n	800616e <HAL_SPI_TransmitReceive+0x11c>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d19b      	bne.n	800616e <HAL_SPI_TransmitReceive+0x11c>
 8006236:	e082      	b.n	800633e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d002      	beq.n	8006246 <HAL_SPI_TransmitReceive+0x1f4>
 8006240:	8afb      	ldrh	r3, [r7, #22]
 8006242:	2b01      	cmp	r3, #1
 8006244:	d171      	bne.n	800632a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	330c      	adds	r3, #12
 8006250:	7812      	ldrb	r2, [r2, #0]
 8006252:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006262:	b29b      	uxth	r3, r3
 8006264:	3b01      	subs	r3, #1
 8006266:	b29a      	uxth	r2, r3
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800626c:	e05d      	b.n	800632a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	689b      	ldr	r3, [r3, #8]
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b02      	cmp	r3, #2
 800627a:	d11c      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x264>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	d017      	beq.n	80062b6 <HAL_SPI_TransmitReceive+0x264>
 8006286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006288:	2b01      	cmp	r3, #1
 800628a:	d114      	bne.n	80062b6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	330c      	adds	r3, #12
 8006296:	7812      	ldrb	r2, [r2, #0]
 8006298:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f003 0301 	and.w	r3, r3, #1
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d119      	bne.n	80062f8 <HAL_SPI_TransmitReceive+0x2a6>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d014      	beq.n	80062f8 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68da      	ldr	r2, [r3, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3b01      	subs	r3, #1
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80062f4:	2301      	movs	r3, #1
 80062f6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80062f8:	f7fd fa92 	bl	8003820 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006304:	429a      	cmp	r2, r3
 8006306:	d803      	bhi.n	8006310 <HAL_SPI_TransmitReceive+0x2be>
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800630e:	d102      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x2c4>
 8006310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006312:	2b00      	cmp	r3, #0
 8006314:	d109      	bne.n	800632a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2201      	movs	r2, #1
 800631a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2200      	movs	r2, #0
 8006322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e038      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800632e:	b29b      	uxth	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	d19c      	bne.n	800626e <HAL_SPI_TransmitReceive+0x21c>
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006338:	b29b      	uxth	r3, r3
 800633a:	2b00      	cmp	r3, #0
 800633c:	d197      	bne.n	800626e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800633e:	6a3a      	ldr	r2, [r7, #32]
 8006340:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f8b6 	bl	80064b4 <SPI_EndRxTxTransaction>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2220      	movs	r2, #32
 8006352:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e01d      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10a      	bne.n	800637e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006368:	2300      	movs	r3, #0
 800636a:	613b      	str	r3, [r7, #16]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	613b      	str	r3, [r7, #16]
 800637c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e000      	b.n	800639c <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800639a:	2300      	movs	r3, #0
  }
}
 800639c:	4618      	mov	r0, r3
 800639e:	3728      	adds	r7, #40	@ 0x28
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b088      	sub	sp, #32
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80063b4:	f7fd fa34 	bl	8003820 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	683a      	ldr	r2, [r7, #0]
 80063c0:	4413      	add	r3, r2
 80063c2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80063c4:	f7fd fa2c 	bl	8003820 <HAL_GetTick>
 80063c8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80063ca:	4b39      	ldr	r3, [pc, #228]	@ (80064b0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	015b      	lsls	r3, r3, #5
 80063d0:	0d1b      	lsrs	r3, r3, #20
 80063d2:	69fa      	ldr	r2, [r7, #28]
 80063d4:	fb02 f303 	mul.w	r3, r2, r3
 80063d8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063da:	e055      	b.n	8006488 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063e2:	d051      	beq.n	8006488 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80063e4:	f7fd fa1c 	bl	8003820 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d902      	bls.n	80063fa <SPI_WaitFlagStateUntilTimeout+0x56>
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d13d      	bne.n	8006476 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006408:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006412:	d111      	bne.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800641c:	d004      	beq.n	8006428 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006426:	d107      	bne.n	8006438 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006436:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800643c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006440:	d10f      	bne.n	8006462 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006460:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006472:	2303      	movs	r3, #3
 8006474:	e018      	b.n	80064a8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d102      	bne.n	8006482 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e002      	b.n	8006488 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	3b01      	subs	r3, #1
 8006486:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4013      	ands	r3, r2
 8006492:	68ba      	ldr	r2, [r7, #8]
 8006494:	429a      	cmp	r2, r3
 8006496:	bf0c      	ite	eq
 8006498:	2301      	moveq	r3, #1
 800649a:	2300      	movne	r3, #0
 800649c:	b2db      	uxtb	r3, r3
 800649e:	461a      	mov	r2, r3
 80064a0:	79fb      	ldrb	r3, [r7, #7]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d19a      	bne.n	80063dc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80064a6:	2300      	movs	r3, #0
}
 80064a8:	4618      	mov	r0, r3
 80064aa:	3720      	adds	r7, #32
 80064ac:	46bd      	mov	sp, r7
 80064ae:	bd80      	pop	{r7, pc}
 80064b0:	20000008 	.word	0x20000008

080064b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	60b9      	str	r1, [r7, #8]
 80064be:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	9300      	str	r3, [sp, #0]
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2201      	movs	r2, #1
 80064c8:	2102      	movs	r1, #2
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f7ff ff6a 	bl	80063a4 <SPI_WaitFlagStateUntilTimeout>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064da:	f043 0220 	orr.w	r2, r3, #32
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e032      	b.n	800654c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006554 <SPI_EndRxTxTransaction+0xa0>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1b      	ldr	r2, [pc, #108]	@ (8006558 <SPI_EndRxTxTransaction+0xa4>)
 80064ec:	fba2 2303 	umull	r2, r3, r2, r3
 80064f0:	0d5b      	lsrs	r3, r3, #21
 80064f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80064f6:	fb02 f303 	mul.w	r3, r2, r3
 80064fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006504:	d112      	bne.n	800652c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	9300      	str	r3, [sp, #0]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2200      	movs	r2, #0
 800650e:	2180      	movs	r1, #128	@ 0x80
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f7ff ff47 	bl	80063a4 <SPI_WaitFlagStateUntilTimeout>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d016      	beq.n	800654a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006520:	f043 0220 	orr.w	r2, r3, #32
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e00f      	b.n	800654c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	3b01      	subs	r3, #1
 8006536:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006542:	2b80      	cmp	r3, #128	@ 0x80
 8006544:	d0f2      	beq.n	800652c <SPI_EndRxTxTransaction+0x78>
 8006546:	e000      	b.n	800654a <SPI_EndRxTxTransaction+0x96>
        break;
 8006548:	bf00      	nop
  }

  return HAL_OK;
 800654a:	2300      	movs	r3, #0
}
 800654c:	4618      	mov	r0, r3
 800654e:	3718      	adds	r7, #24
 8006550:	46bd      	mov	sp, r7
 8006552:	bd80      	pop	{r7, pc}
 8006554:	20000008 	.word	0x20000008
 8006558:	165e9f81 	.word	0x165e9f81

0800655c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b082      	sub	sp, #8
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d101      	bne.n	800656e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e041      	b.n	80065f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006574:	b2db      	uxtb	r3, r3
 8006576:	2b00      	cmp	r3, #0
 8006578:	d106      	bne.n	8006588 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 f839 	bl	80065fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	2202      	movs	r2, #2
 800658c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681a      	ldr	r2, [r3, #0]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	3304      	adds	r3, #4
 8006598:	4619      	mov	r1, r3
 800659a:	4610      	mov	r0, r2
 800659c:	f000 f9b2 	bl	8006904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2201      	movs	r2, #1
 80065cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2201      	movs	r2, #1
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2201      	movs	r2, #1
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80065f0:	2300      	movs	r3, #0
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
	...

08006610 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800661e:	b2db      	uxtb	r3, r3
 8006620:	2b01      	cmp	r3, #1
 8006622:	d001      	beq.n	8006628 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e044      	b.n	80066b2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f042 0201 	orr.w	r2, r2, #1
 800663e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a1e      	ldr	r2, [pc, #120]	@ (80066c0 <HAL_TIM_Base_Start_IT+0xb0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d018      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006652:	d013      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a1a      	ldr	r2, [pc, #104]	@ (80066c4 <HAL_TIM_Base_Start_IT+0xb4>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d00e      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a19      	ldr	r2, [pc, #100]	@ (80066c8 <HAL_TIM_Base_Start_IT+0xb8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d009      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <HAL_TIM_Base_Start_IT+0xbc>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <HAL_TIM_Base_Start_IT+0x6c>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <HAL_TIM_Base_Start_IT+0xc0>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d111      	bne.n	80066a0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	f003 0307 	and.w	r3, r3, #7
 8006686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2b06      	cmp	r3, #6
 800668c:	d010      	beq.n	80066b0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681a      	ldr	r2, [r3, #0]
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0201 	orr.w	r2, r2, #1
 800669c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	e007      	b.n	80066b0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0201 	orr.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40014000 	.word	0x40014000

080066d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d020      	beq.n	8006738 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f003 0302 	and.w	r3, r3, #2
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01b      	beq.n	8006738 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f06f 0202 	mvn.w	r2, #2
 8006708:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 f8d2 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006724:	e005      	b.n	8006732 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f000 f8c4 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f000 f8d5 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f003 0304 	and.w	r3, r3, #4
 800673e:	2b00      	cmp	r3, #0
 8006740:	d020      	beq.n	8006784 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d01b      	beq.n	8006784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f06f 0204 	mvn.w	r2, #4
 8006754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006766:	2b00      	cmp	r3, #0
 8006768:	d003      	beq.n	8006772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 f8ac 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006770:	e005      	b.n	800677e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f89e 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f8af 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f003 0308 	and.w	r3, r3, #8
 800678a:	2b00      	cmp	r3, #0
 800678c:	d020      	beq.n	80067d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f003 0308 	and.w	r3, r3, #8
 8006794:	2b00      	cmp	r3, #0
 8006796:	d01b      	beq.n	80067d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f06f 0208 	mvn.w	r2, #8
 80067a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2204      	movs	r2, #4
 80067a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69db      	ldr	r3, [r3, #28]
 80067ae:	f003 0303 	and.w	r3, r3, #3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d003      	beq.n	80067be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f886 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 80067bc:	e005      	b.n	80067ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f878 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 f889 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f003 0310 	and.w	r3, r3, #16
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d020      	beq.n	800681c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d01b      	beq.n	800681c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f06f 0210 	mvn.w	r2, #16
 80067ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2208      	movs	r2, #8
 80067f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 f860 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006808:	e005      	b.n	8006816 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f852 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 f863 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00c      	beq.n	8006840 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f003 0301 	and.w	r3, r3, #1
 800682c:	2b00      	cmp	r3, #0
 800682e:	d007      	beq.n	8006840 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f06f 0201 	mvn.w	r2, #1
 8006838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f7fb f870 	bl	8001920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00c      	beq.n	8006864 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006850:	2b00      	cmp	r3, #0
 8006852:	d007      	beq.n	8006864 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800685c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8e0 	bl	8006a24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f834 	bl	80068f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	f003 0320 	and.w	r3, r3, #32
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f003 0320 	and.w	r3, r3, #32
 8006898:	2b00      	cmp	r3, #0
 800689a:	d007      	beq.n	80068ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f06f 0220 	mvn.w	r2, #32
 80068a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f8b2 	bl	8006a10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068ac:	bf00      	nop
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a37      	ldr	r2, [pc, #220]	@ (80069f4 <TIM_Base_SetConfig+0xf0>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00f      	beq.n	800693c <TIM_Base_SetConfig+0x38>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006922:	d00b      	beq.n	800693c <TIM_Base_SetConfig+0x38>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a34      	ldr	r2, [pc, #208]	@ (80069f8 <TIM_Base_SetConfig+0xf4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d007      	beq.n	800693c <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a33      	ldr	r2, [pc, #204]	@ (80069fc <TIM_Base_SetConfig+0xf8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d003      	beq.n	800693c <TIM_Base_SetConfig+0x38>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a32      	ldr	r2, [pc, #200]	@ (8006a00 <TIM_Base_SetConfig+0xfc>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d108      	bne.n	800694e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	4313      	orrs	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a28      	ldr	r2, [pc, #160]	@ (80069f4 <TIM_Base_SetConfig+0xf0>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d01b      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800695c:	d017      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a25      	ldr	r2, [pc, #148]	@ (80069f8 <TIM_Base_SetConfig+0xf4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d013      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a24      	ldr	r2, [pc, #144]	@ (80069fc <TIM_Base_SetConfig+0xf8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00f      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a23      	ldr	r2, [pc, #140]	@ (8006a00 <TIM_Base_SetConfig+0xfc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00b      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a22      	ldr	r2, [pc, #136]	@ (8006a04 <TIM_Base_SetConfig+0x100>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d007      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a21      	ldr	r2, [pc, #132]	@ (8006a08 <TIM_Base_SetConfig+0x104>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d003      	beq.n	800698e <TIM_Base_SetConfig+0x8a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a20      	ldr	r2, [pc, #128]	@ (8006a0c <TIM_Base_SetConfig+0x108>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d108      	bne.n	80069a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006994:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	4313      	orrs	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	689a      	ldr	r2, [r3, #8]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a0c      	ldr	r2, [pc, #48]	@ (80069f4 <TIM_Base_SetConfig+0xf0>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d103      	bne.n	80069ce <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	691a      	ldr	r2, [r3, #16]
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f043 0204 	orr.w	r2, r3, #4
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2201      	movs	r2, #1
 80069de:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	601a      	str	r2, [r3, #0]
}
 80069e6:	bf00      	nop
 80069e8:	3714      	adds	r7, #20
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	40010000 	.word	0x40010000
 80069f8:	40000400 	.word	0x40000400
 80069fc:	40000800 	.word	0x40000800
 8006a00:	40000c00 	.word	0x40000c00
 8006a04:	40014000 	.word	0x40014000
 8006a08:	40014400 	.word	0x40014400
 8006a0c:	40014800 	.word	0x40014800

08006a10 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e042      	b.n	8006ad0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d106      	bne.n	8006a64 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7fc fcc6 	bl	80033f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2224      	movs	r2, #36	@ 0x24
 8006a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68da      	ldr	r2, [r3, #12]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a7a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f973 	bl	8006d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a90:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	695a      	ldr	r2, [r3, #20]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006aa0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68da      	ldr	r2, [r3, #12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ab0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08a      	sub	sp, #40	@ 0x28
 8006adc:	af02      	add	r7, sp, #8
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	603b      	str	r3, [r7, #0]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d175      	bne.n	8006be4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <HAL_UART_Transmit+0x2c>
 8006afe:	88fb      	ldrh	r3, [r7, #6]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e06e      	b.n	8006be6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	2221      	movs	r2, #33	@ 0x21
 8006b12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006b16:	f7fc fe83 	bl	8003820 <HAL_GetTick>
 8006b1a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	88fa      	ldrh	r2, [r7, #6]
 8006b20:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	88fa      	ldrh	r2, [r7, #6]
 8006b26:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b30:	d108      	bne.n	8006b44 <HAL_UART_Transmit+0x6c>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	e003      	b.n	8006b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006b4c:	e02e      	b.n	8006bac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	2200      	movs	r2, #0
 8006b56:	2180      	movs	r1, #128	@ 0x80
 8006b58:	68f8      	ldr	r0, [r7, #12]
 8006b5a:	f000 f848 	bl	8006bee <UART_WaitOnFlagUntilTimeout>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006b6c:	2303      	movs	r3, #3
 8006b6e:	e03a      	b.n	8006be6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006b70:	69fb      	ldr	r3, [r7, #28]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d10b      	bne.n	8006b8e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b84:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	3302      	adds	r3, #2
 8006b8a:	61bb      	str	r3, [r7, #24]
 8006b8c:	e007      	b.n	8006b9e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b8e:	69fb      	ldr	r3, [r7, #28]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b01      	subs	r3, #1
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1cb      	bne.n	8006b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2140      	movs	r1, #64	@ 0x40
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f814 	bl	8006bee <UART_WaitOnFlagUntilTimeout>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006bd4:	2303      	movs	r3, #3
 8006bd6:	e006      	b.n	8006be6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e000      	b.n	8006be6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006be4:	2302      	movs	r3, #2
  }
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b086      	sub	sp, #24
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	60f8      	str	r0, [r7, #12]
 8006bf6:	60b9      	str	r1, [r7, #8]
 8006bf8:	603b      	str	r3, [r7, #0]
 8006bfa:	4613      	mov	r3, r2
 8006bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bfe:	e03b      	b.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c06:	d037      	beq.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c08:	f7fc fe0a 	bl	8003820 <HAL_GetTick>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d302      	bcc.n	8006c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e03a      	b.n	8006c98 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0304 	and.w	r3, r3, #4
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d023      	beq.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	2b80      	cmp	r3, #128	@ 0x80
 8006c34:	d020      	beq.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2b40      	cmp	r3, #64	@ 0x40
 8006c3a:	d01d      	beq.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0308 	and.w	r3, r3, #8
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d116      	bne.n	8006c78 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f000 f81d 	bl	8006ca0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2208      	movs	r2, #8
 8006c6a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c74:	2301      	movs	r3, #1
 8006c76:	e00f      	b.n	8006c98 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	4013      	ands	r3, r2
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	bf0c      	ite	eq
 8006c88:	2301      	moveq	r3, #1
 8006c8a:	2300      	movne	r3, #0
 8006c8c:	b2db      	uxtb	r3, r3
 8006c8e:	461a      	mov	r2, r3
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d0b4      	beq.n	8006c00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c96:	2300      	movs	r3, #0
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b095      	sub	sp, #84	@ 0x54
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	330c      	adds	r3, #12
 8006cae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	330c      	adds	r3, #12
 8006cc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cc8:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ccc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cd0:	e841 2300 	strex	r3, r2, [r1]
 8006cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d1e5      	bne.n	8006ca8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	3314      	adds	r3, #20
 8006ce2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	e853 3f00 	ldrex	r3, [r3]
 8006cea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f023 0301 	bic.w	r3, r3, #1
 8006cf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	3314      	adds	r3, #20
 8006cfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d04:	e841 2300 	strex	r3, r2, [r1]
 8006d08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d1e5      	bne.n	8006cdc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d119      	bne.n	8006d4c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	e853 3f00 	ldrex	r3, [r3]
 8006d26:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	f023 0310 	bic.w	r3, r3, #16
 8006d2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	330c      	adds	r3, #12
 8006d36:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d38:	61ba      	str	r2, [r7, #24]
 8006d3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d3c:	6979      	ldr	r1, [r7, #20]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	e841 2300 	strex	r3, r2, [r1]
 8006d44:	613b      	str	r3, [r7, #16]
   return(result);
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d1e5      	bne.n	8006d18 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d5a:	bf00      	nop
 8006d5c:	3754      	adds	r7, #84	@ 0x54
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr
	...

08006d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d6c:	b0c0      	sub	sp, #256	@ 0x100
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d84:	68d9      	ldr	r1, [r3, #12]
 8006d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	ea40 0301 	orr.w	r3, r0, r1
 8006d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d96:	689a      	ldr	r2, [r3, #8]
 8006d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	431a      	orrs	r2, r3
 8006da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da4:	695b      	ldr	r3, [r3, #20]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dac:	69db      	ldr	r3, [r3, #28]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006dc0:	f021 010c 	bic.w	r1, r1, #12
 8006dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de2:	6999      	ldr	r1, [r3, #24]
 8006de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	ea40 0301 	orr.w	r3, r0, r1
 8006dee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	681a      	ldr	r2, [r3, #0]
 8006df6:	4b8f      	ldr	r3, [pc, #572]	@ (8007034 <UART_SetConfig+0x2cc>)
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d005      	beq.n	8006e08 <UART_SetConfig+0xa0>
 8006dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	4b8d      	ldr	r3, [pc, #564]	@ (8007038 <UART_SetConfig+0x2d0>)
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d104      	bne.n	8006e12 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006e08:	f7fe ff10 	bl	8005c2c <HAL_RCC_GetPCLK2Freq>
 8006e0c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006e10:	e003      	b.n	8006e1a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006e12:	f7fe fef7 	bl	8005c04 <HAL_RCC_GetPCLK1Freq>
 8006e16:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e24:	f040 810c 	bne.w	8007040 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006e32:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006e36:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006e3a:	4622      	mov	r2, r4
 8006e3c:	462b      	mov	r3, r5
 8006e3e:	1891      	adds	r1, r2, r2
 8006e40:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006e42:	415b      	adcs	r3, r3
 8006e44:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e46:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	eb12 0801 	adds.w	r8, r2, r1
 8006e50:	4629      	mov	r1, r5
 8006e52:	eb43 0901 	adc.w	r9, r3, r1
 8006e56:	f04f 0200 	mov.w	r2, #0
 8006e5a:	f04f 0300 	mov.w	r3, #0
 8006e5e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e62:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e66:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e6a:	4690      	mov	r8, r2
 8006e6c:	4699      	mov	r9, r3
 8006e6e:	4623      	mov	r3, r4
 8006e70:	eb18 0303 	adds.w	r3, r8, r3
 8006e74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006e78:	462b      	mov	r3, r5
 8006e7a:	eb49 0303 	adc.w	r3, r9, r3
 8006e7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e86:	685b      	ldr	r3, [r3, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006e8e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006e92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006e96:	460b      	mov	r3, r1
 8006e98:	18db      	adds	r3, r3, r3
 8006e9a:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	eb42 0303 	adc.w	r3, r2, r3
 8006ea2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ea4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006ea8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006eac:	f7f9 ffe2 	bl	8000e74 <__aeabi_uldivmod>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4b61      	ldr	r3, [pc, #388]	@ (800703c <UART_SetConfig+0x2d4>)
 8006eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	011c      	lsls	r4, r3, #4
 8006ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006ec8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006ecc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006ed0:	4642      	mov	r2, r8
 8006ed2:	464b      	mov	r3, r9
 8006ed4:	1891      	adds	r1, r2, r2
 8006ed6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006ed8:	415b      	adcs	r3, r3
 8006eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006edc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006ee0:	4641      	mov	r1, r8
 8006ee2:	eb12 0a01 	adds.w	sl, r2, r1
 8006ee6:	4649      	mov	r1, r9
 8006ee8:	eb43 0b01 	adc.w	fp, r3, r1
 8006eec:	f04f 0200 	mov.w	r2, #0
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ef8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006f00:	4692      	mov	sl, r2
 8006f02:	469b      	mov	fp, r3
 8006f04:	4643      	mov	r3, r8
 8006f06:	eb1a 0303 	adds.w	r3, sl, r3
 8006f0a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006f0e:	464b      	mov	r3, r9
 8006f10:	eb4b 0303 	adc.w	r3, fp, r3
 8006f14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006f24:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006f28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	18db      	adds	r3, r3, r3
 8006f30:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f32:	4613      	mov	r3, r2
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006f42:	f7f9 ff97 	bl	8000e74 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	4b3b      	ldr	r3, [pc, #236]	@ (800703c <UART_SetConfig+0x2d4>)
 8006f4e:	fba3 2301 	umull	r2, r3, r3, r1
 8006f52:	095b      	lsrs	r3, r3, #5
 8006f54:	2264      	movs	r2, #100	@ 0x64
 8006f56:	fb02 f303 	mul.w	r3, r2, r3
 8006f5a:	1acb      	subs	r3, r1, r3
 8006f5c:	00db      	lsls	r3, r3, #3
 8006f5e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006f62:	4b36      	ldr	r3, [pc, #216]	@ (800703c <UART_SetConfig+0x2d4>)
 8006f64:	fba3 2302 	umull	r2, r3, r3, r2
 8006f68:	095b      	lsrs	r3, r3, #5
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f70:	441c      	add	r4, r3
 8006f72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f76:	2200      	movs	r2, #0
 8006f78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006f7c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006f80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006f84:	4642      	mov	r2, r8
 8006f86:	464b      	mov	r3, r9
 8006f88:	1891      	adds	r1, r2, r2
 8006f8a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006f8c:	415b      	adcs	r3, r3
 8006f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006f94:	4641      	mov	r1, r8
 8006f96:	1851      	adds	r1, r2, r1
 8006f98:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	414b      	adcs	r3, r1
 8006f9e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fa0:	f04f 0200 	mov.w	r2, #0
 8006fa4:	f04f 0300 	mov.w	r3, #0
 8006fa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006fac:	4659      	mov	r1, fp
 8006fae:	00cb      	lsls	r3, r1, #3
 8006fb0:	4651      	mov	r1, sl
 8006fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fb6:	4651      	mov	r1, sl
 8006fb8:	00ca      	lsls	r2, r1, #3
 8006fba:	4610      	mov	r0, r2
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4642      	mov	r2, r8
 8006fc2:	189b      	adds	r3, r3, r2
 8006fc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006fc8:	464b      	mov	r3, r9
 8006fca:	460a      	mov	r2, r1
 8006fcc:	eb42 0303 	adc.w	r3, r2, r3
 8006fd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006fe0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006fe8:	460b      	mov	r3, r1
 8006fea:	18db      	adds	r3, r3, r3
 8006fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fee:	4613      	mov	r3, r2
 8006ff0:	eb42 0303 	adc.w	r3, r2, r3
 8006ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ff6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ffa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006ffe:	f7f9 ff39 	bl	8000e74 <__aeabi_uldivmod>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <UART_SetConfig+0x2d4>)
 8007008:	fba3 1302 	umull	r1, r3, r3, r2
 800700c:	095b      	lsrs	r3, r3, #5
 800700e:	2164      	movs	r1, #100	@ 0x64
 8007010:	fb01 f303 	mul.w	r3, r1, r3
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	3332      	adds	r3, #50	@ 0x32
 800701a:	4a08      	ldr	r2, [pc, #32]	@ (800703c <UART_SetConfig+0x2d4>)
 800701c:	fba2 2303 	umull	r2, r3, r2, r3
 8007020:	095b      	lsrs	r3, r3, #5
 8007022:	f003 0207 	and.w	r2, r3, #7
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4422      	add	r2, r4
 800702e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007030:	e106      	b.n	8007240 <UART_SetConfig+0x4d8>
 8007032:	bf00      	nop
 8007034:	40011000 	.word	0x40011000
 8007038:	40011400 	.word	0x40011400
 800703c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007044:	2200      	movs	r2, #0
 8007046:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800704a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800704e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007052:	4642      	mov	r2, r8
 8007054:	464b      	mov	r3, r9
 8007056:	1891      	adds	r1, r2, r2
 8007058:	6239      	str	r1, [r7, #32]
 800705a:	415b      	adcs	r3, r3
 800705c:	627b      	str	r3, [r7, #36]	@ 0x24
 800705e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007062:	4641      	mov	r1, r8
 8007064:	1854      	adds	r4, r2, r1
 8007066:	4649      	mov	r1, r9
 8007068:	eb43 0501 	adc.w	r5, r3, r1
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	f04f 0300 	mov.w	r3, #0
 8007074:	00eb      	lsls	r3, r5, #3
 8007076:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800707a:	00e2      	lsls	r2, r4, #3
 800707c:	4614      	mov	r4, r2
 800707e:	461d      	mov	r5, r3
 8007080:	4643      	mov	r3, r8
 8007082:	18e3      	adds	r3, r4, r3
 8007084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007088:	464b      	mov	r3, r9
 800708a:	eb45 0303 	adc.w	r3, r5, r3
 800708e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800709e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80070a2:	f04f 0200 	mov.w	r2, #0
 80070a6:	f04f 0300 	mov.w	r3, #0
 80070aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80070ae:	4629      	mov	r1, r5
 80070b0:	008b      	lsls	r3, r1, #2
 80070b2:	4621      	mov	r1, r4
 80070b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070b8:	4621      	mov	r1, r4
 80070ba:	008a      	lsls	r2, r1, #2
 80070bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80070c0:	f7f9 fed8 	bl	8000e74 <__aeabi_uldivmod>
 80070c4:	4602      	mov	r2, r0
 80070c6:	460b      	mov	r3, r1
 80070c8:	4b60      	ldr	r3, [pc, #384]	@ (800724c <UART_SetConfig+0x4e4>)
 80070ca:	fba3 2302 	umull	r2, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	011c      	lsls	r4, r3, #4
 80070d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070d6:	2200      	movs	r2, #0
 80070d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80070dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80070e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80070e4:	4642      	mov	r2, r8
 80070e6:	464b      	mov	r3, r9
 80070e8:	1891      	adds	r1, r2, r2
 80070ea:	61b9      	str	r1, [r7, #24]
 80070ec:	415b      	adcs	r3, r3
 80070ee:	61fb      	str	r3, [r7, #28]
 80070f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80070f4:	4641      	mov	r1, r8
 80070f6:	1851      	adds	r1, r2, r1
 80070f8:	6139      	str	r1, [r7, #16]
 80070fa:	4649      	mov	r1, r9
 80070fc:	414b      	adcs	r3, r1
 80070fe:	617b      	str	r3, [r7, #20]
 8007100:	f04f 0200 	mov.w	r2, #0
 8007104:	f04f 0300 	mov.w	r3, #0
 8007108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800710c:	4659      	mov	r1, fp
 800710e:	00cb      	lsls	r3, r1, #3
 8007110:	4651      	mov	r1, sl
 8007112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007116:	4651      	mov	r1, sl
 8007118:	00ca      	lsls	r2, r1, #3
 800711a:	4610      	mov	r0, r2
 800711c:	4619      	mov	r1, r3
 800711e:	4603      	mov	r3, r0
 8007120:	4642      	mov	r2, r8
 8007122:	189b      	adds	r3, r3, r2
 8007124:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007128:	464b      	mov	r3, r9
 800712a:	460a      	mov	r2, r1
 800712c:	eb42 0303 	adc.w	r3, r2, r3
 8007130:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800713e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007140:	f04f 0200 	mov.w	r2, #0
 8007144:	f04f 0300 	mov.w	r3, #0
 8007148:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800714c:	4649      	mov	r1, r9
 800714e:	008b      	lsls	r3, r1, #2
 8007150:	4641      	mov	r1, r8
 8007152:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007156:	4641      	mov	r1, r8
 8007158:	008a      	lsls	r2, r1, #2
 800715a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800715e:	f7f9 fe89 	bl	8000e74 <__aeabi_uldivmod>
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	4611      	mov	r1, r2
 8007168:	4b38      	ldr	r3, [pc, #224]	@ (800724c <UART_SetConfig+0x4e4>)
 800716a:	fba3 2301 	umull	r2, r3, r3, r1
 800716e:	095b      	lsrs	r3, r3, #5
 8007170:	2264      	movs	r2, #100	@ 0x64
 8007172:	fb02 f303 	mul.w	r3, r2, r3
 8007176:	1acb      	subs	r3, r1, r3
 8007178:	011b      	lsls	r3, r3, #4
 800717a:	3332      	adds	r3, #50	@ 0x32
 800717c:	4a33      	ldr	r2, [pc, #204]	@ (800724c <UART_SetConfig+0x4e4>)
 800717e:	fba2 2303 	umull	r2, r3, r2, r3
 8007182:	095b      	lsrs	r3, r3, #5
 8007184:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007188:	441c      	add	r4, r3
 800718a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800718e:	2200      	movs	r2, #0
 8007190:	673b      	str	r3, [r7, #112]	@ 0x70
 8007192:	677a      	str	r2, [r7, #116]	@ 0x74
 8007194:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007198:	4642      	mov	r2, r8
 800719a:	464b      	mov	r3, r9
 800719c:	1891      	adds	r1, r2, r2
 800719e:	60b9      	str	r1, [r7, #8]
 80071a0:	415b      	adcs	r3, r3
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071a8:	4641      	mov	r1, r8
 80071aa:	1851      	adds	r1, r2, r1
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	4649      	mov	r1, r9
 80071b0:	414b      	adcs	r3, r1
 80071b2:	607b      	str	r3, [r7, #4]
 80071b4:	f04f 0200 	mov.w	r2, #0
 80071b8:	f04f 0300 	mov.w	r3, #0
 80071bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80071c0:	4659      	mov	r1, fp
 80071c2:	00cb      	lsls	r3, r1, #3
 80071c4:	4651      	mov	r1, sl
 80071c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071ca:	4651      	mov	r1, sl
 80071cc:	00ca      	lsls	r2, r1, #3
 80071ce:	4610      	mov	r0, r2
 80071d0:	4619      	mov	r1, r3
 80071d2:	4603      	mov	r3, r0
 80071d4:	4642      	mov	r2, r8
 80071d6:	189b      	adds	r3, r3, r2
 80071d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80071da:	464b      	mov	r3, r9
 80071dc:	460a      	mov	r2, r1
 80071de:	eb42 0303 	adc.w	r3, r2, r3
 80071e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80071ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80071f0:	f04f 0200 	mov.w	r2, #0
 80071f4:	f04f 0300 	mov.w	r3, #0
 80071f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80071fc:	4649      	mov	r1, r9
 80071fe:	008b      	lsls	r3, r1, #2
 8007200:	4641      	mov	r1, r8
 8007202:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007206:	4641      	mov	r1, r8
 8007208:	008a      	lsls	r2, r1, #2
 800720a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800720e:	f7f9 fe31 	bl	8000e74 <__aeabi_uldivmod>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4b0d      	ldr	r3, [pc, #52]	@ (800724c <UART_SetConfig+0x4e4>)
 8007218:	fba3 1302 	umull	r1, r3, r3, r2
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	2164      	movs	r1, #100	@ 0x64
 8007220:	fb01 f303 	mul.w	r3, r1, r3
 8007224:	1ad3      	subs	r3, r2, r3
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	3332      	adds	r3, #50	@ 0x32
 800722a:	4a08      	ldr	r2, [pc, #32]	@ (800724c <UART_SetConfig+0x4e4>)
 800722c:	fba2 2303 	umull	r2, r3, r2, r3
 8007230:	095b      	lsrs	r3, r3, #5
 8007232:	f003 020f 	and.w	r2, r3, #15
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	4422      	add	r2, r4
 800723e:	609a      	str	r2, [r3, #8]
}
 8007240:	bf00      	nop
 8007242:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007246:	46bd      	mov	sp, r7
 8007248:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800724c:	51eb851f 	.word	0x51eb851f

08007250 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007250:	b480      	push	{r7}
 8007252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007254:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007256:	4618      	mov	r0, r3
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	4603      	mov	r3, r0
 8007268:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800726a:	79fb      	ldrb	r3, [r7, #7]
 800726c:	4a08      	ldr	r2, [pc, #32]	@ (8007290 <disk_status+0x30>)
 800726e:	009b      	lsls	r3, r3, #2
 8007270:	4413      	add	r3, r2
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	79fa      	ldrb	r2, [r7, #7]
 8007278:	4905      	ldr	r1, [pc, #20]	@ (8007290 <disk_status+0x30>)
 800727a:	440a      	add	r2, r1
 800727c:	7a12      	ldrb	r2, [r2, #8]
 800727e:	4610      	mov	r0, r2
 8007280:	4798      	blx	r3
 8007282:	4603      	mov	r3, r0
 8007284:	73fb      	strb	r3, [r7, #15]
  return stat;
 8007286:	7bfb      	ldrb	r3, [r7, #15]
}
 8007288:	4618      	mov	r0, r3
 800728a:	3710      	adds	r7, #16
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	20000a00 	.word	0x20000a00

08007294 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	4603      	mov	r3, r0
 800729c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800729e:	2300      	movs	r3, #0
 80072a0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	4a0e      	ldr	r2, [pc, #56]	@ (80072e0 <disk_initialize+0x4c>)
 80072a6:	5cd3      	ldrb	r3, [r2, r3]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d114      	bne.n	80072d6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80072ac:	79fb      	ldrb	r3, [r7, #7]
 80072ae:	4a0c      	ldr	r2, [pc, #48]	@ (80072e0 <disk_initialize+0x4c>)
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	79fa      	ldrb	r2, [r7, #7]
 80072ba:	4909      	ldr	r1, [pc, #36]	@ (80072e0 <disk_initialize+0x4c>)
 80072bc:	440a      	add	r2, r1
 80072be:	7a12      	ldrb	r2, [r2, #8]
 80072c0:	4610      	mov	r0, r2
 80072c2:	4798      	blx	r3
 80072c4:	4603      	mov	r3, r0
 80072c6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d103      	bne.n	80072d6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80072ce:	79fb      	ldrb	r3, [r7, #7]
 80072d0:	4a03      	ldr	r2, [pc, #12]	@ (80072e0 <disk_initialize+0x4c>)
 80072d2:	2101      	movs	r1, #1
 80072d4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	20000a00 	.word	0x20000a00

080072e4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b087      	sub	sp, #28
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
 80072ee:	603b      	str	r3, [r7, #0]
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	4a0a      	ldr	r2, [pc, #40]	@ (8007320 <disk_read+0x3c>)
 80072f8:	009b      	lsls	r3, r3, #2
 80072fa:	4413      	add	r3, r2
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	689c      	ldr	r4, [r3, #8]
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	4a07      	ldr	r2, [pc, #28]	@ (8007320 <disk_read+0x3c>)
 8007304:	4413      	add	r3, r2
 8007306:	7a18      	ldrb	r0, [r3, #8]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	687a      	ldr	r2, [r7, #4]
 800730c:	68b9      	ldr	r1, [r7, #8]
 800730e:	47a0      	blx	r4
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
  return res;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
}
 8007316:	4618      	mov	r0, r3
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	bd90      	pop	{r4, r7, pc}
 800731e:	bf00      	nop
 8007320:	20000a00 	.word	0x20000a00

08007324 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	60b9      	str	r1, [r7, #8]
 800732c:	607a      	str	r2, [r7, #4]
 800732e:	603b      	str	r3, [r7, #0]
 8007330:	4603      	mov	r3, r0
 8007332:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	4a0a      	ldr	r2, [pc, #40]	@ (8007360 <disk_write+0x3c>)
 8007338:	009b      	lsls	r3, r3, #2
 800733a:	4413      	add	r3, r2
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68dc      	ldr	r4, [r3, #12]
 8007340:	7bfb      	ldrb	r3, [r7, #15]
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <disk_write+0x3c>)
 8007344:	4413      	add	r3, r2
 8007346:	7a18      	ldrb	r0, [r3, #8]
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	68b9      	ldr	r1, [r7, #8]
 800734e:	47a0      	blx	r4
 8007350:	4603      	mov	r3, r0
 8007352:	75fb      	strb	r3, [r7, #23]
  return res;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
}
 8007356:	4618      	mov	r0, r3
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	bd90      	pop	{r4, r7, pc}
 800735e:	bf00      	nop
 8007360:	20000a00 	.word	0x20000a00

08007364 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	603a      	str	r2, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
 8007370:	460b      	mov	r3, r1
 8007372:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007374:	79fb      	ldrb	r3, [r7, #7]
 8007376:	4a09      	ldr	r2, [pc, #36]	@ (800739c <disk_ioctl+0x38>)
 8007378:	009b      	lsls	r3, r3, #2
 800737a:	4413      	add	r3, r2
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	79fa      	ldrb	r2, [r7, #7]
 8007382:	4906      	ldr	r1, [pc, #24]	@ (800739c <disk_ioctl+0x38>)
 8007384:	440a      	add	r2, r1
 8007386:	7a10      	ldrb	r0, [r2, #8]
 8007388:	79b9      	ldrb	r1, [r7, #6]
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	4798      	blx	r3
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
  return res;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
}
 8007394:	4618      	mov	r0, r3
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}
 800739c:	20000a00 	.word	0x20000a00

080073a0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	3301      	adds	r3, #1
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80073b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80073b4:	021b      	lsls	r3, r3, #8
 80073b6:	b21a      	sxth	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b21b      	sxth	r3, r3
 80073be:	4313      	orrs	r3, r2
 80073c0:	b21b      	sxth	r3, r3
 80073c2:	81fb      	strh	r3, [r7, #14]
	return rv;
 80073c4:	89fb      	ldrh	r3, [r7, #14]
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	3303      	adds	r3, #3
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	021b      	lsls	r3, r3, #8
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	3202      	adds	r2, #2
 80073ea:	7812      	ldrb	r2, [r2, #0]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	021b      	lsls	r3, r3, #8
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	3201      	adds	r2, #1
 80073f8:	7812      	ldrb	r2, [r2, #0]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	021b      	lsls	r3, r3, #8
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	7812      	ldrb	r2, [r2, #0]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
	return rv;
 800740a:	68fb      	ldr	r3, [r7, #12]
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	887a      	ldrh	r2, [r7, #2]
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]
 8007430:	887b      	ldrh	r3, [r7, #2]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	607a      	str	r2, [r7, #4]
 800743c:	887a      	ldrh	r2, [r7, #2]
 800743e:	b2d2      	uxtb	r2, r2
 8007440:	701a      	strb	r2, [r3, #0]
}
 8007442:	bf00      	nop
 8007444:	370c      	adds	r7, #12
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800744e:	b480      	push	{r7}
 8007450:	b083      	sub	sp, #12
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	607a      	str	r2, [r7, #4]
 800745e:	683a      	ldr	r2, [r7, #0]
 8007460:	b2d2      	uxtb	r2, r2
 8007462:	701a      	strb	r2, [r3, #0]
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	0a1b      	lsrs	r3, r3, #8
 8007468:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	607a      	str	r2, [r7, #4]
 8007470:	683a      	ldr	r2, [r7, #0]
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	0a1b      	lsrs	r3, r3, #8
 800747a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	607a      	str	r2, [r7, #4]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	b2d2      	uxtb	r2, r2
 8007486:	701a      	strb	r2, [r3, #0]
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	0a1b      	lsrs	r3, r3, #8
 800748c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	607a      	str	r2, [r7, #4]
 8007494:	683a      	ldr	r2, [r7, #0]
 8007496:	b2d2      	uxtb	r2, r2
 8007498:	701a      	strb	r2, [r3, #0]
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80074a6:	b480      	push	{r7}
 80074a8:	b087      	sub	sp, #28
 80074aa:	af00      	add	r7, sp, #0
 80074ac:	60f8      	str	r0, [r7, #12]
 80074ae:	60b9      	str	r1, [r7, #8]
 80074b0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00d      	beq.n	80074dc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	1c53      	adds	r3, r2, #1
 80074c4:	613b      	str	r3, [r7, #16]
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	6179      	str	r1, [r7, #20]
 80074cc:	7812      	ldrb	r2, [r2, #0]
 80074ce:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	607b      	str	r3, [r7, #4]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d1f1      	bne.n	80074c0 <mem_cpy+0x1a>
	}
}
 80074dc:	bf00      	nop
 80074de:	371c      	adds	r7, #28
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	1c5a      	adds	r2, r3, #1
 80074fc:	617a      	str	r2, [r7, #20]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	b2d2      	uxtb	r2, r2
 8007502:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3b01      	subs	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d1f3      	bne.n	80074f8 <mem_set+0x10>
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800751e:	b480      	push	{r7}
 8007520:	b089      	sub	sp, #36	@ 0x24
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	61fb      	str	r3, [r7, #28]
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	1c5a      	adds	r2, r3, #1
 800753a:	61fa      	str	r2, [r7, #28]
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	4619      	mov	r1, r3
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	61ba      	str	r2, [r7, #24]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	1acb      	subs	r3, r1, r3
 800754a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	3b01      	subs	r3, #1
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d002      	beq.n	800755e <mem_cmp+0x40>
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d0eb      	beq.n	8007536 <mem_cmp+0x18>

	return r;
 800755e:	697b      	ldr	r3, [r7, #20]
}
 8007560:	4618      	mov	r0, r3
 8007562:	3724      	adds	r7, #36	@ 0x24
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007576:	e002      	b.n	800757e <chk_chr+0x12>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3301      	adds	r3, #1
 800757c:	607b      	str	r3, [r7, #4]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d005      	beq.n	8007592 <chk_chr+0x26>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	461a      	mov	r2, r3
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	4293      	cmp	r3, r2
 8007590:	d1f2      	bne.n	8007578 <chk_chr+0xc>
	return *str;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	781b      	ldrb	r3, [r3, #0]
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b082      	sub	sp, #8
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d009      	beq.n	80075c4 <lock_fs+0x22>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	4618      	mov	r0, r3
 80075b6:	f003 fcd4 	bl	800af62 <ff_req_grant>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <lock_fs+0x22>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <lock_fs+0x24>
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	460b      	mov	r3, r1
 80075d8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <unlock_fs+0x2e>
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	2b0c      	cmp	r3, #12
 80075e4:	d00a      	beq.n	80075fc <unlock_fs+0x2e>
 80075e6:	78fb      	ldrb	r3, [r7, #3]
 80075e8:	2b0b      	cmp	r3, #11
 80075ea:	d007      	beq.n	80075fc <unlock_fs+0x2e>
 80075ec:	78fb      	ldrb	r3, [r7, #3]
 80075ee:	2b0f      	cmp	r3, #15
 80075f0:	d004      	beq.n	80075fc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	691b      	ldr	r3, [r3, #16]
 80075f6:	4618      	mov	r0, r3
 80075f8:	f003 fcc8 	bl	800af8c <ff_rel_grant>
	}
}
 80075fc:	bf00      	nop
 80075fe:	3708      	adds	r7, #8
 8007600:	46bd      	mov	sp, r7
 8007602:	bd80      	pop	{r7, pc}

08007604 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007604:	b480      	push	{r7}
 8007606:	b085      	sub	sp, #20
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
 800760c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800760e:	2300      	movs	r3, #0
 8007610:	60bb      	str	r3, [r7, #8]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	60fb      	str	r3, [r7, #12]
 8007616:	e029      	b.n	800766c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007618:	4a27      	ldr	r2, [pc, #156]	@ (80076b8 <chk_lock+0xb4>)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	011b      	lsls	r3, r3, #4
 800761e:	4413      	add	r3, r2
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d01d      	beq.n	8007662 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007626:	4a24      	ldr	r2, [pc, #144]	@ (80076b8 <chk_lock+0xb4>)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	011b      	lsls	r3, r3, #4
 800762c:	4413      	add	r3, r2
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	429a      	cmp	r2, r3
 8007636:	d116      	bne.n	8007666 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007638:	4a1f      	ldr	r2, [pc, #124]	@ (80076b8 <chk_lock+0xb4>)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	011b      	lsls	r3, r3, #4
 800763e:	4413      	add	r3, r2
 8007640:	3304      	adds	r3, #4
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007648:	429a      	cmp	r2, r3
 800764a:	d10c      	bne.n	8007666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800764c:	4a1a      	ldr	r2, [pc, #104]	@ (80076b8 <chk_lock+0xb4>)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	011b      	lsls	r3, r3, #4
 8007652:	4413      	add	r3, r2
 8007654:	3308      	adds	r3, #8
 8007656:	681a      	ldr	r2, [r3, #0]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800765c:	429a      	cmp	r2, r3
 800765e:	d102      	bne.n	8007666 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8007660:	e007      	b.n	8007672 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8007662:	2301      	movs	r3, #1
 8007664:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	3301      	adds	r3, #1
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d9d2      	bls.n	8007618 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b02      	cmp	r3, #2
 8007676:	d109      	bne.n	800768c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d102      	bne.n	8007684 <chk_lock+0x80>
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	2b02      	cmp	r3, #2
 8007682:	d101      	bne.n	8007688 <chk_lock+0x84>
 8007684:	2300      	movs	r3, #0
 8007686:	e010      	b.n	80076aa <chk_lock+0xa6>
 8007688:	2312      	movs	r3, #18
 800768a:	e00e      	b.n	80076aa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d108      	bne.n	80076a4 <chk_lock+0xa0>
 8007692:	4a09      	ldr	r2, [pc, #36]	@ (80076b8 <chk_lock+0xb4>)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	4413      	add	r3, r2
 800769a:	330c      	adds	r3, #12
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076a2:	d101      	bne.n	80076a8 <chk_lock+0xa4>
 80076a4:	2310      	movs	r3, #16
 80076a6:	e000      	b.n	80076aa <chk_lock+0xa6>
 80076a8:	2300      	movs	r3, #0
}
 80076aa:	4618      	mov	r0, r3
 80076ac:	3714      	adds	r7, #20
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	200009e0 	.word	0x200009e0

080076bc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80076c2:	2300      	movs	r3, #0
 80076c4:	607b      	str	r3, [r7, #4]
 80076c6:	e002      	b.n	80076ce <enq_lock+0x12>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3301      	adds	r3, #1
 80076cc:	607b      	str	r3, [r7, #4]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d806      	bhi.n	80076e2 <enq_lock+0x26>
 80076d4:	4a09      	ldr	r2, [pc, #36]	@ (80076fc <enq_lock+0x40>)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	011b      	lsls	r3, r3, #4
 80076da:	4413      	add	r3, r2
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1f2      	bne.n	80076c8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	bf14      	ite	ne
 80076e8:	2301      	movne	r3, #1
 80076ea:	2300      	moveq	r3, #0
 80076ec:	b2db      	uxtb	r3, r3
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	370c      	adds	r7, #12
 80076f2:	46bd      	mov	sp, r7
 80076f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f8:	4770      	bx	lr
 80076fa:	bf00      	nop
 80076fc:	200009e0 	.word	0x200009e0

08007700 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
 800770e:	e01f      	b.n	8007750 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007710:	4a41      	ldr	r2, [pc, #260]	@ (8007818 <inc_lock+0x118>)
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	011b      	lsls	r3, r3, #4
 8007716:	4413      	add	r3, r2
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	429a      	cmp	r2, r3
 8007720:	d113      	bne.n	800774a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007722:	4a3d      	ldr	r2, [pc, #244]	@ (8007818 <inc_lock+0x118>)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	011b      	lsls	r3, r3, #4
 8007728:	4413      	add	r3, r2
 800772a:	3304      	adds	r3, #4
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007732:	429a      	cmp	r2, r3
 8007734:	d109      	bne.n	800774a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007736:	4a38      	ldr	r2, [pc, #224]	@ (8007818 <inc_lock+0x118>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	4413      	add	r3, r2
 800773e:	3308      	adds	r3, #8
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007746:	429a      	cmp	r2, r3
 8007748:	d006      	beq.n	8007758 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	3301      	adds	r3, #1
 800774e:	60fb      	str	r3, [r7, #12]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d9dc      	bls.n	8007710 <inc_lock+0x10>
 8007756:	e000      	b.n	800775a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8007758:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	2b02      	cmp	r3, #2
 800775e:	d132      	bne.n	80077c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007760:	2300      	movs	r3, #0
 8007762:	60fb      	str	r3, [r7, #12]
 8007764:	e002      	b.n	800776c <inc_lock+0x6c>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	3301      	adds	r3, #1
 800776a:	60fb      	str	r3, [r7, #12]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b01      	cmp	r3, #1
 8007770:	d806      	bhi.n	8007780 <inc_lock+0x80>
 8007772:	4a29      	ldr	r2, [pc, #164]	@ (8007818 <inc_lock+0x118>)
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	011b      	lsls	r3, r3, #4
 8007778:	4413      	add	r3, r2
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1f2      	bne.n	8007766 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2b02      	cmp	r3, #2
 8007784:	d101      	bne.n	800778a <inc_lock+0x8a>
 8007786:	2300      	movs	r3, #0
 8007788:	e040      	b.n	800780c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681a      	ldr	r2, [r3, #0]
 800778e:	4922      	ldr	r1, [pc, #136]	@ (8007818 <inc_lock+0x118>)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	011b      	lsls	r3, r3, #4
 8007794:	440b      	add	r3, r1
 8007796:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	491e      	ldr	r1, [pc, #120]	@ (8007818 <inc_lock+0x118>)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	011b      	lsls	r3, r3, #4
 80077a2:	440b      	add	r3, r1
 80077a4:	3304      	adds	r3, #4
 80077a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	695a      	ldr	r2, [r3, #20]
 80077ac:	491a      	ldr	r1, [pc, #104]	@ (8007818 <inc_lock+0x118>)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	011b      	lsls	r3, r3, #4
 80077b2:	440b      	add	r3, r1
 80077b4:	3308      	adds	r3, #8
 80077b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80077b8:	4a17      	ldr	r2, [pc, #92]	@ (8007818 <inc_lock+0x118>)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	011b      	lsls	r3, r3, #4
 80077be:	4413      	add	r3, r2
 80077c0:	330c      	adds	r3, #12
 80077c2:	2200      	movs	r2, #0
 80077c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80077c6:	683b      	ldr	r3, [r7, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d009      	beq.n	80077e0 <inc_lock+0xe0>
 80077cc:	4a12      	ldr	r2, [pc, #72]	@ (8007818 <inc_lock+0x118>)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4413      	add	r3, r2
 80077d4:	330c      	adds	r3, #12
 80077d6:	881b      	ldrh	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <inc_lock+0xe0>
 80077dc:	2300      	movs	r3, #0
 80077de:	e015      	b.n	800780c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d108      	bne.n	80077f8 <inc_lock+0xf8>
 80077e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007818 <inc_lock+0x118>)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	011b      	lsls	r3, r3, #4
 80077ec:	4413      	add	r3, r2
 80077ee:	330c      	adds	r3, #12
 80077f0:	881b      	ldrh	r3, [r3, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	b29a      	uxth	r2, r3
 80077f6:	e001      	b.n	80077fc <inc_lock+0xfc>
 80077f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80077fc:	4906      	ldr	r1, [pc, #24]	@ (8007818 <inc_lock+0x118>)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	011b      	lsls	r3, r3, #4
 8007802:	440b      	add	r3, r1
 8007804:	330c      	adds	r3, #12
 8007806:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3301      	adds	r3, #1
}
 800780c:	4618      	mov	r0, r3
 800780e:	3714      	adds	r7, #20
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr
 8007818:	200009e0 	.word	0x200009e0

0800781c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800781c:	b480      	push	{r7}
 800781e:	b085      	sub	sp, #20
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	3b01      	subs	r3, #1
 8007828:	607b      	str	r3, [r7, #4]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b01      	cmp	r3, #1
 800782e:	d825      	bhi.n	800787c <dec_lock+0x60>
		n = Files[i].ctr;
 8007830:	4a17      	ldr	r2, [pc, #92]	@ (8007890 <dec_lock+0x74>)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	011b      	lsls	r3, r3, #4
 8007836:	4413      	add	r3, r2
 8007838:	330c      	adds	r3, #12
 800783a:	881b      	ldrh	r3, [r3, #0]
 800783c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800783e:	89fb      	ldrh	r3, [r7, #14]
 8007840:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007844:	d101      	bne.n	800784a <dec_lock+0x2e>
 8007846:	2300      	movs	r3, #0
 8007848:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800784a:	89fb      	ldrh	r3, [r7, #14]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d002      	beq.n	8007856 <dec_lock+0x3a>
 8007850:	89fb      	ldrh	r3, [r7, #14]
 8007852:	3b01      	subs	r3, #1
 8007854:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8007856:	4a0e      	ldr	r2, [pc, #56]	@ (8007890 <dec_lock+0x74>)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	011b      	lsls	r3, r3, #4
 800785c:	4413      	add	r3, r2
 800785e:	330c      	adds	r3, #12
 8007860:	89fa      	ldrh	r2, [r7, #14]
 8007862:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8007864:	89fb      	ldrh	r3, [r7, #14]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d105      	bne.n	8007876 <dec_lock+0x5a>
 800786a:	4a09      	ldr	r2, [pc, #36]	@ (8007890 <dec_lock+0x74>)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	011b      	lsls	r3, r3, #4
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8007876:	2300      	movs	r3, #0
 8007878:	737b      	strb	r3, [r7, #13]
 800787a:	e001      	b.n	8007880 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800787c:	2302      	movs	r3, #2
 800787e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8007880:	7b7b      	ldrb	r3, [r7, #13]
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	200009e0 	.word	0x200009e0

08007894 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800789c:	2300      	movs	r3, #0
 800789e:	60fb      	str	r3, [r7, #12]
 80078a0:	e010      	b.n	80078c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80078a2:	4a0d      	ldr	r2, [pc, #52]	@ (80078d8 <clear_lock+0x44>)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	011b      	lsls	r3, r3, #4
 80078a8:	4413      	add	r3, r2
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	429a      	cmp	r2, r3
 80078b0:	d105      	bne.n	80078be <clear_lock+0x2a>
 80078b2:	4a09      	ldr	r2, [pc, #36]	@ (80078d8 <clear_lock+0x44>)
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	011b      	lsls	r3, r3, #4
 80078b8:	4413      	add	r3, r2
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	3301      	adds	r3, #1
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d9eb      	bls.n	80078a2 <clear_lock+0xe>
	}
}
 80078ca:	bf00      	nop
 80078cc:	bf00      	nop
 80078ce:	3714      	adds	r7, #20
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr
 80078d8:	200009e0 	.word	0x200009e0

080078dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80078e4:	2300      	movs	r3, #0
 80078e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	78db      	ldrb	r3, [r3, #3]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d034      	beq.n	800795a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	7858      	ldrb	r0, [r3, #1]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007900:	2301      	movs	r3, #1
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	f7ff fd0e 	bl	8007324 <disk_write>
 8007908:	4603      	mov	r3, r0
 800790a:	2b00      	cmp	r3, #0
 800790c:	d002      	beq.n	8007914 <sync_window+0x38>
			res = FR_DISK_ERR;
 800790e:	2301      	movs	r3, #1
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	e022      	b.n	800795a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	697a      	ldr	r2, [r7, #20]
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a1b      	ldr	r3, [r3, #32]
 8007926:	429a      	cmp	r2, r3
 8007928:	d217      	bcs.n	800795a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	789b      	ldrb	r3, [r3, #2]
 800792e:	613b      	str	r3, [r7, #16]
 8007930:	e010      	b.n	8007954 <sync_window+0x78>
					wsect += fs->fsize;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a1b      	ldr	r3, [r3, #32]
 8007936:	697a      	ldr	r2, [r7, #20]
 8007938:	4413      	add	r3, r2
 800793a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	7858      	ldrb	r0, [r3, #1]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007946:	2301      	movs	r3, #1
 8007948:	697a      	ldr	r2, [r7, #20]
 800794a:	f7ff fceb 	bl	8007324 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	3b01      	subs	r3, #1
 8007952:	613b      	str	r3, [r7, #16]
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	2b01      	cmp	r3, #1
 8007958:	d8eb      	bhi.n	8007932 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800795a:	7bfb      	ldrb	r3, [r7, #15]
}
 800795c:	4618      	mov	r0, r3
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800796e:	2300      	movs	r3, #0
 8007970:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	429a      	cmp	r2, r3
 800797a:	d01b      	beq.n	80079b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff ffad 	bl	80078dc <sync_window>
 8007982:	4603      	mov	r3, r0
 8007984:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d113      	bne.n	80079b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	7858      	ldrb	r0, [r3, #1]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007996:	2301      	movs	r3, #1
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	f7ff fca3 	bl	80072e4 <disk_read>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d004      	beq.n	80079ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80079a4:	f04f 33ff 	mov.w	r3, #4294967295
 80079a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	683a      	ldr	r2, [r7, #0]
 80079b2:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 80079b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
	...

080079c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff87 	bl	80078dc <sync_window>
 80079ce:	4603      	mov	r3, r0
 80079d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d158      	bne.n	8007a8a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b03      	cmp	r3, #3
 80079de:	d148      	bne.n	8007a72 <sync_fs+0xb2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	791b      	ldrb	r3, [r3, #4]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d144      	bne.n	8007a72 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3338      	adds	r3, #56	@ 0x38
 80079ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079f0:	2100      	movs	r1, #0
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7ff fd78 	bl	80074e8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	3338      	adds	r3, #56	@ 0x38
 80079fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007a00:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fd07 	bl	8007418 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	3338      	adds	r3, #56	@ 0x38
 8007a0e:	4921      	ldr	r1, [pc, #132]	@ (8007a94 <sync_fs+0xd4>)
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff fd1c 	bl	800744e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	3338      	adds	r3, #56	@ 0x38
 8007a1a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007a1e:	491e      	ldr	r1, [pc, #120]	@ (8007a98 <sync_fs+0xd8>)
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff fd14 	bl	800744e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	3338      	adds	r3, #56	@ 0x38
 8007a2a:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	699b      	ldr	r3, [r3, #24]
 8007a32:	4619      	mov	r1, r3
 8007a34:	4610      	mov	r0, r2
 8007a36:	f7ff fd0a 	bl	800744e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	3338      	adds	r3, #56	@ 0x38
 8007a3e:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	4619      	mov	r1, r3
 8007a48:	4610      	mov	r0, r2
 8007a4a:	f7ff fd00 	bl	800744e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	7858      	ldrb	r0, [r3, #1]
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007a66:	2301      	movs	r3, #1
 8007a68:	f7ff fc5c 	bl	8007324 <disk_write>
			fs->fsi_flag = 0;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	785b      	ldrb	r3, [r3, #1]
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7ff fc72 	bl	8007364 <disk_ioctl>
 8007a80:	4603      	mov	r3, r0
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d001      	beq.n	8007a8a <sync_fs+0xca>
 8007a86:	2301      	movs	r3, #1
 8007a88:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8007a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}
 8007a94:	41615252 	.word	0x41615252
 8007a98:	61417272 	.word	0x61417272

08007a9c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	3b02      	subs	r3, #2
 8007aaa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69db      	ldr	r3, [r3, #28]
 8007ab0:	3b02      	subs	r3, #2
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d301      	bcc.n	8007abc <clust2sect+0x20>
 8007ab8:	2300      	movs	r3, #0
 8007aba:	e008      	b.n	8007ace <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	895b      	ldrh	r3, [r3, #10]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	fb03 f202 	mul.w	r2, r3, r2
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007acc:	4413      	add	r3, r2
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr

08007ada <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b086      	sub	sp, #24
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d904      	bls.n	8007afa <get_fat+0x20>
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <get_fat+0x26>
		val = 1;	/* Internal error */
 8007afa:	2301      	movs	r3, #1
 8007afc:	617b      	str	r3, [r7, #20]
 8007afe:	e08e      	b.n	8007c1e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007b00:	f04f 33ff 	mov.w	r3, #4294967295
 8007b04:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d061      	beq.n	8007bd2 <get_fat+0xf8>
 8007b0e:	2b03      	cmp	r3, #3
 8007b10:	dc7b      	bgt.n	8007c0a <get_fat+0x130>
 8007b12:	2b01      	cmp	r3, #1
 8007b14:	d002      	beq.n	8007b1c <get_fat+0x42>
 8007b16:	2b02      	cmp	r3, #2
 8007b18:	d041      	beq.n	8007b9e <get_fat+0xc4>
 8007b1a:	e076      	b.n	8007c0a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	60fb      	str	r3, [r7, #12]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	085b      	lsrs	r3, r3, #1
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	4413      	add	r3, r2
 8007b28:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	0a5b      	lsrs	r3, r3, #9
 8007b32:	4413      	add	r3, r2
 8007b34:	4619      	mov	r1, r3
 8007b36:	6938      	ldr	r0, [r7, #16]
 8007b38:	f7ff ff14 	bl	8007964 <move_window>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d166      	bne.n	8007c10 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	1c5a      	adds	r2, r3, #1
 8007b46:	60fa      	str	r2, [r7, #12]
 8007b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b4c:	693a      	ldr	r2, [r7, #16]
 8007b4e:	4413      	add	r3, r2
 8007b50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	0a5b      	lsrs	r3, r3, #9
 8007b5e:	4413      	add	r3, r2
 8007b60:	4619      	mov	r1, r3
 8007b62:	6938      	ldr	r0, [r7, #16]
 8007b64:	f7ff fefe 	bl	8007964 <move_window>
 8007b68:	4603      	mov	r3, r0
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d152      	bne.n	8007c14 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b74:	693a      	ldr	r2, [r7, #16]
 8007b76:	4413      	add	r3, r2
 8007b78:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d002      	beq.n	8007b94 <get_fat+0xba>
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	091b      	lsrs	r3, r3, #4
 8007b92:	e002      	b.n	8007b9a <get_fat+0xc0>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b9a:	617b      	str	r3, [r7, #20]
			break;
 8007b9c:	e03f      	b.n	8007c1e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007b9e:	693b      	ldr	r3, [r7, #16]
 8007ba0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	0a1b      	lsrs	r3, r3, #8
 8007ba6:	4413      	add	r3, r2
 8007ba8:	4619      	mov	r1, r3
 8007baa:	6938      	ldr	r0, [r7, #16]
 8007bac:	f7ff feda 	bl	8007964 <move_window>
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d130      	bne.n	8007c18 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007bb6:	693b      	ldr	r3, [r7, #16]
 8007bb8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	005b      	lsls	r3, r3, #1
 8007bc0:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007bc4:	4413      	add	r3, r2
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f7ff fbea 	bl	80073a0 <ld_word>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	617b      	str	r3, [r7, #20]
			break;
 8007bd0:	e025      	b.n	8007c1e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007bd2:	693b      	ldr	r3, [r7, #16]
 8007bd4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	09db      	lsrs	r3, r3, #7
 8007bda:	4413      	add	r3, r2
 8007bdc:	4619      	mov	r1, r3
 8007bde:	6938      	ldr	r0, [r7, #16]
 8007be0:	f7ff fec0 	bl	8007964 <move_window>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d118      	bne.n	8007c1c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007bf8:	4413      	add	r3, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff fbe9 	bl	80073d2 <ld_dword>
 8007c00:	4603      	mov	r3, r0
 8007c02:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007c06:	617b      	str	r3, [r7, #20]
			break;
 8007c08:	e009      	b.n	8007c1e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	617b      	str	r3, [r7, #20]
 8007c0e:	e006      	b.n	8007c1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c10:	bf00      	nop
 8007c12:	e004      	b.n	8007c1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007c14:	bf00      	nop
 8007c16:	e002      	b.n	8007c1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8007c18:	bf00      	nop
 8007c1a:	e000      	b.n	8007c1e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007c1c:	bf00      	nop
		}
	}

	return val;
 8007c1e:	697b      	ldr	r3, [r7, #20]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3718      	adds	r7, #24
 8007c24:	46bd      	mov	sp, r7
 8007c26:	bd80      	pop	{r7, pc}

08007c28 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8007c28:	b590      	push	{r4, r7, lr}
 8007c2a:	b089      	sub	sp, #36	@ 0x24
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	60f8      	str	r0, [r7, #12]
 8007c30:	60b9      	str	r1, [r7, #8]
 8007c32:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007c34:	2302      	movs	r3, #2
 8007c36:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	f240 80d9 	bls.w	8007df2 <put_fat+0x1ca>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	69db      	ldr	r3, [r3, #28]
 8007c44:	68ba      	ldr	r2, [r7, #8]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	f080 80d3 	bcs.w	8007df2 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	2b03      	cmp	r3, #3
 8007c52:	f000 8096 	beq.w	8007d82 <put_fat+0x15a>
 8007c56:	2b03      	cmp	r3, #3
 8007c58:	f300 80cb 	bgt.w	8007df2 <put_fat+0x1ca>
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d002      	beq.n	8007c66 <put_fat+0x3e>
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d06e      	beq.n	8007d42 <put_fat+0x11a>
 8007c64:	e0c5      	b.n	8007df2 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	61bb      	str	r3, [r7, #24]
 8007c6a:	69bb      	ldr	r3, [r7, #24]
 8007c6c:	085b      	lsrs	r3, r3, #1
 8007c6e:	69ba      	ldr	r2, [r7, #24]
 8007c70:	4413      	add	r3, r2
 8007c72:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	0a5b      	lsrs	r3, r3, #9
 8007c7c:	4413      	add	r3, r2
 8007c7e:	4619      	mov	r1, r3
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	f7ff fe6f 	bl	8007964 <move_window>
 8007c86:	4603      	mov	r3, r0
 8007c88:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007c8a:	7ffb      	ldrb	r3, [r7, #31]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f040 80a9 	bne.w	8007de4 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007c98:	69bb      	ldr	r3, [r7, #24]
 8007c9a:	1c59      	adds	r1, r3, #1
 8007c9c:	61b9      	str	r1, [r7, #24]
 8007c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca2:	4413      	add	r3, r2
 8007ca4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	f003 0301 	and.w	r3, r3, #1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00d      	beq.n	8007ccc <put_fat+0xa4>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	781b      	ldrb	r3, [r3, #0]
 8007cb4:	b25b      	sxtb	r3, r3
 8007cb6:	f003 030f 	and.w	r3, r3, #15
 8007cba:	b25a      	sxtb	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	b25b      	sxtb	r3, r3
 8007cc0:	011b      	lsls	r3, r3, #4
 8007cc2:	b25b      	sxtb	r3, r3
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	b25b      	sxtb	r3, r3
 8007cc8:	b2db      	uxtb	r3, r3
 8007cca:	e001      	b.n	8007cd0 <put_fat+0xa8>
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	0a5b      	lsrs	r3, r3, #9
 8007ce2:	4413      	add	r3, r2
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f7ff fe3c 	bl	8007964 <move_window>
 8007cec:	4603      	mov	r3, r0
 8007cee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007cf0:	7ffb      	ldrb	r3, [r7, #31]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d178      	bne.n	8007de8 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d02:	4413      	add	r3, r2
 8007d04:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	f003 0301 	and.w	r3, r3, #1
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d003      	beq.n	8007d18 <put_fat+0xf0>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	091b      	lsrs	r3, r3, #4
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	e00e      	b.n	8007d36 <put_fat+0x10e>
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	b25b      	sxtb	r3, r3
 8007d1e:	f023 030f 	bic.w	r3, r3, #15
 8007d22:	b25a      	sxtb	r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	0a1b      	lsrs	r3, r3, #8
 8007d28:	b25b      	sxtb	r3, r3
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	b25b      	sxtb	r3, r3
 8007d30:	4313      	orrs	r3, r2
 8007d32:	b25b      	sxtb	r3, r3
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	697a      	ldr	r2, [r7, #20]
 8007d38:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	70da      	strb	r2, [r3, #3]
			break;
 8007d40:	e057      	b.n	8007df2 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	0a1b      	lsrs	r3, r3, #8
 8007d4a:	4413      	add	r3, r2
 8007d4c:	4619      	mov	r1, r3
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff fe08 	bl	8007964 <move_window>
 8007d54:	4603      	mov	r3, r0
 8007d56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d58:	7ffb      	ldrb	r3, [r7, #31]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d146      	bne.n	8007dec <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	005b      	lsls	r3, r3, #1
 8007d68:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	b292      	uxth	r2, r2
 8007d72:	4611      	mov	r1, r2
 8007d74:	4618      	mov	r0, r3
 8007d76:	f7ff fb4f 	bl	8007418 <st_word>
			fs->wflag = 1;
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	70da      	strb	r2, [r3, #3]
			break;
 8007d80:	e037      	b.n	8007df2 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	09db      	lsrs	r3, r3, #7
 8007d8a:	4413      	add	r3, r2
 8007d8c:	4619      	mov	r1, r3
 8007d8e:	68f8      	ldr	r0, [r7, #12]
 8007d90:	f7ff fde8 	bl	8007964 <move_window>
 8007d94:	4603      	mov	r3, r0
 8007d96:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007d98:	7ffb      	ldrb	r3, [r7, #31]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d128      	bne.n	8007df0 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	009b      	lsls	r3, r3, #2
 8007dae:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007db2:	4413      	add	r3, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7ff fb0c 	bl	80073d2 <ld_dword>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8007dc0:	4323      	orrs	r3, r4
 8007dc2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8007dd2:	4413      	add	r3, r2
 8007dd4:	6879      	ldr	r1, [r7, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fb39 	bl	800744e <st_dword>
			fs->wflag = 1;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2201      	movs	r2, #1
 8007de0:	70da      	strb	r2, [r3, #3]
			break;
 8007de2:	e006      	b.n	8007df2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007de4:	bf00      	nop
 8007de6:	e004      	b.n	8007df2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007de8:	bf00      	nop
 8007dea:	e002      	b.n	8007df2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007dec:	bf00      	nop
 8007dee:	e000      	b.n	8007df2 <put_fat+0x1ca>
			if (res != FR_OK) break;
 8007df0:	bf00      	nop
		}
	}
	return res;
 8007df2:	7ffb      	ldrb	r3, [r7, #31]
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3724      	adds	r7, #36	@ 0x24
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd90      	pop	{r4, r7, pc}

08007dfc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007e08:	2300      	movs	r3, #0
 8007e0a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d904      	bls.n	8007e22 <remove_chain+0x26>
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	69db      	ldr	r3, [r3, #28]
 8007e1c:	68ba      	ldr	r2, [r7, #8]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d301      	bcc.n	8007e26 <remove_chain+0x2a>
 8007e22:	2302      	movs	r3, #2
 8007e24:	e04b      	b.n	8007ebe <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d00c      	beq.n	8007e46 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007e30:	6879      	ldr	r1, [r7, #4]
 8007e32:	69b8      	ldr	r0, [r7, #24]
 8007e34:	f7ff fef8 	bl	8007c28 <put_fat>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007e3c:	7ffb      	ldrb	r3, [r7, #31]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <remove_chain+0x4a>
 8007e42:	7ffb      	ldrb	r3, [r7, #31]
 8007e44:	e03b      	b.n	8007ebe <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007e46:	68b9      	ldr	r1, [r7, #8]
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fe46 	bl	8007ada <get_fat>
 8007e4e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d031      	beq.n	8007eba <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d101      	bne.n	8007e60 <remove_chain+0x64>
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e02e      	b.n	8007ebe <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d101      	bne.n	8007e6c <remove_chain+0x70>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	e028      	b.n	8007ebe <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	68b9      	ldr	r1, [r7, #8]
 8007e70:	69b8      	ldr	r0, [r7, #24]
 8007e72:	f7ff fed9 	bl	8007c28 <put_fat>
 8007e76:	4603      	mov	r3, r0
 8007e78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007e7a:	7ffb      	ldrb	r3, [r7, #31]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d001      	beq.n	8007e84 <remove_chain+0x88>
 8007e80:	7ffb      	ldrb	r3, [r7, #31]
 8007e82:	e01c      	b.n	8007ebe <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007e84:	69bb      	ldr	r3, [r7, #24]
 8007e86:	699a      	ldr	r2, [r3, #24]
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	3b02      	subs	r3, #2
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d20b      	bcs.n	8007eaa <remove_chain+0xae>
			fs->free_clst++;
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	699b      	ldr	r3, [r3, #24]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8007e9c:	69bb      	ldr	r3, [r7, #24]
 8007e9e:	791b      	ldrb	r3, [r3, #4]
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	b2da      	uxtb	r2, r3
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d3c6      	bcc.n	8007e46 <remove_chain+0x4a>
 8007eb8:	e000      	b.n	8007ebc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007eba:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3720      	adds	r7, #32
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}

08007ec6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007ec6:	b580      	push	{r7, lr}
 8007ec8:	b088      	sub	sp, #32
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d10d      	bne.n	8007ef8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007edc:	693b      	ldr	r3, [r7, #16]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <create_chain+0x2c>
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	69ba      	ldr	r2, [r7, #24]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d31b      	bcc.n	8007f2a <create_chain+0x64>
 8007ef2:	2301      	movs	r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e018      	b.n	8007f2a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f7ff fded 	bl	8007ada <get_fat>
 8007f00:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d801      	bhi.n	8007f0c <create_chain+0x46>
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e070      	b.n	8007fee <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f12:	d101      	bne.n	8007f18 <create_chain+0x52>
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	e06a      	b.n	8007fee <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007f18:	693b      	ldr	r3, [r7, #16]
 8007f1a:	69db      	ldr	r3, [r3, #28]
 8007f1c:	68fa      	ldr	r2, [r7, #12]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d201      	bcs.n	8007f26 <create_chain+0x60>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	e063      	b.n	8007fee <create_chain+0x128>
		scl = clst;
 8007f26:	683b      	ldr	r3, [r7, #0]
 8007f28:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	3301      	adds	r3, #1
 8007f32:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	69fa      	ldr	r2, [r7, #28]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d307      	bcc.n	8007f4e <create_chain+0x88>
				ncl = 2;
 8007f3e:	2302      	movs	r3, #2
 8007f40:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007f42:	69fa      	ldr	r2, [r7, #28]
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d901      	bls.n	8007f4e <create_chain+0x88>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	e04f      	b.n	8007fee <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007f4e:	69f9      	ldr	r1, [r7, #28]
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fdc2 	bl	8007ada <get_fat>
 8007f56:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00e      	beq.n	8007f7c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d003      	beq.n	8007f6c <create_chain+0xa6>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	d101      	bne.n	8007f70 <create_chain+0xaa>
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	e03e      	b.n	8007fee <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007f70:	69fa      	ldr	r2, [r7, #28]
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d1da      	bne.n	8007f2e <create_chain+0x68>
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e038      	b.n	8007fee <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007f7c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f82:	69f9      	ldr	r1, [r7, #28]
 8007f84:	6938      	ldr	r0, [r7, #16]
 8007f86:	f7ff fe4f 	bl	8007c28 <put_fat>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007f8e:	7dfb      	ldrb	r3, [r7, #23]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d109      	bne.n	8007fa8 <create_chain+0xe2>
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d006      	beq.n	8007fa8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007f9a:	69fa      	ldr	r2, [r7, #28]
 8007f9c:	6839      	ldr	r1, [r7, #0]
 8007f9e:	6938      	ldr	r0, [r7, #16]
 8007fa0:	f7ff fe42 	bl	8007c28 <put_fat>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007fa8:	7dfb      	ldrb	r3, [r7, #23]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d116      	bne.n	8007fdc <create_chain+0x116>
		fs->last_clst = ncl;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	69fa      	ldr	r2, [r7, #28]
 8007fb2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	699a      	ldr	r2, [r3, #24]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	3b02      	subs	r3, #2
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d804      	bhi.n	8007fcc <create_chain+0x106>
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	1e5a      	subs	r2, r3, #1
 8007fc8:	693b      	ldr	r3, [r7, #16]
 8007fca:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	791b      	ldrb	r3, [r3, #4]
 8007fd0:	f043 0301 	orr.w	r3, r3, #1
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	711a      	strb	r2, [r3, #4]
 8007fda:	e007      	b.n	8007fec <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d102      	bne.n	8007fe8 <create_chain+0x122>
 8007fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fe6:	e000      	b.n	8007fea <create_chain+0x124>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007fec:	69fb      	ldr	r3, [r7, #28]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3720      	adds	r7, #32
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b087      	sub	sp, #28
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
 8007ffe:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800800a:	3304      	adds	r3, #4
 800800c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	0a5b      	lsrs	r3, r3, #9
 8008012:	68fa      	ldr	r2, [r7, #12]
 8008014:	8952      	ldrh	r2, [r2, #10]
 8008016:	fbb3 f3f2 	udiv	r3, r3, r2
 800801a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	1d1a      	adds	r2, r3, #4
 8008020:	613a      	str	r2, [r7, #16]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d101      	bne.n	8008030 <clmt_clust+0x3a>
 800802c:	2300      	movs	r3, #0
 800802e:	e010      	b.n	8008052 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8008030:	697a      	ldr	r2, [r7, #20]
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	429a      	cmp	r2, r3
 8008036:	d307      	bcc.n	8008048 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8008038:	697a      	ldr	r2, [r7, #20]
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	617b      	str	r3, [r7, #20]
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	3304      	adds	r3, #4
 8008044:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8008046:	e7e9      	b.n	800801c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8008048:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	697b      	ldr	r3, [r7, #20]
 8008050:	4413      	add	r3, r2
}
 8008052:	4618      	mov	r0, r3
 8008054:	371c      	adds	r7, #28
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr

0800805e <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b086      	sub	sp, #24
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008074:	d204      	bcs.n	8008080 <dir_sdi+0x22>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	f003 031f 	and.w	r3, r3, #31
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <dir_sdi+0x26>
		return FR_INT_ERR;
 8008080:	2302      	movs	r3, #2
 8008082:	e063      	b.n	800814c <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	683a      	ldr	r2, [r7, #0]
 8008088:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d106      	bne.n	80080a4 <dir_sdi+0x46>
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d902      	bls.n	80080a4 <dir_sdi+0x46>
		clst = fs->dirbase;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a2:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d10c      	bne.n	80080c4 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	095b      	lsrs	r3, r3, #5
 80080ae:	693a      	ldr	r2, [r7, #16]
 80080b0:	8912      	ldrh	r2, [r2, #8]
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d301      	bcc.n	80080ba <dir_sdi+0x5c>
 80080b6:	2302      	movs	r3, #2
 80080b8:	e048      	b.n	800814c <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	61da      	str	r2, [r3, #28]
 80080c2:	e029      	b.n	8008118 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	895b      	ldrh	r3, [r3, #10]
 80080c8:	025b      	lsls	r3, r3, #9
 80080ca:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80080cc:	e019      	b.n	8008102 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6979      	ldr	r1, [r7, #20]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fd01 	bl	8007ada <get_fat>
 80080d8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e0:	d101      	bne.n	80080e6 <dir_sdi+0x88>
 80080e2:	2301      	movs	r3, #1
 80080e4:	e032      	b.n	800814c <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	d904      	bls.n	80080f6 <dir_sdi+0x98>
 80080ec:	693b      	ldr	r3, [r7, #16]
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	697a      	ldr	r2, [r7, #20]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d301      	bcc.n	80080fa <dir_sdi+0x9c>
 80080f6:	2302      	movs	r3, #2
 80080f8:	e028      	b.n	800814c <dir_sdi+0xee>
			ofs -= csz;
 80080fa:	683a      	ldr	r2, [r7, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	1ad3      	subs	r3, r2, r3
 8008100:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8008102:	683a      	ldr	r2, [r7, #0]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	429a      	cmp	r2, r3
 8008108:	d2e1      	bcs.n	80080ce <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800810a:	6979      	ldr	r1, [r7, #20]
 800810c:	6938      	ldr	r0, [r7, #16]
 800810e:	f7ff fcc5 	bl	8007a9c <clust2sect>
 8008112:	4602      	mov	r2, r0
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	69db      	ldr	r3, [r3, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d101      	bne.n	800812a <dir_sdi+0xcc>
 8008126:	2302      	movs	r3, #2
 8008128:	e010      	b.n	800814c <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	69da      	ldr	r2, [r3, #28]
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	0a5b      	lsrs	r3, r3, #9
 8008132:	441a      	add	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008144:	441a      	add	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
 800815c:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	695b      	ldr	r3, [r3, #20]
 8008168:	3320      	adds	r3, #32
 800816a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d003      	beq.n	800817c <dir_next+0x28>
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800817a:	d301      	bcc.n	8008180 <dir_next+0x2c>
 800817c:	2304      	movs	r3, #4
 800817e:	e0aa      	b.n	80082d6 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008186:	2b00      	cmp	r3, #0
 8008188:	f040 8098 	bne.w	80082bc <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	1c5a      	adds	r2, r3, #1
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d10b      	bne.n	80081b6 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	095b      	lsrs	r3, r3, #5
 80081a2:	68fa      	ldr	r2, [r7, #12]
 80081a4:	8912      	ldrh	r2, [r2, #8]
 80081a6:	4293      	cmp	r3, r2
 80081a8:	f0c0 8088 	bcc.w	80082bc <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	61da      	str	r2, [r3, #28]
 80081b2:	2304      	movs	r3, #4
 80081b4:	e08f      	b.n	80082d6 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	0a5b      	lsrs	r3, r3, #9
 80081ba:	68fa      	ldr	r2, [r7, #12]
 80081bc:	8952      	ldrh	r2, [r2, #10]
 80081be:	3a01      	subs	r2, #1
 80081c0:	4013      	ands	r3, r2
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d17a      	bne.n	80082bc <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	699b      	ldr	r3, [r3, #24]
 80081cc:	4619      	mov	r1, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	f7ff fc83 	bl	8007ada <get_fat>
 80081d4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d801      	bhi.n	80081e0 <dir_next+0x8c>
 80081dc:	2302      	movs	r3, #2
 80081de:	e07a      	b.n	80082d6 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081e6:	d101      	bne.n	80081ec <dir_next+0x98>
 80081e8:	2301      	movs	r3, #1
 80081ea:	e074      	b.n	80082d6 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d358      	bcc.n	80082a8 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d104      	bne.n	8008206 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	61da      	str	r2, [r3, #28]
 8008202:	2304      	movs	r3, #4
 8008204:	e067      	b.n	80082d6 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7ff fe59 	bl	8007ec6 <create_chain>
 8008214:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d101      	bne.n	8008220 <dir_next+0xcc>
 800821c:	2307      	movs	r3, #7
 800821e:	e05a      	b.n	80082d6 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d101      	bne.n	800822a <dir_next+0xd6>
 8008226:	2302      	movs	r3, #2
 8008228:	e055      	b.n	80082d6 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008230:	d101      	bne.n	8008236 <dir_next+0xe2>
 8008232:	2301      	movs	r3, #1
 8008234:	e04f      	b.n	80082d6 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8008236:	68f8      	ldr	r0, [r7, #12]
 8008238:	f7ff fb50 	bl	80078dc <sync_window>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d001      	beq.n	8008246 <dir_next+0xf2>
 8008242:	2301      	movs	r3, #1
 8008244:	e047      	b.n	80082d6 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	3338      	adds	r3, #56	@ 0x38
 800824a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800824e:	2100      	movs	r1, #0
 8008250:	4618      	mov	r0, r3
 8008252:	f7ff f949 	bl	80074e8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008256:	2300      	movs	r3, #0
 8008258:	613b      	str	r3, [r7, #16]
 800825a:	6979      	ldr	r1, [r7, #20]
 800825c:	68f8      	ldr	r0, [r7, #12]
 800825e:	f7ff fc1d 	bl	8007a9c <clust2sect>
 8008262:	4602      	mov	r2, r0
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	635a      	str	r2, [r3, #52]	@ 0x34
 8008268:	e012      	b.n	8008290 <dir_next+0x13c>
						fs->wflag = 1;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fb33 	bl	80078dc <sync_window>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d001      	beq.n	8008280 <dir_next+0x12c>
 800827c:	2301      	movs	r3, #1
 800827e:	e02a      	b.n	80082d6 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8008280:	693b      	ldr	r3, [r7, #16]
 8008282:	3301      	adds	r3, #1
 8008284:	613b      	str	r3, [r7, #16]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800828a:	1c5a      	adds	r2, r3, #1
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	635a      	str	r2, [r3, #52]	@ 0x34
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	895b      	ldrh	r3, [r3, #10]
 8008294:	461a      	mov	r2, r3
 8008296:	693b      	ldr	r3, [r7, #16]
 8008298:	4293      	cmp	r3, r2
 800829a:	d3e6      	bcc.n	800826a <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	1ad2      	subs	r2, r2, r3
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	697a      	ldr	r2, [r7, #20]
 80082ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80082ae:	6979      	ldr	r1, [r7, #20]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f7ff fbf3 	bl	8007a9c <clust2sect>
 80082b6:	4602      	mov	r2, r0
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082ce:	441a      	add	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80082d4:	2300      	movs	r3, #0
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3718      	adds	r7, #24
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}

080082de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80082de:	b580      	push	{r7, lr}
 80082e0:	b086      	sub	sp, #24
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	6078      	str	r0, [r7, #4]
 80082e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80082ee:	2100      	movs	r1, #0
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f7ff feb4 	bl	800805e <dir_sdi>
 80082f6:	4603      	mov	r3, r0
 80082f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d12b      	bne.n	8008358 <dir_alloc+0x7a>
		n = 0;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	4619      	mov	r1, r3
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff fb2a 	bl	8007964 <move_window>
 8008310:	4603      	mov	r3, r0
 8008312:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d11d      	bne.n	8008356 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6a1b      	ldr	r3, [r3, #32]
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2be5      	cmp	r3, #229	@ 0xe5
 8008322:	d004      	beq.n	800832e <dir_alloc+0x50>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b00      	cmp	r3, #0
 800832c:	d107      	bne.n	800833e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	3301      	adds	r3, #1
 8008332:	613b      	str	r3, [r7, #16]
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d102      	bne.n	8008342 <dir_alloc+0x64>
 800833c:	e00c      	b.n	8008358 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800833e:	2300      	movs	r3, #0
 8008340:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8008342:	2101      	movs	r1, #1
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff05 	bl	8008154 <dir_next>
 800834a:	4603      	mov	r3, r0
 800834c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800834e:	7dfb      	ldrb	r3, [r7, #23]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d0d7      	beq.n	8008304 <dir_alloc+0x26>
 8008354:	e000      	b.n	8008358 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8008356:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	2b04      	cmp	r3, #4
 800835c:	d101      	bne.n	8008362 <dir_alloc+0x84>
 800835e:	2307      	movs	r3, #7
 8008360:	75fb      	strb	r3, [r7, #23]
	return res;
 8008362:	7dfb      	ldrb	r3, [r7, #23]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	331a      	adds	r3, #26
 800837a:	4618      	mov	r0, r3
 800837c:	f7ff f810 	bl	80073a0 <ld_word>
 8008380:	4603      	mov	r3, r0
 8008382:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b03      	cmp	r3, #3
 800838a:	d109      	bne.n	80083a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	3314      	adds	r3, #20
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff f805 	bl	80073a0 <ld_word>
 8008396:	4603      	mov	r3, r0
 8008398:	041b      	lsls	r3, r3, #16
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4313      	orrs	r3, r2
 800839e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80083a0:	68fb      	ldr	r3, [r7, #12]
}
 80083a2:	4618      	mov	r0, r3
 80083a4:	3710      	adds	r7, #16
 80083a6:	46bd      	mov	sp, r7
 80083a8:	bd80      	pop	{r7, pc}

080083aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80083aa:	b580      	push	{r7, lr}
 80083ac:	b084      	sub	sp, #16
 80083ae:	af00      	add	r7, sp, #0
 80083b0:	60f8      	str	r0, [r7, #12]
 80083b2:	60b9      	str	r1, [r7, #8]
 80083b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	331a      	adds	r3, #26
 80083ba:	687a      	ldr	r2, [r7, #4]
 80083bc:	b292      	uxth	r2, r2
 80083be:	4611      	mov	r1, r2
 80083c0:	4618      	mov	r0, r3
 80083c2:	f7ff f829 	bl	8007418 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b03      	cmp	r3, #3
 80083cc:	d109      	bne.n	80083e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	f103 0214 	add.w	r2, r3, #20
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	0c1b      	lsrs	r3, r3, #16
 80083d8:	b29b      	uxth	r3, r3
 80083da:	4619      	mov	r1, r3
 80083dc:	4610      	mov	r0, r2
 80083de:	f7ff f81b 	bl	8007418 <st_word>
	}
}
 80083e2:	bf00      	nop
 80083e4:	3710      	adds	r7, #16
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
	...

080083ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80083ec:	b590      	push	{r4, r7, lr}
 80083ee:	b087      	sub	sp, #28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	331a      	adds	r3, #26
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe ffd0 	bl	80073a0 <ld_word>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <cmp_lfn+0x1e>
 8008406:	2300      	movs	r3, #0
 8008408:	e059      	b.n	80084be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008412:	1e5a      	subs	r2, r3, #1
 8008414:	4613      	mov	r3, r2
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	4413      	add	r3, r2
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8008420:	2301      	movs	r3, #1
 8008422:	81fb      	strh	r3, [r7, #14]
 8008424:	2300      	movs	r3, #0
 8008426:	613b      	str	r3, [r7, #16]
 8008428:	e033      	b.n	8008492 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800842a:	4a27      	ldr	r2, [pc, #156]	@ (80084c8 <cmp_lfn+0xdc>)
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	4413      	add	r3, r2
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	461a      	mov	r2, r3
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	4413      	add	r3, r2
 8008438:	4618      	mov	r0, r3
 800843a:	f7fe ffb1 	bl	80073a0 <ld_word>
 800843e:	4603      	mov	r3, r0
 8008440:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8008442:	89fb      	ldrh	r3, [r7, #14]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d01a      	beq.n	800847e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	2bfe      	cmp	r3, #254	@ 0xfe
 800844c:	d812      	bhi.n	8008474 <cmp_lfn+0x88>
 800844e:	89bb      	ldrh	r3, [r7, #12]
 8008450:	4618      	mov	r0, r3
 8008452:	f002 fcd5 	bl	800ae00 <ff_wtoupper>
 8008456:	4603      	mov	r3, r0
 8008458:	461c      	mov	r4, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	1c5a      	adds	r2, r3, #1
 800845e:	617a      	str	r2, [r7, #20]
 8008460:	005b      	lsls	r3, r3, #1
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	881b      	ldrh	r3, [r3, #0]
 8008468:	4618      	mov	r0, r3
 800846a:	f002 fcc9 	bl	800ae00 <ff_wtoupper>
 800846e:	4603      	mov	r3, r0
 8008470:	429c      	cmp	r4, r3
 8008472:	d001      	beq.n	8008478 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8008474:	2300      	movs	r3, #0
 8008476:	e022      	b.n	80084be <cmp_lfn+0xd2>
			}
			wc = uc;
 8008478:	89bb      	ldrh	r3, [r7, #12]
 800847a:	81fb      	strh	r3, [r7, #14]
 800847c:	e006      	b.n	800848c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800847e:	89bb      	ldrh	r3, [r7, #12]
 8008480:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008484:	4293      	cmp	r3, r2
 8008486:	d001      	beq.n	800848c <cmp_lfn+0xa0>
 8008488:	2300      	movs	r3, #0
 800848a:	e018      	b.n	80084be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	3301      	adds	r3, #1
 8008490:	613b      	str	r3, [r7, #16]
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b0c      	cmp	r3, #12
 8008496:	d9c8      	bls.n	800842a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d00b      	beq.n	80084bc <cmp_lfn+0xd0>
 80084a4:	89fb      	ldrh	r3, [r7, #14]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <cmp_lfn+0xd0>
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	005b      	lsls	r3, r3, #1
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	4413      	add	r3, r2
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <cmp_lfn+0xd0>
 80084b8:	2300      	movs	r3, #0
 80084ba:	e000      	b.n	80084be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80084bc:	2301      	movs	r3, #1
}
 80084be:	4618      	mov	r0, r3
 80084c0:	371c      	adds	r7, #28
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd90      	pop	{r4, r7, pc}
 80084c6:	bf00      	nop
 80084c8:	08012b74 	.word	0x08012b74

080084cc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4611      	mov	r1, r2
 80084d8:	461a      	mov	r2, r3
 80084da:	460b      	mov	r3, r1
 80084dc:	71fb      	strb	r3, [r7, #7]
 80084de:	4613      	mov	r3, r2
 80084e0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	330d      	adds	r3, #13
 80084e6:	79ba      	ldrb	r2, [r7, #6]
 80084e8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	330b      	adds	r3, #11
 80084ee:	220f      	movs	r2, #15
 80084f0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	330c      	adds	r3, #12
 80084f6:	2200      	movs	r2, #0
 80084f8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	331a      	adds	r3, #26
 80084fe:	2100      	movs	r1, #0
 8008500:	4618      	mov	r0, r3
 8008502:	f7fe ff89 	bl	8007418 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8008506:	79fb      	ldrb	r3, [r7, #7]
 8008508:	1e5a      	subs	r2, r3, #1
 800850a:	4613      	mov	r3, r2
 800850c:	005b      	lsls	r3, r3, #1
 800850e:	4413      	add	r3, r2
 8008510:	009b      	lsls	r3, r3, #2
 8008512:	4413      	add	r3, r2
 8008514:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8008516:	2300      	movs	r3, #0
 8008518:	82fb      	strh	r3, [r7, #22]
 800851a:	2300      	movs	r3, #0
 800851c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800851e:	8afb      	ldrh	r3, [r7, #22]
 8008520:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008524:	4293      	cmp	r3, r2
 8008526:	d007      	beq.n	8008538 <put_lfn+0x6c>
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	61fa      	str	r2, [r7, #28]
 800852e:	005b      	lsls	r3, r3, #1
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8008538:	4a17      	ldr	r2, [pc, #92]	@ (8008598 <put_lfn+0xcc>)
 800853a:	69bb      	ldr	r3, [r7, #24]
 800853c:	4413      	add	r3, r2
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	4413      	add	r3, r2
 8008546:	8afa      	ldrh	r2, [r7, #22]
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f7fe ff64 	bl	8007418 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8008550:	8afb      	ldrh	r3, [r7, #22]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d102      	bne.n	800855c <put_lfn+0x90>
 8008556:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800855a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	3301      	adds	r3, #1
 8008560:	61bb      	str	r3, [r7, #24]
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b0c      	cmp	r3, #12
 8008566:	d9da      	bls.n	800851e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8008568:	8afb      	ldrh	r3, [r7, #22]
 800856a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800856e:	4293      	cmp	r3, r2
 8008570:	d006      	beq.n	8008580 <put_lfn+0xb4>
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	005b      	lsls	r3, r3, #1
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d103      	bne.n	8008588 <put_lfn+0xbc>
 8008580:	79fb      	ldrb	r3, [r7, #7]
 8008582:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008586:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	79fa      	ldrb	r2, [r7, #7]
 800858c:	701a      	strb	r2, [r3, #0]
}
 800858e:	bf00      	nop
 8008590:	3720      	adds	r7, #32
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	08012b74 	.word	0x08012b74

0800859c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08c      	sub	sp, #48	@ 0x30
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	60f8      	str	r0, [r7, #12]
 80085a4:	60b9      	str	r1, [r7, #8]
 80085a6:	607a      	str	r2, [r7, #4]
 80085a8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80085aa:	220b      	movs	r2, #11
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	68f8      	ldr	r0, [r7, #12]
 80085b0:	f7fe ff79 	bl	80074a6 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	2b05      	cmp	r3, #5
 80085b8:	d92b      	bls.n	8008612 <gen_numname+0x76>
		sr = seq;
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80085be:	e022      	b.n	8008606 <gen_numname+0x6a>
			wc = *lfn++;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	1c9a      	adds	r2, r3, #2
 80085c4:	607a      	str	r2, [r7, #4]
 80085c6:	881b      	ldrh	r3, [r3, #0]
 80085c8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 80085ca:	2300      	movs	r3, #0
 80085cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80085ce:	e017      	b.n	8008600 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80085d0:	69fb      	ldr	r3, [r7, #28]
 80085d2:	005a      	lsls	r2, r3, #1
 80085d4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	4413      	add	r3, r2
 80085dc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80085de:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80085e0:	085b      	lsrs	r3, r3, #1
 80085e2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80085e4:	69fb      	ldr	r3, [r7, #28]
 80085e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d005      	beq.n	80085fa <gen_numname+0x5e>
 80085ee:	69fb      	ldr	r3, [r7, #28]
 80085f0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 80085f4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 80085f8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80085fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085fc:	3301      	adds	r3, #1
 80085fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008602:	2b0f      	cmp	r3, #15
 8008604:	d9e4      	bls.n	80085d0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d1d8      	bne.n	80085c0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8008612:	2307      	movs	r3, #7
 8008614:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	b2db      	uxtb	r3, r3
 800861a:	f003 030f 	and.w	r3, r3, #15
 800861e:	b2db      	uxtb	r3, r3
 8008620:	3330      	adds	r3, #48	@ 0x30
 8008622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8008626:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800862a:	2b39      	cmp	r3, #57	@ 0x39
 800862c:	d904      	bls.n	8008638 <gen_numname+0x9c>
 800862e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008632:	3307      	adds	r3, #7
 8008634:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8008638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800863a:	1e5a      	subs	r2, r3, #1
 800863c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800863e:	3330      	adds	r3, #48	@ 0x30
 8008640:	443b      	add	r3, r7
 8008642:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8008646:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	091b      	lsrs	r3, r3, #4
 800864e:	603b      	str	r3, [r7, #0]
	} while (seq);
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1df      	bne.n	8008616 <gen_numname+0x7a>
	ns[i] = '~';
 8008656:	f107 0214 	add.w	r2, r7, #20
 800865a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865c:	4413      	add	r3, r2
 800865e:	227e      	movs	r2, #126	@ 0x7e
 8008660:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8008662:	2300      	movs	r3, #0
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
 8008666:	e002      	b.n	800866e <gen_numname+0xd2>
 8008668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866a:	3301      	adds	r3, #1
 800866c:	627b      	str	r3, [r7, #36]	@ 0x24
 800866e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008672:	429a      	cmp	r2, r3
 8008674:	d205      	bcs.n	8008682 <gen_numname+0xe6>
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867a:	4413      	add	r3, r2
 800867c:	781b      	ldrb	r3, [r3, #0]
 800867e:	2b20      	cmp	r3, #32
 8008680:	d1f2      	bne.n	8008668 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8008682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008684:	2b07      	cmp	r3, #7
 8008686:	d807      	bhi.n	8008698 <gen_numname+0xfc>
 8008688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868a:	1c5a      	adds	r2, r3, #1
 800868c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800868e:	3330      	adds	r3, #48	@ 0x30
 8008690:	443b      	add	r3, r7
 8008692:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8008696:	e000      	b.n	800869a <gen_numname+0xfe>
 8008698:	2120      	movs	r1, #32
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	1c5a      	adds	r2, r3, #1
 800869e:	627a      	str	r2, [r7, #36]	@ 0x24
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	4413      	add	r3, r2
 80086a4:	460a      	mov	r2, r1
 80086a6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80086a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086aa:	2b07      	cmp	r3, #7
 80086ac:	d9e9      	bls.n	8008682 <gen_numname+0xe6>
}
 80086ae:	bf00      	nop
 80086b0:	bf00      	nop
 80086b2:	3730      	adds	r7, #48	@ 0x30
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80086b8:	b480      	push	{r7}
 80086ba:	b085      	sub	sp, #20
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80086c4:	230b      	movs	r3, #11
 80086c6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
 80086ca:	b2da      	uxtb	r2, r3
 80086cc:	0852      	lsrs	r2, r2, #1
 80086ce:	01db      	lsls	r3, r3, #7
 80086d0:	4313      	orrs	r3, r2
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	1c59      	adds	r1, r3, #1
 80086d8:	6079      	str	r1, [r7, #4]
 80086da:	781b      	ldrb	r3, [r3, #0]
 80086dc:	4413      	add	r3, r2
 80086de:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	3b01      	subs	r3, #1
 80086e4:	60bb      	str	r3, [r7, #8]
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d1ed      	bne.n	80086c8 <sum_sfn+0x10>
	return sum;
 80086ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3714      	adds	r7, #20
 80086f2:	46bd      	mov	sp, r7
 80086f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f8:	4770      	bx	lr

080086fa <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80086fa:	b580      	push	{r7, lr}
 80086fc:	b086      	sub	sp, #24
 80086fe:	af00      	add	r7, sp, #0
 8008700:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8008708:	2100      	movs	r1, #0
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f7ff fca7 	bl	800805e <dir_sdi>
 8008710:	4603      	mov	r3, r0
 8008712:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d001      	beq.n	800871e <dir_find+0x24>
 800871a:	7dfb      	ldrb	r3, [r7, #23]
 800871c:	e0a9      	b.n	8008872 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800871e:	23ff      	movs	r3, #255	@ 0xff
 8008720:	753b      	strb	r3, [r7, #20]
 8008722:	7d3b      	ldrb	r3, [r7, #20]
 8008724:	757b      	strb	r3, [r7, #21]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	69db      	ldr	r3, [r3, #28]
 8008732:	4619      	mov	r1, r3
 8008734:	6938      	ldr	r0, [r7, #16]
 8008736:	f7ff f915 	bl	8007964 <move_window>
 800873a:	4603      	mov	r3, r0
 800873c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800873e:	7dfb      	ldrb	r3, [r7, #23]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f040 8090 	bne.w	8008866 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6a1b      	ldr	r3, [r3, #32]
 800874a:	781b      	ldrb	r3, [r3, #0]
 800874c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800874e:	7dbb      	ldrb	r3, [r7, #22]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d102      	bne.n	800875a <dir_find+0x60>
 8008754:	2304      	movs	r3, #4
 8008756:	75fb      	strb	r3, [r7, #23]
 8008758:	e08a      	b.n	8008870 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6a1b      	ldr	r3, [r3, #32]
 800875e:	330b      	adds	r3, #11
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008766:	73fb      	strb	r3, [r7, #15]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	7bfa      	ldrb	r2, [r7, #15]
 800876c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800876e:	7dbb      	ldrb	r3, [r7, #22]
 8008770:	2be5      	cmp	r3, #229	@ 0xe5
 8008772:	d007      	beq.n	8008784 <dir_find+0x8a>
 8008774:	7bfb      	ldrb	r3, [r7, #15]
 8008776:	f003 0308 	and.w	r3, r3, #8
 800877a:	2b00      	cmp	r3, #0
 800877c:	d009      	beq.n	8008792 <dir_find+0x98>
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	2b0f      	cmp	r3, #15
 8008782:	d006      	beq.n	8008792 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008784:	23ff      	movs	r3, #255	@ 0xff
 8008786:	757b      	strb	r3, [r7, #21]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	f04f 32ff 	mov.w	r2, #4294967295
 800878e:	631a      	str	r2, [r3, #48]	@ 0x30
 8008790:	e05e      	b.n	8008850 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b0f      	cmp	r3, #15
 8008796:	d136      	bne.n	8008806 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800879e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d154      	bne.n	8008850 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80087a6:	7dbb      	ldrb	r3, [r7, #22]
 80087a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d00d      	beq.n	80087cc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a1b      	ldr	r3, [r3, #32]
 80087b4:	7b5b      	ldrb	r3, [r3, #13]
 80087b6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80087b8:	7dbb      	ldrb	r3, [r7, #22]
 80087ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80087be:	75bb      	strb	r3, [r7, #22]
 80087c0:	7dbb      	ldrb	r3, [r7, #22]
 80087c2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695a      	ldr	r2, [r3, #20]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80087cc:	7dba      	ldrb	r2, [r7, #22]
 80087ce:	7d7b      	ldrb	r3, [r7, #21]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d115      	bne.n	8008800 <dir_find+0x106>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6a1b      	ldr	r3, [r3, #32]
 80087d8:	330d      	adds	r3, #13
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	7d3a      	ldrb	r2, [r7, #20]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d10e      	bne.n	8008800 <dir_find+0x106>
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	68da      	ldr	r2, [r3, #12]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4610      	mov	r0, r2
 80087ee:	f7ff fdfd 	bl	80083ec <cmp_lfn>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d003      	beq.n	8008800 <dir_find+0x106>
 80087f8:	7d7b      	ldrb	r3, [r7, #21]
 80087fa:	3b01      	subs	r3, #1
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	e000      	b.n	8008802 <dir_find+0x108>
 8008800:	23ff      	movs	r3, #255	@ 0xff
 8008802:	757b      	strb	r3, [r7, #21]
 8008804:	e024      	b.n	8008850 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8008806:	7d7b      	ldrb	r3, [r7, #21]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d109      	bne.n	8008820 <dir_find+0x126>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6a1b      	ldr	r3, [r3, #32]
 8008810:	4618      	mov	r0, r3
 8008812:	f7ff ff51 	bl	80086b8 <sum_sfn>
 8008816:	4603      	mov	r3, r0
 8008818:	461a      	mov	r2, r3
 800881a:	7d3b      	ldrb	r3, [r7, #20]
 800881c:	4293      	cmp	r3, r2
 800881e:	d024      	beq.n	800886a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10a      	bne.n	8008844 <dir_find+0x14a>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6a18      	ldr	r0, [r3, #32]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	3324      	adds	r3, #36	@ 0x24
 8008836:	220b      	movs	r2, #11
 8008838:	4619      	mov	r1, r3
 800883a:	f7fe fe70 	bl	800751e <mem_cmp>
 800883e:	4603      	mov	r3, r0
 8008840:	2b00      	cmp	r3, #0
 8008842:	d014      	beq.n	800886e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8008844:	23ff      	movs	r3, #255	@ 0xff
 8008846:	757b      	strb	r3, [r7, #21]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f04f 32ff 	mov.w	r2, #4294967295
 800884e:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8008850:	2100      	movs	r1, #0
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff fc7e 	bl	8008154 <dir_next>
 8008858:	4603      	mov	r3, r0
 800885a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800885c:	7dfb      	ldrb	r3, [r7, #23]
 800885e:	2b00      	cmp	r3, #0
 8008860:	f43f af65 	beq.w	800872e <dir_find+0x34>
 8008864:	e004      	b.n	8008870 <dir_find+0x176>
		if (res != FR_OK) break;
 8008866:	bf00      	nop
 8008868:	e002      	b.n	8008870 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800886a:	bf00      	nop
 800886c:	e000      	b.n	8008870 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800886e:	bf00      	nop

	return res;
 8008870:	7dfb      	ldrb	r3, [r7, #23]
}
 8008872:	4618      	mov	r0, r3
 8008874:	3718      	adds	r7, #24
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b08c      	sub	sp, #48	@ 0x30
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008890:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d001      	beq.n	800889c <dir_register+0x20>
 8008898:	2306      	movs	r3, #6
 800889a:	e0e0      	b.n	8008a5e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800889c:	2300      	movs	r3, #0
 800889e:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a0:	e002      	b.n	80088a8 <dir_register+0x2c>
 80088a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a4:	3301      	adds	r3, #1
 80088a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	68da      	ldr	r2, [r3, #12]
 80088ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ae:	005b      	lsls	r3, r3, #1
 80088b0:	4413      	add	r3, r2
 80088b2:	881b      	ldrh	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d1f4      	bne.n	80088a2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80088be:	f107 030c 	add.w	r3, r7, #12
 80088c2:	220c      	movs	r2, #12
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7fe fdee 	bl	80074a6 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d032      	beq.n	800893a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2240      	movs	r2, #64	@ 0x40
 80088d8:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 80088dc:	2301      	movs	r3, #1
 80088de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80088e0:	e016      	b.n	8008910 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	f107 010c 	add.w	r1, r7, #12
 80088f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088f2:	f7ff fe53 	bl	800859c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f7ff feff 	bl	80086fa <dir_find>
 80088fc:	4603      	mov	r3, r0
 80088fe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8008902:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008906:	2b00      	cmp	r3, #0
 8008908:	d106      	bne.n	8008918 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800890a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890c:	3301      	adds	r3, #1
 800890e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008912:	2b63      	cmp	r3, #99	@ 0x63
 8008914:	d9e5      	bls.n	80088e2 <dir_register+0x66>
 8008916:	e000      	b.n	800891a <dir_register+0x9e>
			if (res != FR_OK) break;
 8008918:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	2b64      	cmp	r3, #100	@ 0x64
 800891e:	d101      	bne.n	8008924 <dir_register+0xa8>
 8008920:	2307      	movs	r3, #7
 8008922:	e09c      	b.n	8008a5e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8008924:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008928:	2b04      	cmp	r3, #4
 800892a:	d002      	beq.n	8008932 <dir_register+0xb6>
 800892c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008930:	e095      	b.n	8008a5e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8008932:	7dfa      	ldrb	r2, [r7, #23]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800893a:	7dfb      	ldrb	r3, [r7, #23]
 800893c:	f003 0302 	and.w	r3, r3, #2
 8008940:	2b00      	cmp	r3, #0
 8008942:	d007      	beq.n	8008954 <dir_register+0xd8>
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	330c      	adds	r3, #12
 8008948:	4a47      	ldr	r2, [pc, #284]	@ (8008a68 <dir_register+0x1ec>)
 800894a:	fba2 2303 	umull	r2, r3, r2, r3
 800894e:	089b      	lsrs	r3, r3, #2
 8008950:	3301      	adds	r3, #1
 8008952:	e000      	b.n	8008956 <dir_register+0xda>
 8008954:	2301      	movs	r3, #1
 8008956:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8008958:	6a39      	ldr	r1, [r7, #32]
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff fcbf 	bl	80082de <dir_alloc>
 8008960:	4603      	mov	r3, r0
 8008962:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8008966:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800896a:	2b00      	cmp	r3, #0
 800896c:	d148      	bne.n	8008a00 <dir_register+0x184>
 800896e:	6a3b      	ldr	r3, [r7, #32]
 8008970:	3b01      	subs	r3, #1
 8008972:	623b      	str	r3, [r7, #32]
 8008974:	6a3b      	ldr	r3, [r7, #32]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d042      	beq.n	8008a00 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695a      	ldr	r2, [r3, #20]
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	015b      	lsls	r3, r3, #5
 8008982:	1ad3      	subs	r3, r2, r3
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7ff fb69 	bl	800805e <dir_sdi>
 800898c:	4603      	mov	r3, r0
 800898e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008992:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008996:	2b00      	cmp	r3, #0
 8008998:	d132      	bne.n	8008a00 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	3324      	adds	r3, #36	@ 0x24
 800899e:	4618      	mov	r0, r3
 80089a0:	f7ff fe8a 	bl	80086b8 <sum_sfn>
 80089a4:	4603      	mov	r3, r0
 80089a6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69db      	ldr	r3, [r3, #28]
 80089ac:	4619      	mov	r1, r3
 80089ae:	69f8      	ldr	r0, [r7, #28]
 80089b0:	f7fe ffd8 	bl	8007964 <move_window>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 80089ba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d11d      	bne.n	80089fe <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	68d8      	ldr	r0, [r3, #12]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6a19      	ldr	r1, [r3, #32]
 80089ca:	6a3b      	ldr	r3, [r7, #32]
 80089cc:	b2da      	uxtb	r2, r3
 80089ce:	7efb      	ldrb	r3, [r7, #27]
 80089d0:	f7ff fd7c 	bl	80084cc <put_lfn>
				fs->wflag = 1;
 80089d4:	69fb      	ldr	r3, [r7, #28]
 80089d6:	2201      	movs	r2, #1
 80089d8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f7ff fbb9 	bl	8008154 <dir_next>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 80089e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d107      	bne.n	8008a00 <dir_register+0x184>
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	3b01      	subs	r3, #1
 80089f4:	623b      	str	r3, [r7, #32]
 80089f6:	6a3b      	ldr	r3, [r7, #32]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1d5      	bne.n	80089a8 <dir_register+0x12c>
 80089fc:	e000      	b.n	8008a00 <dir_register+0x184>
				if (res != FR_OK) break;
 80089fe:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008a00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d128      	bne.n	8008a5a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	69f8      	ldr	r0, [r7, #28]
 8008a10:	f7fe ffa8 	bl	8007964 <move_window>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8008a1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d11b      	bne.n	8008a5a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	2220      	movs	r2, #32
 8008a28:	2100      	movs	r1, #0
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f7fe fd5c 	bl	80074e8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6a18      	ldr	r0, [r3, #32]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	3324      	adds	r3, #36	@ 0x24
 8008a38:	220b      	movs	r2, #11
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	f7fe fd33 	bl	80074a6 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	330c      	adds	r3, #12
 8008a4c:	f002 0218 	and.w	r2, r2, #24
 8008a50:	b2d2      	uxtb	r2, r2
 8008a52:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	2201      	movs	r2, #1
 8008a58:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008a5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3730      	adds	r7, #48	@ 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	4ec4ec4f 	.word	0x4ec4ec4f

08008a6c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	@ 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	613b      	str	r3, [r7, #16]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	60fb      	str	r3, [r7, #12]
 8008a84:	2300      	movs	r3, #0
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	1c5a      	adds	r2, r3, #1
 8008a90:	61ba      	str	r2, [r7, #24]
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4413      	add	r3, r2
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8008a9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008a9c:	2b1f      	cmp	r3, #31
 8008a9e:	d940      	bls.n	8008b22 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8008aa0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa2:	2b2f      	cmp	r3, #47	@ 0x2f
 8008aa4:	d006      	beq.n	8008ab4 <create_name+0x48>
 8008aa6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aa8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008aaa:	d110      	bne.n	8008ace <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8008aac:	e002      	b.n	8008ab4 <create_name+0x48>
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	3301      	adds	r3, #1
 8008ab2:	61bb      	str	r3, [r7, #24]
 8008ab4:	693a      	ldr	r2, [r7, #16]
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	4413      	add	r3, r2
 8008aba:	781b      	ldrb	r3, [r3, #0]
 8008abc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008abe:	d0f6      	beq.n	8008aae <create_name+0x42>
 8008ac0:	693a      	ldr	r2, [r7, #16]
 8008ac2:	69bb      	ldr	r3, [r7, #24]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	2b5c      	cmp	r3, #92	@ 0x5c
 8008aca:	d0f0      	beq.n	8008aae <create_name+0x42>
			break;
 8008acc:	e02a      	b.n	8008b24 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2bfe      	cmp	r3, #254	@ 0xfe
 8008ad2:	d901      	bls.n	8008ad8 <create_name+0x6c>
 8008ad4:	2306      	movs	r3, #6
 8008ad6:	e17d      	b.n	8008dd4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8008ad8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ada:	b2db      	uxtb	r3, r3
 8008adc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8008ade:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	f002 f950 	bl	800ad88 <ff_convert>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8008aec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d101      	bne.n	8008af6 <create_name+0x8a>
 8008af2:	2306      	movs	r3, #6
 8008af4:	e16e      	b.n	8008dd4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8008af6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008af8:	2b7f      	cmp	r3, #127	@ 0x7f
 8008afa:	d809      	bhi.n	8008b10 <create_name+0xa4>
 8008afc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008afe:	4619      	mov	r1, r3
 8008b00:	488d      	ldr	r0, [pc, #564]	@ (8008d38 <create_name+0x2cc>)
 8008b02:	f7fe fd33 	bl	800756c <chk_chr>
 8008b06:	4603      	mov	r3, r0
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d001      	beq.n	8008b10 <create_name+0xa4>
 8008b0c:	2306      	movs	r3, #6
 8008b0e:	e161      	b.n	8008dd4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	1c5a      	adds	r2, r3, #1
 8008b14:	617a      	str	r2, [r7, #20]
 8008b16:	005b      	lsls	r3, r3, #1
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008b1e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8008b20:	e7b4      	b.n	8008a8c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8008b22:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8008b24:	693a      	ldr	r2, [r7, #16]
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	441a      	add	r2, r3
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008b2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b30:	2b1f      	cmp	r3, #31
 8008b32:	d801      	bhi.n	8008b38 <create_name+0xcc>
 8008b34:	2304      	movs	r3, #4
 8008b36:	e000      	b.n	8008b3a <create_name+0xce>
 8008b38:	2300      	movs	r3, #0
 8008b3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b3e:	e011      	b.n	8008b64 <create_name+0xf8>
		w = lfn[di - 1];
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008b46:	3b01      	subs	r3, #1
 8008b48:	005b      	lsls	r3, r3, #1
 8008b4a:	68fa      	ldr	r2, [r7, #12]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	881b      	ldrh	r3, [r3, #0]
 8008b50:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8008b52:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b54:	2b20      	cmp	r3, #32
 8008b56:	d002      	beq.n	8008b5e <create_name+0xf2>
 8008b58:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008b5a:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b5c:	d106      	bne.n	8008b6c <create_name+0x100>
		di--;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	3b01      	subs	r3, #1
 8008b62:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1ea      	bne.n	8008b40 <create_name+0xd4>
 8008b6a:	e000      	b.n	8008b6e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8008b6c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	4413      	add	r3, r2
 8008b76:	2200      	movs	r2, #0
 8008b78:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d101      	bne.n	8008b84 <create_name+0x118>
 8008b80:	2306      	movs	r3, #6
 8008b82:	e127      	b.n	8008dd4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3324      	adds	r3, #36	@ 0x24
 8008b88:	220b      	movs	r2, #11
 8008b8a:	2120      	movs	r1, #32
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fe fcab 	bl	80074e8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8008b92:	2300      	movs	r3, #0
 8008b94:	61bb      	str	r3, [r7, #24]
 8008b96:	e002      	b.n	8008b9e <create_name+0x132>
 8008b98:	69bb      	ldr	r3, [r7, #24]
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	61bb      	str	r3, [r7, #24]
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	005b      	lsls	r3, r3, #1
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	2b20      	cmp	r3, #32
 8008baa:	d0f5      	beq.n	8008b98 <create_name+0x12c>
 8008bac:	69bb      	ldr	r3, [r7, #24]
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	68fa      	ldr	r2, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bb8:	d0ee      	beq.n	8008b98 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d009      	beq.n	8008bd4 <create_name+0x168>
 8008bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc4:	f043 0303 	orr.w	r3, r3, #3
 8008bc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8008bcc:	e002      	b.n	8008bd4 <create_name+0x168>
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	617b      	str	r3, [r7, #20]
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <create_name+0x182>
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008be0:	3b01      	subs	r3, #1
 8008be2:	005b      	lsls	r3, r3, #1
 8008be4:	68fa      	ldr	r2, [r7, #12]
 8008be6:	4413      	add	r3, r2
 8008be8:	881b      	ldrh	r3, [r3, #0]
 8008bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8008bec:	d1ef      	bne.n	8008bce <create_name+0x162>

	i = b = 0; ni = 8;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	623b      	str	r3, [r7, #32]
 8008bf8:	2308      	movs	r3, #8
 8008bfa:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	61ba      	str	r2, [r7, #24]
 8008c02:	005b      	lsls	r3, r3, #1
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	881b      	ldrh	r3, [r3, #0]
 8008c0a:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8008c0c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 8090 	beq.w	8008d34 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8008c14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	d006      	beq.n	8008c28 <create_name+0x1bc>
 8008c1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c1e:	d10a      	bne.n	8008c36 <create_name+0x1ca>
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d006      	beq.n	8008c36 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8008c28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c2c:	f043 0303 	orr.w	r3, r3, #3
 8008c30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c34:	e07d      	b.n	8008d32 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d203      	bcs.n	8008c46 <create_name+0x1da>
 8008c3e:	69ba      	ldr	r2, [r7, #24]
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d123      	bne.n	8008c8e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	2b0b      	cmp	r3, #11
 8008c4a:	d106      	bne.n	8008c5a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8008c4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c50:	f043 0303 	orr.w	r3, r3, #3
 8008c54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008c58:	e075      	b.n	8008d46 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8008c5a:	69ba      	ldr	r2, [r7, #24]
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	429a      	cmp	r2, r3
 8008c60:	d005      	beq.n	8008c6e <create_name+0x202>
 8008c62:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c66:	f043 0303 	orr.w	r3, r3, #3
 8008c6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d866      	bhi.n	8008d44 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	61bb      	str	r3, [r7, #24]
 8008c7a:	2308      	movs	r3, #8
 8008c7c:	623b      	str	r3, [r7, #32]
 8008c7e:	230b      	movs	r3, #11
 8008c80:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8008c82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c86:	009b      	lsls	r3, r3, #2
 8008c88:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008c8c:	e051      	b.n	8008d32 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8008c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c90:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c92:	d914      	bls.n	8008cbe <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8008c94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008c96:	2100      	movs	r1, #0
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f002 f875 	bl	800ad88 <ff_convert>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8008ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d004      	beq.n	8008cb2 <create_name+0x246>
 8008ca8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008caa:	3b80      	subs	r3, #128	@ 0x80
 8008cac:	4a23      	ldr	r2, [pc, #140]	@ (8008d3c <create_name+0x2d0>)
 8008cae:	5cd3      	ldrb	r3, [r2, r3]
 8008cb0:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8008cb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cb6:	f043 0302 	orr.w	r3, r3, #2
 8008cba:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8008cbe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d007      	beq.n	8008cd4 <create_name+0x268>
 8008cc4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	481d      	ldr	r0, [pc, #116]	@ (8008d40 <create_name+0x2d4>)
 8008cca:	f7fe fc4f 	bl	800756c <chk_chr>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d008      	beq.n	8008ce6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8008cd4:	235f      	movs	r3, #95	@ 0x5f
 8008cd6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8008cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008cdc:	f043 0303 	orr.w	r3, r3, #3
 8008ce0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8008ce4:	e01b      	b.n	8008d1e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8008ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008ce8:	2b40      	cmp	r3, #64	@ 0x40
 8008cea:	d909      	bls.n	8008d00 <create_name+0x294>
 8008cec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008cee:	2b5a      	cmp	r3, #90	@ 0x5a
 8008cf0:	d806      	bhi.n	8008d00 <create_name+0x294>
					b |= 2;
 8008cf2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cf6:	f043 0302 	orr.w	r3, r3, #2
 8008cfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008cfe:	e00e      	b.n	8008d1e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8008d00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d02:	2b60      	cmp	r3, #96	@ 0x60
 8008d04:	d90b      	bls.n	8008d1e <create_name+0x2b2>
 8008d06:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d08:	2b7a      	cmp	r3, #122	@ 0x7a
 8008d0a:	d808      	bhi.n	8008d1e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8008d0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d10:	f043 0301 	orr.w	r3, r3, #1
 8008d14:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008d18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008d1a:	3b20      	subs	r3, #32
 8008d1c:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	1c5a      	adds	r2, r3, #1
 8008d22:	623a      	str	r2, [r7, #32]
 8008d24:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8008d26:	b2d1      	uxtb	r1, r2
 8008d28:	687a      	ldr	r2, [r7, #4]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	460a      	mov	r2, r1
 8008d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8008d32:	e763      	b.n	8008bfc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8008d34:	bf00      	nop
 8008d36:	e006      	b.n	8008d46 <create_name+0x2da>
 8008d38:	080121c0 	.word	0x080121c0
 8008d3c:	08012af4 	.word	0x08012af4
 8008d40:	080121cc 	.word	0x080121cc
			if (si > di) break;			/* No extension */
 8008d44:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8008d4c:	2be5      	cmp	r3, #229	@ 0xe5
 8008d4e:	d103      	bne.n	8008d58 <create_name+0x2ec>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2205      	movs	r2, #5
 8008d54:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	2b08      	cmp	r3, #8
 8008d5c:	d104      	bne.n	8008d68 <create_name+0x2fc>
 8008d5e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d62:	009b      	lsls	r3, r3, #2
 8008d64:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8008d68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d6c:	f003 030c 	and.w	r3, r3, #12
 8008d70:	2b0c      	cmp	r3, #12
 8008d72:	d005      	beq.n	8008d80 <create_name+0x314>
 8008d74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d78:	f003 0303 	and.w	r3, r3, #3
 8008d7c:	2b03      	cmp	r3, #3
 8008d7e:	d105      	bne.n	8008d8c <create_name+0x320>
 8008d80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d84:	f043 0302 	orr.w	r3, r3, #2
 8008d88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8008d8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d90:	f003 0302 	and.w	r3, r3, #2
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d117      	bne.n	8008dc8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8008d98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008d9c:	f003 0303 	and.w	r3, r3, #3
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	d105      	bne.n	8008db0 <create_name+0x344>
 8008da4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008da8:	f043 0310 	orr.w	r3, r3, #16
 8008dac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008db0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008db4:	f003 030c 	and.w	r3, r3, #12
 8008db8:	2b04      	cmp	r3, #4
 8008dba:	d105      	bne.n	8008dc8 <create_name+0x35c>
 8008dbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008dc0:	f043 0308 	orr.w	r3, r3, #8
 8008dc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008dce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008dd2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3728      	adds	r7, #40	@ 0x28
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008df0:	e002      	b.n	8008df8 <follow_path+0x1c>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	603b      	str	r3, [r7, #0]
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	2b2f      	cmp	r3, #47	@ 0x2f
 8008dfe:	d0f8      	beq.n	8008df2 <follow_path+0x16>
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e06:	d0f4      	beq.n	8008df2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	2b1f      	cmp	r3, #31
 8008e14:	d80a      	bhi.n	8008e2c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2280      	movs	r2, #128	@ 0x80
 8008e1a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008e1e:	2100      	movs	r1, #0
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f91c 	bl	800805e <dir_sdi>
 8008e26:	4603      	mov	r3, r0
 8008e28:	75fb      	strb	r3, [r7, #23]
 8008e2a:	e043      	b.n	8008eb4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008e2c:	463b      	mov	r3, r7
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f7ff fe1b 	bl	8008a6c <create_name>
 8008e36:	4603      	mov	r3, r0
 8008e38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d134      	bne.n	8008eaa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f7ff fc5a 	bl	80086fa <dir_find>
 8008e46:	4603      	mov	r3, r0
 8008e48:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8008e50:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8008e52:	7dfb      	ldrb	r3, [r7, #23]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00a      	beq.n	8008e6e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8008e58:	7dfb      	ldrb	r3, [r7, #23]
 8008e5a:	2b04      	cmp	r3, #4
 8008e5c:	d127      	bne.n	8008eae <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8008e5e:	7afb      	ldrb	r3, [r7, #11]
 8008e60:	f003 0304 	and.w	r3, r3, #4
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d122      	bne.n	8008eae <follow_path+0xd2>
 8008e68:	2305      	movs	r3, #5
 8008e6a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008e6c:	e01f      	b.n	8008eae <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008e6e:	7afb      	ldrb	r3, [r7, #11]
 8008e70:	f003 0304 	and.w	r3, r3, #4
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d11c      	bne.n	8008eb2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	799b      	ldrb	r3, [r3, #6]
 8008e7c:	f003 0310 	and.w	r3, r3, #16
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d102      	bne.n	8008e8a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008e84:	2305      	movs	r3, #5
 8008e86:	75fb      	strb	r3, [r7, #23]
 8008e88:	e014      	b.n	8008eb4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	695b      	ldr	r3, [r3, #20]
 8008e94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e98:	4413      	add	r3, r2
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	68f8      	ldr	r0, [r7, #12]
 8008e9e:	f7ff fa65 	bl	800836c <ld_clust>
 8008ea2:	4602      	mov	r2, r0
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008ea8:	e7c0      	b.n	8008e2c <follow_path+0x50>
			if (res != FR_OK) break;
 8008eaa:	bf00      	nop
 8008eac:	e002      	b.n	8008eb4 <follow_path+0xd8>
				break;
 8008eae:	bf00      	nop
 8008eb0:	e000      	b.n	8008eb4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008eb2:	bf00      	nop
			}
		}
	}

	return res;
 8008eb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	3718      	adds	r7, #24
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}

08008ebe <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8008ebe:	b480      	push	{r7}
 8008ec0:	b087      	sub	sp, #28
 8008ec2:	af00      	add	r7, sp, #0
 8008ec4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8008eca:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d031      	beq.n	8008f38 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	617b      	str	r3, [r7, #20]
 8008eda:	e002      	b.n	8008ee2 <get_ldnumber+0x24>
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	3301      	adds	r3, #1
 8008ee0:	617b      	str	r3, [r7, #20]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	781b      	ldrb	r3, [r3, #0]
 8008ee6:	2b1f      	cmp	r3, #31
 8008ee8:	d903      	bls.n	8008ef2 <get_ldnumber+0x34>
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ef0:	d1f4      	bne.n	8008edc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008ef2:	697b      	ldr	r3, [r7, #20]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	2b3a      	cmp	r3, #58	@ 0x3a
 8008ef8:	d11c      	bne.n	8008f34 <get_ldnumber+0x76>
			tp = *path;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	1c5a      	adds	r2, r3, #1
 8008f04:	60fa      	str	r2, [r7, #12]
 8008f06:	781b      	ldrb	r3, [r3, #0]
 8008f08:	3b30      	subs	r3, #48	@ 0x30
 8008f0a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	2b09      	cmp	r3, #9
 8008f10:	d80e      	bhi.n	8008f30 <get_ldnumber+0x72>
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	697b      	ldr	r3, [r7, #20]
 8008f16:	429a      	cmp	r2, r3
 8008f18:	d10a      	bne.n	8008f30 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d107      	bne.n	8008f30 <get_ldnumber+0x72>
					vol = (int)i;
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	3301      	adds	r3, #1
 8008f28:	617b      	str	r3, [r7, #20]
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	e002      	b.n	8008f3a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008f34:	2300      	movs	r3, #0
 8008f36:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008f38:	693b      	ldr	r3, [r7, #16]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	371c      	adds	r7, #28
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f44:	4770      	bx	lr
	...

08008f48 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b082      	sub	sp, #8
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	70da      	strb	r2, [r3, #3]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8008f60:	6839      	ldr	r1, [r7, #0]
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f7fe fcfe 	bl	8007964 <move_window>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <check_fs+0x2a>
 8008f6e:	2304      	movs	r3, #4
 8008f70:	e038      	b.n	8008fe4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3338      	adds	r3, #56	@ 0x38
 8008f76:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe fa10 	bl	80073a0 <ld_word>
 8008f80:	4603      	mov	r3, r0
 8008f82:	461a      	mov	r2, r3
 8008f84:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d001      	beq.n	8008f90 <check_fs+0x48>
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e029      	b.n	8008fe4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008f96:	2be9      	cmp	r3, #233	@ 0xe9
 8008f98:	d009      	beq.n	8008fae <check_fs+0x66>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008fa0:	2beb      	cmp	r3, #235	@ 0xeb
 8008fa2:	d11e      	bne.n	8008fe2 <check_fs+0x9a>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008faa:	2b90      	cmp	r3, #144	@ 0x90
 8008fac:	d119      	bne.n	8008fe2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	3338      	adds	r3, #56	@ 0x38
 8008fb2:	3336      	adds	r3, #54	@ 0x36
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7fe fa0c 	bl	80073d2 <ld_dword>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8008fec <check_fs+0xa4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d101      	bne.n	8008fca <check_fs+0x82>
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	e00c      	b.n	8008fe4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	3338      	adds	r3, #56	@ 0x38
 8008fce:	3352      	adds	r3, #82	@ 0x52
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7fe f9fe 	bl	80073d2 <ld_dword>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4a05      	ldr	r2, [pc, #20]	@ (8008ff0 <check_fs+0xa8>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d101      	bne.n	8008fe2 <check_fs+0x9a>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	e000      	b.n	8008fe4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8008fe2:	2302      	movs	r3, #2
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3708      	adds	r7, #8
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	00544146 	.word	0x00544146
 8008ff0:	33544146 	.word	0x33544146

08008ff4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b096      	sub	sp, #88	@ 0x58
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	4613      	mov	r3, r2
 8009000:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8009002:	68bb      	ldr	r3, [r7, #8]
 8009004:	2200      	movs	r2, #0
 8009006:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f7ff ff58 	bl	8008ebe <get_ldnumber>
 800900e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8009010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009012:	2b00      	cmp	r3, #0
 8009014:	da01      	bge.n	800901a <find_volume+0x26>
 8009016:	230b      	movs	r3, #11
 8009018:	e235      	b.n	8009486 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800901a:	4aa5      	ldr	r2, [pc, #660]	@ (80092b0 <find_volume+0x2bc>)
 800901c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800901e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009022:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8009024:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009026:	2b00      	cmp	r3, #0
 8009028:	d101      	bne.n	800902e <find_volume+0x3a>
 800902a:	230c      	movs	r3, #12
 800902c:	e22b      	b.n	8009486 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800902e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009030:	f7fe fab7 	bl	80075a2 <lock_fs>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <find_volume+0x4a>
 800903a:	230f      	movs	r3, #15
 800903c:	e223      	b.n	8009486 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009042:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	f023 0301 	bic.w	r3, r3, #1
 800904a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800904c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800904e:	781b      	ldrb	r3, [r3, #0]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d01a      	beq.n	800908a <find_volume+0x96>
		stat = disk_status(fs->drv);
 8009054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009056:	785b      	ldrb	r3, [r3, #1]
 8009058:	4618      	mov	r0, r3
 800905a:	f7fe f901 	bl	8007260 <disk_status>
 800905e:	4603      	mov	r3, r0
 8009060:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8009064:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	2b00      	cmp	r3, #0
 800906e:	d10c      	bne.n	800908a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8009070:	79fb      	ldrb	r3, [r7, #7]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d007      	beq.n	8009086 <find_volume+0x92>
 8009076:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800907a:	f003 0304 	and.w	r3, r3, #4
 800907e:	2b00      	cmp	r3, #0
 8009080:	d001      	beq.n	8009086 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8009082:	230a      	movs	r3, #10
 8009084:	e1ff      	b.n	8009486 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 8009086:	2300      	movs	r3, #0
 8009088:	e1fd      	b.n	8009486 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800908a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800908c:	2200      	movs	r2, #0
 800908e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8009090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009092:	b2da      	uxtb	r2, r3
 8009094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009096:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8009098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe f8f9 	bl	8007294 <disk_initialize>
 80090a2:	4603      	mov	r3, r0
 80090a4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80090a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80090b4:	2303      	movs	r3, #3
 80090b6:	e1e6      	b.n	8009486 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <find_volume+0xda>
 80090be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80090ca:	230a      	movs	r3, #10
 80090cc:	e1db      	b.n	8009486 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80090ce:	2300      	movs	r3, #0
 80090d0:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80090d2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80090d4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80090d6:	f7ff ff37 	bl	8008f48 <check_fs>
 80090da:	4603      	mov	r3, r0
 80090dc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80090e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d149      	bne.n	800917c <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80090e8:	2300      	movs	r3, #0
 80090ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80090ec:	e01e      	b.n	800912c <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80090ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090f0:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80090f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80090f6:	011b      	lsls	r3, r3, #4
 80090f8:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 80090fc:	4413      	add	r3, r2
 80090fe:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8009100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009102:	3304      	adds	r3, #4
 8009104:	781b      	ldrb	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d006      	beq.n	8009118 <find_volume+0x124>
 800910a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800910c:	3308      	adds	r3, #8
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe f95f 	bl	80073d2 <ld_dword>
 8009114:	4602      	mov	r2, r0
 8009116:	e000      	b.n	800911a <find_volume+0x126>
 8009118:	2200      	movs	r2, #0
 800911a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	3358      	adds	r3, #88	@ 0x58
 8009120:	443b      	add	r3, r7
 8009122:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8009126:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009128:	3301      	adds	r3, #1
 800912a:	643b      	str	r3, [r7, #64]	@ 0x40
 800912c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800912e:	2b03      	cmp	r3, #3
 8009130:	d9dd      	bls.n	80090ee <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8009132:	2300      	movs	r3, #0
 8009134:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8009136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d002      	beq.n	8009142 <find_volume+0x14e>
 800913c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800913e:	3b01      	subs	r3, #1
 8009140:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8009142:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	3358      	adds	r3, #88	@ 0x58
 8009148:	443b      	add	r3, r7
 800914a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800914e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8009150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <find_volume+0x16e>
 8009156:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009158:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800915a:	f7ff fef5 	bl	8008f48 <check_fs>
 800915e:	4603      	mov	r3, r0
 8009160:	e000      	b.n	8009164 <find_volume+0x170>
 8009162:	2303      	movs	r3, #3
 8009164:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8009168:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800916c:	2b01      	cmp	r3, #1
 800916e:	d905      	bls.n	800917c <find_volume+0x188>
 8009170:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009172:	3301      	adds	r3, #1
 8009174:	643b      	str	r3, [r7, #64]	@ 0x40
 8009176:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009178:	2b03      	cmp	r3, #3
 800917a:	d9e2      	bls.n	8009142 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800917c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009180:	2b04      	cmp	r3, #4
 8009182:	d101      	bne.n	8009188 <find_volume+0x194>
 8009184:	2301      	movs	r3, #1
 8009186:	e17e      	b.n	8009486 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8009188:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800918c:	2b01      	cmp	r3, #1
 800918e:	d901      	bls.n	8009194 <find_volume+0x1a0>
 8009190:	230d      	movs	r3, #13
 8009192:	e178      	b.n	8009486 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8009194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009196:	3338      	adds	r3, #56	@ 0x38
 8009198:	330b      	adds	r3, #11
 800919a:	4618      	mov	r0, r3
 800919c:	f7fe f900 	bl	80073a0 <ld_word>
 80091a0:	4603      	mov	r3, r0
 80091a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091a6:	d001      	beq.n	80091ac <find_volume+0x1b8>
 80091a8:	230d      	movs	r3, #13
 80091aa:	e16c      	b.n	8009486 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80091ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ae:	3338      	adds	r3, #56	@ 0x38
 80091b0:	3316      	adds	r3, #22
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fe f8f4 	bl	80073a0 <ld_word>
 80091b8:	4603      	mov	r3, r0
 80091ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80091bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d106      	bne.n	80091d0 <find_volume+0x1dc>
 80091c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091c4:	3338      	adds	r3, #56	@ 0x38
 80091c6:	3324      	adds	r3, #36	@ 0x24
 80091c8:	4618      	mov	r0, r3
 80091ca:	f7fe f902 	bl	80073d2 <ld_dword>
 80091ce:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80091d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80091d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80091d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d8:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 80091dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80091e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091e2:	789b      	ldrb	r3, [r3, #2]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d005      	beq.n	80091f4 <find_volume+0x200>
 80091e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ea:	789b      	ldrb	r3, [r3, #2]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d001      	beq.n	80091f4 <find_volume+0x200>
 80091f0:	230d      	movs	r3, #13
 80091f2:	e148      	b.n	8009486 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80091f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091f6:	789b      	ldrb	r3, [r3, #2]
 80091f8:	461a      	mov	r2, r3
 80091fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091fc:	fb02 f303 	mul.w	r3, r2, r3
 8009200:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8009202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009204:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009208:	461a      	mov	r2, r3
 800920a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800920e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009210:	895b      	ldrh	r3, [r3, #10]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d008      	beq.n	8009228 <find_volume+0x234>
 8009216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009218:	895b      	ldrh	r3, [r3, #10]
 800921a:	461a      	mov	r2, r3
 800921c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921e:	895b      	ldrh	r3, [r3, #10]
 8009220:	3b01      	subs	r3, #1
 8009222:	4013      	ands	r3, r2
 8009224:	2b00      	cmp	r3, #0
 8009226:	d001      	beq.n	800922c <find_volume+0x238>
 8009228:	230d      	movs	r3, #13
 800922a:	e12c      	b.n	8009486 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800922c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922e:	3338      	adds	r3, #56	@ 0x38
 8009230:	3311      	adds	r3, #17
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe f8b4 	bl	80073a0 <ld_word>
 8009238:	4603      	mov	r3, r0
 800923a:	461a      	mov	r2, r3
 800923c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800923e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8009240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009242:	891b      	ldrh	r3, [r3, #8]
 8009244:	f003 030f 	and.w	r3, r3, #15
 8009248:	b29b      	uxth	r3, r3
 800924a:	2b00      	cmp	r3, #0
 800924c:	d001      	beq.n	8009252 <find_volume+0x25e>
 800924e:	230d      	movs	r3, #13
 8009250:	e119      	b.n	8009486 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8009252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009254:	3338      	adds	r3, #56	@ 0x38
 8009256:	3313      	adds	r3, #19
 8009258:	4618      	mov	r0, r3
 800925a:	f7fe f8a1 	bl	80073a0 <ld_word>
 800925e:	4603      	mov	r3, r0
 8009260:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8009262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009264:	2b00      	cmp	r3, #0
 8009266:	d106      	bne.n	8009276 <find_volume+0x282>
 8009268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800926a:	3338      	adds	r3, #56	@ 0x38
 800926c:	3320      	adds	r3, #32
 800926e:	4618      	mov	r0, r3
 8009270:	f7fe f8af 	bl	80073d2 <ld_dword>
 8009274:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8009276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009278:	3338      	adds	r3, #56	@ 0x38
 800927a:	330e      	adds	r3, #14
 800927c:	4618      	mov	r0, r3
 800927e:	f7fe f88f 	bl	80073a0 <ld_word>
 8009282:	4603      	mov	r3, r0
 8009284:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8009286:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <find_volume+0x29c>
 800928c:	230d      	movs	r3, #13
 800928e:	e0fa      	b.n	8009486 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8009290:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009292:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009294:	4413      	add	r3, r2
 8009296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009298:	8912      	ldrh	r2, [r2, #8]
 800929a:	0912      	lsrs	r2, r2, #4
 800929c:	b292      	uxth	r2, r2
 800929e:	4413      	add	r3, r2
 80092a0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80092a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a6:	429a      	cmp	r2, r3
 80092a8:	d204      	bcs.n	80092b4 <find_volume+0x2c0>
 80092aa:	230d      	movs	r3, #13
 80092ac:	e0eb      	b.n	8009486 <find_volume+0x492>
 80092ae:	bf00      	nop
 80092b0:	200009d8 	.word	0x200009d8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80092b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80092b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80092bc:	8952      	ldrh	r2, [r2, #10]
 80092be:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c2:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80092c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <find_volume+0x2da>
 80092ca:	230d      	movs	r3, #13
 80092cc:	e0db      	b.n	8009486 <find_volume+0x492>
		fmt = FS_FAT32;
 80092ce:	2303      	movs	r3, #3
 80092d0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80092d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d6:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80092da:	4293      	cmp	r3, r2
 80092dc:	d802      	bhi.n	80092e4 <find_volume+0x2f0>
 80092de:	2302      	movs	r3, #2
 80092e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80092e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e6:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d802      	bhi.n	80092f4 <find_volume+0x300>
 80092ee:	2301      	movs	r3, #1
 80092f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80092f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f6:	1c9a      	adds	r2, r3, #2
 80092f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fa:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80092fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80092fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009300:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8009302:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8009304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009306:	441a      	add	r2, r3
 8009308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800930a:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800930c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	441a      	add	r2, r3
 8009312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009314:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8009316:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800931a:	2b03      	cmp	r3, #3
 800931c:	d11e      	bne.n	800935c <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800931e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009320:	3338      	adds	r3, #56	@ 0x38
 8009322:	332a      	adds	r3, #42	@ 0x2a
 8009324:	4618      	mov	r0, r3
 8009326:	f7fe f83b 	bl	80073a0 <ld_word>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d001      	beq.n	8009334 <find_volume+0x340>
 8009330:	230d      	movs	r3, #13
 8009332:	e0a8      	b.n	8009486 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8009334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009336:	891b      	ldrh	r3, [r3, #8]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d001      	beq.n	8009340 <find_volume+0x34c>
 800933c:	230d      	movs	r3, #13
 800933e:	e0a2      	b.n	8009486 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8009340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009342:	3338      	adds	r3, #56	@ 0x38
 8009344:	332c      	adds	r3, #44	@ 0x2c
 8009346:	4618      	mov	r0, r3
 8009348:	f7fe f843 	bl	80073d2 <ld_dword>
 800934c:	4602      	mov	r2, r0
 800934e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009350:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8009352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	009b      	lsls	r3, r3, #2
 8009358:	647b      	str	r3, [r7, #68]	@ 0x44
 800935a:	e01f      	b.n	800939c <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800935c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800935e:	891b      	ldrh	r3, [r3, #8]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d101      	bne.n	8009368 <find_volume+0x374>
 8009364:	230d      	movs	r3, #13
 8009366:	e08e      	b.n	8009486 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8009368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800936a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800936c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800936e:	441a      	add	r2, r3
 8009370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009372:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8009374:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8009378:	2b02      	cmp	r3, #2
 800937a:	d103      	bne.n	8009384 <find_volume+0x390>
 800937c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800937e:	69db      	ldr	r3, [r3, #28]
 8009380:	005b      	lsls	r3, r3, #1
 8009382:	e00a      	b.n	800939a <find_volume+0x3a6>
 8009384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	4613      	mov	r3, r2
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	4413      	add	r3, r2
 800938e:	085a      	lsrs	r2, r3, #1
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800939a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800939c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800939e:	6a1a      	ldr	r2, [r3, #32]
 80093a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80093a6:	0a5b      	lsrs	r3, r3, #9
 80093a8:	429a      	cmp	r2, r3
 80093aa:	d201      	bcs.n	80093b0 <find_volume+0x3bc>
 80093ac:	230d      	movs	r3, #13
 80093ae:	e06a      	b.n	8009486 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80093b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b2:	f04f 32ff 	mov.w	r2, #4294967295
 80093b6:	619a      	str	r2, [r3, #24]
 80093b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ba:	699a      	ldr	r2, [r3, #24]
 80093bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093be:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80093c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093c2:	2280      	movs	r2, #128	@ 0x80
 80093c4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80093c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80093ca:	2b03      	cmp	r3, #3
 80093cc:	d149      	bne.n	8009462 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80093ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093d0:	3338      	adds	r3, #56	@ 0x38
 80093d2:	3330      	adds	r3, #48	@ 0x30
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7fd ffe3 	bl	80073a0 <ld_word>
 80093da:	4603      	mov	r3, r0
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d140      	bne.n	8009462 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80093e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093e2:	3301      	adds	r3, #1
 80093e4:	4619      	mov	r1, r3
 80093e6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80093e8:	f7fe fabc 	bl	8007964 <move_window>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d137      	bne.n	8009462 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80093f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093f4:	2200      	movs	r2, #0
 80093f6:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80093f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093fa:	3338      	adds	r3, #56	@ 0x38
 80093fc:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8009400:	4618      	mov	r0, r3
 8009402:	f7fd ffcd 	bl	80073a0 <ld_word>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800940e:	429a      	cmp	r2, r3
 8009410:	d127      	bne.n	8009462 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8009412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009414:	3338      	adds	r3, #56	@ 0x38
 8009416:	4618      	mov	r0, r3
 8009418:	f7fd ffdb 	bl	80073d2 <ld_dword>
 800941c:	4603      	mov	r3, r0
 800941e:	4a1c      	ldr	r2, [pc, #112]	@ (8009490 <find_volume+0x49c>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d11e      	bne.n	8009462 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8009424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009426:	3338      	adds	r3, #56	@ 0x38
 8009428:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800942c:	4618      	mov	r0, r3
 800942e:	f7fd ffd0 	bl	80073d2 <ld_dword>
 8009432:	4603      	mov	r3, r0
 8009434:	4a17      	ldr	r2, [pc, #92]	@ (8009494 <find_volume+0x4a0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d113      	bne.n	8009462 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800943a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800943c:	3338      	adds	r3, #56	@ 0x38
 800943e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8009442:	4618      	mov	r0, r3
 8009444:	f7fd ffc5 	bl	80073d2 <ld_dword>
 8009448:	4602      	mov	r2, r0
 800944a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800944c:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800944e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009450:	3338      	adds	r3, #56	@ 0x38
 8009452:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8009456:	4618      	mov	r0, r3
 8009458:	f7fd ffbb 	bl	80073d2 <ld_dword>
 800945c:	4602      	mov	r2, r0
 800945e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009460:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8009462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009464:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8009468:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800946a:	4b0b      	ldr	r3, [pc, #44]	@ (8009498 <find_volume+0x4a4>)
 800946c:	881b      	ldrh	r3, [r3, #0]
 800946e:	3301      	adds	r3, #1
 8009470:	b29a      	uxth	r2, r3
 8009472:	4b09      	ldr	r3, [pc, #36]	@ (8009498 <find_volume+0x4a4>)
 8009474:	801a      	strh	r2, [r3, #0]
 8009476:	4b08      	ldr	r3, [pc, #32]	@ (8009498 <find_volume+0x4a4>)
 8009478:	881a      	ldrh	r2, [r3, #0]
 800947a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800947c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800947e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009480:	f7fe fa08 	bl	8007894 <clear_lock>
#endif
	return FR_OK;
 8009484:	2300      	movs	r3, #0
}
 8009486:	4618      	mov	r0, r3
 8009488:	3758      	adds	r7, #88	@ 0x58
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	41615252 	.word	0x41615252
 8009494:	61417272 	.word	0x61417272
 8009498:	200009dc 	.word	0x200009dc

0800949c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80094a6:	2309      	movs	r3, #9
 80094a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d02e      	beq.n	800950e <validate+0x72>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d02a      	beq.n	800950e <validate+0x72>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	781b      	ldrb	r3, [r3, #0]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d025      	beq.n	800950e <validate+0x72>
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	889a      	ldrh	r2, [r3, #4]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	88db      	ldrh	r3, [r3, #6]
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d11e      	bne.n	800950e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7fe f864 	bl	80075a2 <lock_fs>
 80094da:	4603      	mov	r3, r0
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d014      	beq.n	800950a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	785b      	ldrb	r3, [r3, #1]
 80094e6:	4618      	mov	r0, r3
 80094e8:	f7fd feba 	bl	8007260 <disk_status>
 80094ec:	4603      	mov	r3, r0
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d102      	bne.n	80094fc <validate+0x60>
				res = FR_OK;
 80094f6:	2300      	movs	r3, #0
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	e008      	b.n	800950e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2100      	movs	r1, #0
 8009502:	4618      	mov	r0, r3
 8009504:	f7fe f863 	bl	80075ce <unlock_fs>
 8009508:	e001      	b.n	800950e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800950a:	230f      	movs	r3, #15
 800950c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800950e:	7bfb      	ldrb	r3, [r7, #15]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d102      	bne.n	800951a <validate+0x7e>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	e000      	b.n	800951c <validate+0x80>
 800951a:	2300      	movs	r3, #0
 800951c:	683a      	ldr	r2, [r7, #0]
 800951e:	6013      	str	r3, [r2, #0]
	return res;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
	...

0800952c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	60f8      	str	r0, [r7, #12]
 8009534:	60b9      	str	r1, [r7, #8]
 8009536:	4613      	mov	r3, r2
 8009538:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800953e:	f107 0310 	add.w	r3, r7, #16
 8009542:	4618      	mov	r0, r3
 8009544:	f7ff fcbb 	bl	8008ebe <get_ldnumber>
 8009548:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	2b00      	cmp	r3, #0
 800954e:	da01      	bge.n	8009554 <f_mount+0x28>
 8009550:	230b      	movs	r3, #11
 8009552:	e048      	b.n	80095e6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8009554:	4a26      	ldr	r2, [pc, #152]	@ (80095f0 <f_mount+0xc4>)
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800955c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d00f      	beq.n	8009584 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8009564:	69b8      	ldr	r0, [r7, #24]
 8009566:	f7fe f995 	bl	8007894 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800956a:	69bb      	ldr	r3, [r7, #24]
 800956c:	691b      	ldr	r3, [r3, #16]
 800956e:	4618      	mov	r0, r3
 8009570:	f001 fceb 	bl	800af4a <ff_del_syncobj>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <f_mount+0x52>
 800957a:	2302      	movs	r3, #2
 800957c:	e033      	b.n	80095e6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2200      	movs	r2, #0
 8009582:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d00f      	beq.n	80095aa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	2200      	movs	r2, #0
 800958e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8009590:	69fb      	ldr	r3, [r7, #28]
 8009592:	b2da      	uxtb	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	3310      	adds	r3, #16
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f001 fcba 	bl	800af14 <ff_cre_syncobj>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d101      	bne.n	80095aa <f_mount+0x7e>
 80095a6:	2302      	movs	r3, #2
 80095a8:	e01d      	b.n	80095e6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4910      	ldr	r1, [pc, #64]	@ (80095f0 <f_mount+0xc4>)
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d002      	beq.n	80095c0 <f_mount+0x94>
 80095ba:	79fb      	ldrb	r3, [r7, #7]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d001      	beq.n	80095c4 <f_mount+0x98>
 80095c0:	2300      	movs	r3, #0
 80095c2:	e010      	b.n	80095e6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80095c4:	f107 010c 	add.w	r1, r7, #12
 80095c8:	f107 0308 	add.w	r3, r7, #8
 80095cc:	2200      	movs	r2, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7ff fd10 	bl	8008ff4 <find_volume>
 80095d4:	4603      	mov	r3, r0
 80095d6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	7dfa      	ldrb	r2, [r7, #23]
 80095dc:	4611      	mov	r1, r2
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fd fff5 	bl	80075ce <unlock_fs>
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3720      	adds	r7, #32
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
 80095ee:	bf00      	nop
 80095f0:	200009d8 	.word	0x200009d8

080095f4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b09a      	sub	sp, #104	@ 0x68
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d101      	bne.n	800960c <f_open+0x18>
 8009608:	2309      	movs	r3, #9
 800960a:	e1c5      	b.n	8009998 <f_open+0x3a4>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800960c:	79fb      	ldrb	r3, [r7, #7]
 800960e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009612:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8009614:	79fa      	ldrb	r2, [r7, #7]
 8009616:	f107 0110 	add.w	r1, r7, #16
 800961a:	f107 0308 	add.w	r3, r7, #8
 800961e:	4618      	mov	r0, r3
 8009620:	f7ff fce8 	bl	8008ff4 <find_volume>
 8009624:	4603      	mov	r3, r0
 8009626:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800962a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800962e:	2b00      	cmp	r3, #0
 8009630:	f040 81a2 	bne.w	8009978 <f_open+0x384>
		dj.obj.fs = fs;
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
 8009638:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800963c:	f001 fcb1 	bl	800afa2 <ff_memalloc>
 8009640:	65b8      	str	r0, [r7, #88]	@ 0x58
 8009642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009644:	2b00      	cmp	r3, #0
 8009646:	d106      	bne.n	8009656 <f_open+0x62>
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	2111      	movs	r1, #17
 800964c:	4618      	mov	r0, r3
 800964e:	f7fd ffbe 	bl	80075ce <unlock_fs>
 8009652:	2311      	movs	r3, #17
 8009654:	e1a0      	b.n	8009998 <f_open+0x3a4>
 8009656:	693b      	ldr	r3, [r7, #16]
 8009658:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800965a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800965c:	68ba      	ldr	r2, [r7, #8]
 800965e:	f107 0314 	add.w	r3, r7, #20
 8009662:	4611      	mov	r1, r2
 8009664:	4618      	mov	r0, r3
 8009666:	f7ff fbb9 	bl	8008ddc <follow_path>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8009670:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009674:	2b00      	cmp	r3, #0
 8009676:	d118      	bne.n	80096aa <f_open+0xb6>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8009678:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800967c:	b25b      	sxtb	r3, r3
 800967e:	2b00      	cmp	r3, #0
 8009680:	da03      	bge.n	800968a <f_open+0x96>
				res = FR_INVALID_NAME;
 8009682:	2306      	movs	r3, #6
 8009684:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009688:	e00f      	b.n	80096aa <f_open+0xb6>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800968a:	79fb      	ldrb	r3, [r7, #7]
 800968c:	2b01      	cmp	r3, #1
 800968e:	bf8c      	ite	hi
 8009690:	2301      	movhi	r3, #1
 8009692:	2300      	movls	r3, #0
 8009694:	b2db      	uxtb	r3, r3
 8009696:	461a      	mov	r2, r3
 8009698:	f107 0314 	add.w	r3, r7, #20
 800969c:	4611      	mov	r1, r2
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fd ffb0 	bl	8007604 <chk_lock>
 80096a4:	4603      	mov	r3, r0
 80096a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	f003 031c 	and.w	r3, r3, #28
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d07f      	beq.n	80097b4 <f_open+0x1c0>
			if (res != FR_OK) {					/* No file, create new */
 80096b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d017      	beq.n	80096ec <f_open+0xf8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80096bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80096c0:	2b04      	cmp	r3, #4
 80096c2:	d10e      	bne.n	80096e2 <f_open+0xee>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80096c4:	f7fd fffa 	bl	80076bc <enq_lock>
 80096c8:	4603      	mov	r3, r0
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d006      	beq.n	80096dc <f_open+0xe8>
 80096ce:	f107 0314 	add.w	r3, r7, #20
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff f8d2 	bl	800887c <dir_register>
 80096d8:	4603      	mov	r3, r0
 80096da:	e000      	b.n	80096de <f_open+0xea>
 80096dc:	2312      	movs	r3, #18
 80096de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80096e2:	79fb      	ldrb	r3, [r7, #7]
 80096e4:	f043 0308 	orr.w	r3, r3, #8
 80096e8:	71fb      	strb	r3, [r7, #7]
 80096ea:	e010      	b.n	800970e <f_open+0x11a>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80096ec:	7ebb      	ldrb	r3, [r7, #26]
 80096ee:	f003 0311 	and.w	r3, r3, #17
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d003      	beq.n	80096fe <f_open+0x10a>
					res = FR_DENIED;
 80096f6:	2307      	movs	r3, #7
 80096f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80096fc:	e007      	b.n	800970e <f_open+0x11a>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80096fe:	79fb      	ldrb	r3, [r7, #7]
 8009700:	f003 0304 	and.w	r3, r3, #4
 8009704:	2b00      	cmp	r3, #0
 8009706:	d002      	beq.n	800970e <f_open+0x11a>
 8009708:	2308      	movs	r3, #8
 800970a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800970e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009712:	2b00      	cmp	r3, #0
 8009714:	d168      	bne.n	80097e8 <f_open+0x1f4>
 8009716:	79fb      	ldrb	r3, [r7, #7]
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b00      	cmp	r3, #0
 800971e:	d063      	beq.n	80097e8 <f_open+0x1f4>
				dw = GET_FATTIME();
 8009720:	f7fd fd96 	bl	8007250 <get_fattime>
 8009724:	6578      	str	r0, [r7, #84]	@ 0x54
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8009726:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009728:	330e      	adds	r3, #14
 800972a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800972c:	4618      	mov	r0, r3
 800972e:	f7fd fe8e 	bl	800744e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8009732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009734:	3316      	adds	r3, #22
 8009736:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009738:	4618      	mov	r0, r3
 800973a:	f7fd fe88 	bl	800744e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800973e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009740:	330b      	adds	r3, #11
 8009742:	2220      	movs	r2, #32
 8009744:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800974a:	4611      	mov	r1, r2
 800974c:	4618      	mov	r0, r3
 800974e:	f7fe fe0d 	bl	800836c <ld_clust>
 8009752:	6538      	str	r0, [r7, #80]	@ 0x50
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8009754:	693b      	ldr	r3, [r7, #16]
 8009756:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009758:	2200      	movs	r2, #0
 800975a:	4618      	mov	r0, r3
 800975c:	f7fe fe25 	bl	80083aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8009760:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009762:	331c      	adds	r3, #28
 8009764:	2100      	movs	r1, #0
 8009766:	4618      	mov	r0, r3
 8009768:	f7fd fe71 	bl	800744e <st_dword>
					fs->wflag = 1;
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2201      	movs	r2, #1
 8009770:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8009772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009774:	2b00      	cmp	r3, #0
 8009776:	d037      	beq.n	80097e8 <f_open+0x1f4>
						dw = fs->winsect;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800977c:	657b      	str	r3, [r7, #84]	@ 0x54
						res = remove_chain(&dj.obj, cl, 0);
 800977e:	f107 0314 	add.w	r3, r7, #20
 8009782:	2200      	movs	r2, #0
 8009784:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8009786:	4618      	mov	r0, r3
 8009788:	f7fe fb38 	bl	8007dfc <remove_chain>
 800978c:	4603      	mov	r3, r0
 800978e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009792:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009796:	2b00      	cmp	r3, #0
 8009798:	d126      	bne.n	80097e8 <f_open+0x1f4>
							res = move_window(fs, dw);
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe f8e0 	bl	8007964 <move_window>
 80097a4:	4603      	mov	r3, r0
 80097a6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80097ae:	3a01      	subs	r2, #1
 80097b0:	615a      	str	r2, [r3, #20]
 80097b2:	e019      	b.n	80097e8 <f_open+0x1f4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80097b4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d115      	bne.n	80097e8 <f_open+0x1f4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80097bc:	7ebb      	ldrb	r3, [r7, #26]
 80097be:	f003 0310 	and.w	r3, r3, #16
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <f_open+0x1da>
					res = FR_NO_FILE;
 80097c6:	2304      	movs	r3, #4
 80097c8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80097cc:	e00c      	b.n	80097e8 <f_open+0x1f4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	f003 0302 	and.w	r3, r3, #2
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <f_open+0x1f4>
 80097d8:	7ebb      	ldrb	r3, [r7, #26]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d002      	beq.n	80097e8 <f_open+0x1f4>
						res = FR_DENIED;
 80097e2:	2307      	movs	r3, #7
 80097e4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80097e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d126      	bne.n	800983e <f_open+0x24a>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d003      	beq.n	8009802 <f_open+0x20e>
				mode |= FA_MODIFIED;
 80097fa:	79fb      	ldrb	r3, [r7, #7]
 80097fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009800:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800980a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	2b01      	cmp	r3, #1
 8009814:	bf8c      	ite	hi
 8009816:	2301      	movhi	r3, #1
 8009818:	2300      	movls	r3, #0
 800981a:	b2db      	uxtb	r3, r3
 800981c:	461a      	mov	r2, r3
 800981e:	f107 0314 	add.w	r3, r7, #20
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fd ff6b 	bl	8007700 <inc_lock>
 800982a:	4602      	mov	r2, r0
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d102      	bne.n	800983e <f_open+0x24a>
 8009838:	2302      	movs	r3, #2
 800983a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800983e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009842:	2b00      	cmp	r3, #0
 8009844:	f040 8095 	bne.w	8009972 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7fe fd8c 	bl	800836c <ld_clust>
 8009854:	4602      	mov	r2, r0
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800985a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800985c:	331c      	adds	r3, #28
 800985e:	4618      	mov	r0, r3
 8009860:	f7fd fdb7 	bl	80073d2 <ld_dword>
 8009864:	4602      	mov	r2, r0
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2200      	movs	r2, #0
 800986e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	88da      	ldrh	r2, [r3, #6]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	79fa      	ldrb	r2, [r7, #7]
 8009882:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	2200      	movs	r2, #0
 8009888:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2200      	movs	r2, #0
 800988e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	3330      	adds	r3, #48	@ 0x30
 800989a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f7fd fe21 	bl	80074e8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80098a6:	79fb      	ldrb	r3, [r7, #7]
 80098a8:	f003 0320 	and.w	r3, r3, #32
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d060      	beq.n	8009972 <f_open+0x37e>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	68db      	ldr	r3, [r3, #12]
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d05c      	beq.n	8009972 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	895b      	ldrh	r3, [r3, #10]
 80098c4:	025b      	lsls	r3, r3, #9
 80098c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	689b      	ldr	r3, [r3, #8]
 80098cc:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	68db      	ldr	r3, [r3, #12]
 80098d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80098d4:	e016      	b.n	8009904 <f_open+0x310>
					clst = get_fat(&fp->obj, clst);
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fe f8fd 	bl	8007ada <get_fat>
 80098e0:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80098e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	d802      	bhi.n	80098ee <f_open+0x2fa>
 80098e8:	2302      	movs	r3, #2
 80098ea:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80098ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80098f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f4:	d102      	bne.n	80098fc <f_open+0x308>
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80098fc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80098fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009904:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009908:	2b00      	cmp	r3, #0
 800990a:	d103      	bne.n	8009914 <f_open+0x320>
 800990c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800990e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009910:	429a      	cmp	r2, r3
 8009912:	d8e0      	bhi.n	80098d6 <f_open+0x2e2>
				}
				fp->clust = clst;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009918:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800991a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800991e:	2b00      	cmp	r3, #0
 8009920:	d127      	bne.n	8009972 <f_open+0x37e>
 8009922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009924:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009928:	2b00      	cmp	r3, #0
 800992a:	d022      	beq.n	8009972 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8009930:	4618      	mov	r0, r3
 8009932:	f7fe f8b3 	bl	8007a9c <clust2sect>
 8009936:	64b8      	str	r0, [r7, #72]	@ 0x48
 8009938:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <f_open+0x352>
						res = FR_INT_ERR;
 800993e:	2302      	movs	r3, #2
 8009940:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009944:	e015      	b.n	8009972 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8009946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009948:	0a5a      	lsrs	r2, r3, #9
 800994a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800994c:	441a      	add	r2, r3
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	7858      	ldrb	r0, [r3, #1]
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a1a      	ldr	r2, [r3, #32]
 8009960:	2301      	movs	r3, #1
 8009962:	f7fd fcbf 	bl	80072e4 <disk_read>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <f_open+0x37e>
 800996c:	2301      	movs	r3, #1
 800996e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
#endif
		}

		FREE_NAMBUF();
 8009972:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8009974:	f001 fb21 	bl	800afba <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8009978:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800997c:	2b00      	cmp	r3, #0
 800997e:	d002      	beq.n	8009986 <f_open+0x392>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800998c:	4611      	mov	r1, r2
 800998e:	4618      	mov	r0, r3
 8009990:	f7fd fe1d 	bl	80075ce <unlock_fs>
 8009994:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8009998:	4618      	mov	r0, r3
 800999a:	3768      	adds	r7, #104	@ 0x68
 800999c:	46bd      	mov	sp, r7
 800999e:	bd80      	pop	{r7, pc}

080099a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08c      	sub	sp, #48	@ 0x30
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
 80099ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f107 0210 	add.w	r2, r7, #16
 80099be:	4611      	mov	r1, r2
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff fd6b 	bl	800949c <validate>
 80099c6:	4603      	mov	r3, r0
 80099c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80099cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d107      	bne.n	80099e4 <f_write+0x44>
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	7d5b      	ldrb	r3, [r3, #21]
 80099d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80099dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d009      	beq.n	80099f8 <f_write+0x58>
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80099ea:	4611      	mov	r1, r2
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7fd fdee 	bl	80075ce <unlock_fs>
 80099f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80099f6:	e173      	b.n	8009ce0 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	7d1b      	ldrb	r3, [r3, #20]
 80099fc:	f003 0302 	and.w	r3, r3, #2
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d106      	bne.n	8009a12 <f_write+0x72>
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	2107      	movs	r1, #7
 8009a08:	4618      	mov	r0, r3
 8009a0a:	f7fd fde0 	bl	80075ce <unlock_fs>
 8009a0e:	2307      	movs	r3, #7
 8009a10:	e166      	b.n	8009ce0 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	441a      	add	r2, r3
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	699b      	ldr	r3, [r3, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	f080 814b 	bcs.w	8009cba <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	699b      	ldr	r3, [r3, #24]
 8009a28:	43db      	mvns	r3, r3
 8009a2a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8009a2c:	e145      	b.n	8009cba <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	699b      	ldr	r3, [r3, #24]
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f040 8101 	bne.w	8009c3e <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	699b      	ldr	r3, [r3, #24]
 8009a40:	0a5b      	lsrs	r3, r3, #9
 8009a42:	693a      	ldr	r2, [r7, #16]
 8009a44:	8952      	ldrh	r2, [r2, #10]
 8009a46:	3a01      	subs	r2, #1
 8009a48:	4013      	ands	r3, r2
 8009a4a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8009a4c:	69bb      	ldr	r3, [r7, #24]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d14d      	bne.n	8009aee <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	699b      	ldr	r3, [r3, #24]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d10c      	bne.n	8009a74 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8009a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d11a      	bne.n	8009a9c <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	2100      	movs	r1, #0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f7fe fa2b 	bl	8007ec6 <create_chain>
 8009a70:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a72:	e013      	b.n	8009a9c <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d007      	beq.n	8009a8c <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	4619      	mov	r1, r3
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7fe fab7 	bl	8007ff6 <clmt_clust>
 8009a88:	62b8      	str	r0, [r7, #40]	@ 0x28
 8009a8a:	e007      	b.n	8009a9c <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	69db      	ldr	r3, [r3, #28]
 8009a92:	4619      	mov	r1, r3
 8009a94:	4610      	mov	r0, r2
 8009a96:	f7fe fa16 	bl	8007ec6 <create_chain>
 8009a9a:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f000 8110 	beq.w	8009cc4 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8009aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aa6:	2b01      	cmp	r3, #1
 8009aa8:	d109      	bne.n	8009abe <f_write+0x11e>
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	2202      	movs	r2, #2
 8009aae:	755a      	strb	r2, [r3, #21]
 8009ab0:	693b      	ldr	r3, [r7, #16]
 8009ab2:	2102      	movs	r1, #2
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	f7fd fd8a 	bl	80075ce <unlock_fs>
 8009aba:	2302      	movs	r3, #2
 8009abc:	e110      	b.n	8009ce0 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ac4:	d109      	bne.n	8009ada <f_write+0x13a>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	2201      	movs	r2, #1
 8009aca:	755a      	strb	r2, [r3, #21]
 8009acc:	693b      	ldr	r3, [r7, #16]
 8009ace:	2101      	movs	r1, #1
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fd fd7c 	bl	80075ce <unlock_fs>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e102      	b.n	8009ce0 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ade:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <f_write+0x14e>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009aec:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	7d1b      	ldrb	r3, [r3, #20]
 8009af2:	b25b      	sxtb	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	da1d      	bge.n	8009b34 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	7858      	ldrb	r0, [r3, #1]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	6a1a      	ldr	r2, [r3, #32]
 8009b06:	2301      	movs	r3, #1
 8009b08:	f7fd fc0c 	bl	8007324 <disk_write>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <f_write+0x186>
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2201      	movs	r2, #1
 8009b16:	755a      	strb	r2, [r3, #21]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	2101      	movs	r1, #1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f7fd fd56 	bl	80075ce <unlock_fs>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e0dc      	b.n	8009ce0 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	7d1b      	ldrb	r3, [r3, #20]
 8009b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009b2e:	b2da      	uxtb	r2, r3
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8009b34:	693a      	ldr	r2, [r7, #16]
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	69db      	ldr	r3, [r3, #28]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	4610      	mov	r0, r2
 8009b3e:	f7fd ffad 	bl	8007a9c <clust2sect>
 8009b42:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d109      	bne.n	8009b5e <f_write+0x1be>
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	755a      	strb	r2, [r3, #21]
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2102      	movs	r1, #2
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fd fd3a 	bl	80075ce <unlock_fs>
 8009b5a:	2302      	movs	r3, #2
 8009b5c:	e0c0      	b.n	8009ce0 <f_write+0x340>
			sect += csect;
 8009b5e:	697a      	ldr	r2, [r7, #20]
 8009b60:	69bb      	ldr	r3, [r7, #24]
 8009b62:	4413      	add	r3, r2
 8009b64:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	0a5b      	lsrs	r3, r3, #9
 8009b6a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d041      	beq.n	8009bf6 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009b72:	69ba      	ldr	r2, [r7, #24]
 8009b74:	6a3b      	ldr	r3, [r7, #32]
 8009b76:	4413      	add	r3, r2
 8009b78:	693a      	ldr	r2, [r7, #16]
 8009b7a:	8952      	ldrh	r2, [r2, #10]
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d905      	bls.n	8009b8c <f_write+0x1ec>
					cc = fs->csize - csect;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	895b      	ldrh	r3, [r3, #10]
 8009b84:	461a      	mov	r2, r3
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	7858      	ldrb	r0, [r3, #1]
 8009b90:	6a3b      	ldr	r3, [r7, #32]
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	69f9      	ldr	r1, [r7, #28]
 8009b96:	f7fd fbc5 	bl	8007324 <disk_write>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <f_write+0x214>
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2201      	movs	r2, #1
 8009ba4:	755a      	strb	r2, [r3, #21]
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	2101      	movs	r1, #1
 8009baa:	4618      	mov	r0, r3
 8009bac:	f7fd fd0f 	bl	80075ce <unlock_fs>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	e095      	b.n	8009ce0 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	6a1a      	ldr	r2, [r3, #32]
 8009bb8:	697b      	ldr	r3, [r7, #20]
 8009bba:	1ad3      	subs	r3, r2, r3
 8009bbc:	6a3a      	ldr	r2, [r7, #32]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	d915      	bls.n	8009bee <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	6a1a      	ldr	r2, [r3, #32]
 8009bcc:	697b      	ldr	r3, [r7, #20]
 8009bce:	1ad3      	subs	r3, r2, r3
 8009bd0:	025b      	lsls	r3, r3, #9
 8009bd2:	69fa      	ldr	r2, [r7, #28]
 8009bd4:	4413      	add	r3, r2
 8009bd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009bda:	4619      	mov	r1, r3
 8009bdc:	f7fd fc63 	bl	80074a6 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	7d1b      	ldrb	r3, [r3, #20]
 8009be4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009be8:	b2da      	uxtb	r2, r3
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009bee:	6a3b      	ldr	r3, [r7, #32]
 8009bf0:	025b      	lsls	r3, r3, #9
 8009bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8009bf4:	e044      	b.n	8009c80 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6a1b      	ldr	r3, [r3, #32]
 8009bfa:	697a      	ldr	r2, [r7, #20]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d01b      	beq.n	8009c38 <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	699a      	ldr	r2, [r3, #24]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d215      	bcs.n	8009c38 <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8009c0c:	693b      	ldr	r3, [r7, #16]
 8009c0e:	7858      	ldrb	r0, [r3, #1]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009c16:	2301      	movs	r3, #1
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	f7fd fb63 	bl	80072e4 <disk_read>
 8009c1e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d009      	beq.n	8009c38 <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	2201      	movs	r2, #1
 8009c28:	755a      	strb	r2, [r3, #21]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f7fd fccd 	bl	80075ce <unlock_fs>
 8009c34:	2301      	movs	r3, #1
 8009c36:	e053      	b.n	8009ce0 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	697a      	ldr	r2, [r7, #20]
 8009c3c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c46:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8009c4a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8009c4c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d901      	bls.n	8009c58 <f_write+0x2b8>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	699b      	ldr	r3, [r3, #24]
 8009c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c66:	4413      	add	r3, r2
 8009c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6a:	69f9      	ldr	r1, [r7, #28]
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	f7fd fc1a 	bl	80074a6 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	7d1b      	ldrb	r3, [r3, #20]
 8009c76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c7a:	b2da      	uxtb	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009c80:	69fa      	ldr	r2, [r7, #28]
 8009c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c84:	4413      	add	r3, r2
 8009c86:	61fb      	str	r3, [r7, #28]
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	699a      	ldr	r2, [r3, #24]
 8009c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8e:	441a      	add	r2, r3
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	619a      	str	r2, [r3, #24]
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	68da      	ldr	r2, [r3, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	699b      	ldr	r3, [r3, #24]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	bf38      	it	cc
 8009ca0:	461a      	movcc	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	60da      	str	r2, [r3, #12]
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cac:	441a      	add	r2, r3
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	601a      	str	r2, [r3, #0]
 8009cb2:	687a      	ldr	r2, [r7, #4]
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb6:	1ad3      	subs	r3, r2, r3
 8009cb8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	f47f aeb6 	bne.w	8009a2e <f_write+0x8e>
 8009cc2:	e000      	b.n	8009cc6 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8009cc4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	7d1b      	ldrb	r3, [r3, #20]
 8009cca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cce:	b2da      	uxtb	r2, r3
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7fd fc78 	bl	80075ce <unlock_fs>
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3730      	adds	r7, #48	@ 0x30
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b086      	sub	sp, #24
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	f107 0208 	add.w	r2, r7, #8
 8009cf6:	4611      	mov	r1, r2
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f7ff fbcf 	bl	800949c <validate>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d16d      	bne.n	8009de4 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	7d1b      	ldrb	r3, [r3, #20]
 8009d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d067      	beq.n	8009de4 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	7d1b      	ldrb	r3, [r3, #20]
 8009d18:	b25b      	sxtb	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	da1a      	bge.n	8009d54 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	7858      	ldrb	r0, [r3, #1]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	6a1a      	ldr	r2, [r3, #32]
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	f7fd faf9 	bl	8007324 <disk_write>
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d006      	beq.n	8009d46 <f_sync+0x5e>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7fd fc46 	bl	80075ce <unlock_fs>
 8009d42:	2301      	movs	r3, #1
 8009d44:	e055      	b.n	8009df2 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	7d1b      	ldrb	r3, [r3, #20]
 8009d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d4e:	b2da      	uxtb	r2, r3
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8009d54:	f7fd fa7c 	bl	8007250 <get_fattime>
 8009d58:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d60:	4619      	mov	r1, r3
 8009d62:	4610      	mov	r0, r2
 8009d64:	f7fd fdfe 	bl	8007964 <move_window>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009d6c:	7dfb      	ldrb	r3, [r7, #23]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d138      	bne.n	8009de4 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d76:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	330b      	adds	r3, #11
 8009d7c:	781a      	ldrb	r2, [r3, #0]
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	330b      	adds	r3, #11
 8009d82:	f042 0220 	orr.w	r2, r2, #32
 8009d86:	b2d2      	uxtb	r2, r2
 8009d88:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6818      	ldr	r0, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	689b      	ldr	r3, [r3, #8]
 8009d92:	461a      	mov	r2, r3
 8009d94:	68f9      	ldr	r1, [r7, #12]
 8009d96:	f7fe fb08 	bl	80083aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f103 021c 	add.w	r2, r3, #28
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	68db      	ldr	r3, [r3, #12]
 8009da4:	4619      	mov	r1, r3
 8009da6:	4610      	mov	r0, r2
 8009da8:	f7fd fb51 	bl	800744e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3316      	adds	r3, #22
 8009db0:	6939      	ldr	r1, [r7, #16]
 8009db2:	4618      	mov	r0, r3
 8009db4:	f7fd fb4b 	bl	800744e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	3312      	adds	r3, #18
 8009dbc:	2100      	movs	r1, #0
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7fd fb2a 	bl	8007418 <st_word>
					fs->wflag = 1;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8009dca:	68bb      	ldr	r3, [r7, #8]
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7fd fdf7 	bl	80079c0 <sync_fs>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	7d1b      	ldrb	r3, [r3, #20]
 8009dda:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009de4:	68bb      	ldr	r3, [r7, #8]
 8009de6:	7dfa      	ldrb	r2, [r7, #23]
 8009de8:	4611      	mov	r1, r2
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7fd fbef 	bl	80075ce <unlock_fs>
 8009df0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009df2:	4618      	mov	r0, r3
 8009df4:	3718      	adds	r7, #24
 8009df6:	46bd      	mov	sp, r7
 8009df8:	bd80      	pop	{r7, pc}

08009dfa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009dfa:	b580      	push	{r7, lr}
 8009dfc:	b084      	sub	sp, #16
 8009dfe:	af00      	add	r7, sp, #0
 8009e00:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8009e02:	6878      	ldr	r0, [r7, #4]
 8009e04:	f7ff ff70 	bl	8009ce8 <f_sync>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d11d      	bne.n	8009e4e <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	f107 0208 	add.w	r2, r7, #8
 8009e18:	4611      	mov	r1, r2
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7ff fb3e 	bl	800949c <validate>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009e24:	7bfb      	ldrb	r3, [r7, #15]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d111      	bne.n	8009e4e <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f7fd fcf4 	bl	800781c <dec_lock>
 8009e34:	4603      	mov	r3, r0
 8009e36:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009e38:	7bfb      	ldrb	r3, [r7, #15]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d102      	bne.n	8009e44 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2200      	movs	r2, #0
 8009e42:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	2100      	movs	r1, #0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fd fbc0 	bl	80075ce <unlock_fs>
#endif
		}
	}
	return res;
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}

08009e58 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b090      	sub	sp, #64	@ 0x40
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
 8009e60:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	f107 0208 	add.w	r2, r7, #8
 8009e68:	4611      	mov	r1, r2
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7ff fb16 	bl	800949c <validate>
 8009e70:	4603      	mov	r3, r0
 8009e72:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8009e76:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d103      	bne.n	8009e86 <f_lseek+0x2e>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	7d5b      	ldrb	r3, [r3, #21]
 8009e82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8009e86:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d009      	beq.n	8009ea2 <f_lseek+0x4a>
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 8009e94:	4611      	mov	r1, r2
 8009e96:	4618      	mov	r0, r3
 8009e98:	f7fd fb99 	bl	80075ce <unlock_fs>
 8009e9c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8009ea0:	e229      	b.n	800a2f6 <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	f000 80ea 	beq.w	800a080 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eb2:	d164      	bne.n	8009f7e <f_lseek+0x126>
			tbl = fp->cltbl;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8009eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ebc:	1d1a      	adds	r2, r3, #4
 8009ebe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	617b      	str	r3, [r7, #20]
 8009ec4:	2302      	movs	r3, #2
 8009ec6:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8009ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d044      	beq.n	8009f5e <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8009ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ed6:	613b      	str	r3, [r7, #16]
 8009ed8:	2300      	movs	r3, #0
 8009eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ede:	3302      	adds	r3, #2
 8009ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee8:	3301      	adds	r3, #1
 8009eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7fd fdf2 	bl	8007ada <get_fat>
 8009ef6:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d809      	bhi.n	8009f12 <f_lseek+0xba>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	2202      	movs	r2, #2
 8009f02:	755a      	strb	r2, [r3, #21]
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2102      	movs	r1, #2
 8009f08:	4618      	mov	r0, r3
 8009f0a:	f7fd fb60 	bl	80075ce <unlock_fs>
 8009f0e:	2302      	movs	r3, #2
 8009f10:	e1f1      	b.n	800a2f6 <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f18:	d109      	bne.n	8009f2e <f_lseek+0xd6>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	755a      	strb	r2, [r3, #21]
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2101      	movs	r1, #1
 8009f24:	4618      	mov	r0, r3
 8009f26:	f7fd fb52 	bl	80075ce <unlock_fs>
 8009f2a:	2301      	movs	r3, #1
 8009f2c:	e1e3      	b.n	800a2f6 <f_lseek+0x49e>
					} while (cl == pcl + 1);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	3301      	adds	r3, #1
 8009f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f34:	429a      	cmp	r2, r3
 8009f36:	d0d4      	beq.n	8009ee2 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8009f38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	429a      	cmp	r2, r3
 8009f3e:	d809      	bhi.n	8009f54 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8009f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f42:	1d1a      	adds	r2, r3, #4
 8009f44:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009f48:	601a      	str	r2, [r3, #0]
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f4c:	1d1a      	adds	r2, r3, #4
 8009f4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f50:	693a      	ldr	r2, [r7, #16]
 8009f52:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	69db      	ldr	r3, [r3, #28]
 8009f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d3ba      	bcc.n	8009ed4 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f64:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8009f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f68:	697b      	ldr	r3, [r7, #20]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d803      	bhi.n	8009f76 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8009f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f70:	2200      	movs	r2, #0
 8009f72:	601a      	str	r2, [r3, #0]
 8009f74:	e1b6      	b.n	800a2e4 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009f76:	2311      	movs	r3, #17
 8009f78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009f7c:	e1b2      	b.n	800a2e4 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	683a      	ldr	r2, [r7, #0]
 8009f84:	429a      	cmp	r2, r3
 8009f86:	d902      	bls.n	8009f8e <f_lseek+0x136>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	683a      	ldr	r2, [r7, #0]
 8009f92:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 81a4 	beq.w	800a2e4 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	4619      	mov	r1, r3
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7fe f827 	bl	8007ff6 <clmt_clust>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	69db      	ldr	r3, [r3, #28]
 8009fb4:	4619      	mov	r1, r3
 8009fb6:	4610      	mov	r0, r2
 8009fb8:	f7fd fd70 	bl	8007a9c <clust2sect>
 8009fbc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009fbe:	69bb      	ldr	r3, [r7, #24]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d109      	bne.n	8009fd8 <f_lseek+0x180>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	755a      	strb	r2, [r3, #21]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2102      	movs	r1, #2
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fd fafd 	bl	80075ce <unlock_fs>
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	e18e      	b.n	800a2f6 <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	3b01      	subs	r3, #1
 8009fdc:	0a5b      	lsrs	r3, r3, #9
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	8952      	ldrh	r2, [r2, #10]
 8009fe2:	3a01      	subs	r2, #1
 8009fe4:	4013      	ands	r3, r2
 8009fe6:	69ba      	ldr	r2, [r7, #24]
 8009fe8:	4413      	add	r3, r2
 8009fea:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	699b      	ldr	r3, [r3, #24]
 8009ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f000 8175 	beq.w	800a2e4 <f_lseek+0x48c>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	69ba      	ldr	r2, [r7, #24]
 800a000:	429a      	cmp	r2, r3
 800a002:	f000 816f 	beq.w	800a2e4 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	7d1b      	ldrb	r3, [r3, #20]
 800a00a:	b25b      	sxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	da1d      	bge.n	800a04c <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	7858      	ldrb	r0, [r3, #1]
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a1a      	ldr	r2, [r3, #32]
 800a01e:	2301      	movs	r3, #1
 800a020:	f7fd f980 	bl	8007324 <disk_write>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d009      	beq.n	800a03e <f_lseek+0x1e6>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2201      	movs	r2, #1
 800a02e:	755a      	strb	r2, [r3, #21]
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2101      	movs	r1, #1
 800a034:	4618      	mov	r0, r3
 800a036:	f7fd faca 	bl	80075ce <unlock_fs>
 800a03a:	2301      	movs	r3, #1
 800a03c:	e15b      	b.n	800a2f6 <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	7d1b      	ldrb	r3, [r3, #20]
 800a042:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a046:	b2da      	uxtb	r2, r3
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	7858      	ldrb	r0, [r3, #1]
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a056:	2301      	movs	r3, #1
 800a058:	69ba      	ldr	r2, [r7, #24]
 800a05a:	f7fd f943 	bl	80072e4 <disk_read>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d009      	beq.n	800a078 <f_lseek+0x220>
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2201      	movs	r2, #1
 800a068:	755a      	strb	r2, [r3, #21]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2101      	movs	r1, #1
 800a06e:	4618      	mov	r0, r3
 800a070:	f7fd faad 	bl	80075ce <unlock_fs>
 800a074:	2301      	movs	r3, #1
 800a076:	e13e      	b.n	800a2f6 <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	69ba      	ldr	r2, [r7, #24]
 800a07c:	621a      	str	r2, [r3, #32]
 800a07e:	e131      	b.n	800a2e4 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	429a      	cmp	r2, r3
 800a088:	d908      	bls.n	800a09c <f_lseek+0x244>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	7d1b      	ldrb	r3, [r3, #20]
 800a08e:	f003 0302 	and.w	r3, r3, #2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <f_lseek+0x244>
			ofs = fp->obj.objsize;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	699b      	ldr	r3, [r3, #24]
 800a0a0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a0aa:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	f000 80c0 	beq.w	800a234 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	895b      	ldrh	r3, [r3, #10]
 800a0b8:	025b      	lsls	r3, r3, #9
 800a0ba:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800a0bc:	6a3b      	ldr	r3, [r7, #32]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d01b      	beq.n	800a0fa <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	1e5a      	subs	r2, r3, #1
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	fbb2 f2f3 	udiv	r2, r2, r3
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	1e59      	subs	r1, r3, #1
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d30f      	bcc.n	800a0fa <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	1e5a      	subs	r2, r3, #1
 800a0de:	69fb      	ldr	r3, [r7, #28]
 800a0e0:	425b      	negs	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	699b      	ldr	r3, [r3, #24]
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	69db      	ldr	r3, [r3, #28]
 800a0f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a0f8:	e02c      	b.n	800a154 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800a100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a102:	2b00      	cmp	r3, #0
 800a104:	d123      	bne.n	800a14e <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2100      	movs	r1, #0
 800a10a:	4618      	mov	r0, r3
 800a10c:	f7fd fedb 	bl	8007ec6 <create_chain>
 800a110:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800a112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a114:	2b01      	cmp	r3, #1
 800a116:	d109      	bne.n	800a12c <f_lseek+0x2d4>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	755a      	strb	r2, [r3, #21]
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2102      	movs	r1, #2
 800a122:	4618      	mov	r0, r3
 800a124:	f7fd fa53 	bl	80075ce <unlock_fs>
 800a128:	2302      	movs	r3, #2
 800a12a:	e0e4      	b.n	800a2f6 <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a12e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a132:	d109      	bne.n	800a148 <f_lseek+0x2f0>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2201      	movs	r2, #1
 800a138:	755a      	strb	r2, [r3, #21]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2101      	movs	r1, #1
 800a13e:	4618      	mov	r0, r3
 800a140:	f7fd fa45 	bl	80075ce <unlock_fs>
 800a144:	2301      	movs	r3, #1
 800a146:	e0d6      	b.n	800a2f6 <f_lseek+0x49e>
					fp->obj.sclust = clst;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a14c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a152:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800a154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a156:	2b00      	cmp	r3, #0
 800a158:	d06c      	beq.n	800a234 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 800a15a:	e044      	b.n	800a1e6 <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 800a15c:	683a      	ldr	r2, [r7, #0]
 800a15e:	69fb      	ldr	r3, [r7, #28]
 800a160:	1ad3      	subs	r3, r2, r3
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	699a      	ldr	r2, [r3, #24]
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	441a      	add	r2, r3
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	7d1b      	ldrb	r3, [r3, #20]
 800a174:	f003 0302 	and.w	r3, r3, #2
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d00b      	beq.n	800a194 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a180:	4618      	mov	r0, r3
 800a182:	f7fd fea0 	bl	8007ec6 <create_chain>
 800a186:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800a188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d108      	bne.n	800a1a0 <f_lseek+0x348>
							ofs = 0; break;
 800a18e:	2300      	movs	r3, #0
 800a190:	603b      	str	r3, [r7, #0]
 800a192:	e02c      	b.n	800a1ee <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a198:	4618      	mov	r0, r3
 800a19a:	f7fd fc9e 	bl	8007ada <get_fat>
 800a19e:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1a6:	d109      	bne.n	800a1bc <f_lseek+0x364>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	755a      	strb	r2, [r3, #21]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	2101      	movs	r1, #1
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f7fd fa0b 	bl	80075ce <unlock_fs>
 800a1b8:	2301      	movs	r3, #1
 800a1ba:	e09c      	b.n	800a2f6 <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800a1bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1be:	2b01      	cmp	r3, #1
 800a1c0:	d904      	bls.n	800a1cc <f_lseek+0x374>
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	69db      	ldr	r3, [r3, #28]
 800a1c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d309      	bcc.n	800a1e0 <f_lseek+0x388>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2202      	movs	r2, #2
 800a1d0:	755a      	strb	r2, [r3, #21]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	2102      	movs	r1, #2
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7fd f9f9 	bl	80075ce <unlock_fs>
 800a1dc:	2302      	movs	r3, #2
 800a1de:	e08a      	b.n	800a2f6 <f_lseek+0x49e>
					fp->clust = clst;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a1e4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800a1e6:	683a      	ldr	r2, [r7, #0]
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	429a      	cmp	r2, r3
 800a1ec:	d8b6      	bhi.n	800a15c <f_lseek+0x304>
				}
				fp->fptr += ofs;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	699a      	ldr	r2, [r3, #24]
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	441a      	add	r2, r3
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a200:	2b00      	cmp	r3, #0
 800a202:	d017      	beq.n	800a234 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a208:	4618      	mov	r0, r3
 800a20a:	f7fd fc47 	bl	8007a9c <clust2sect>
 800a20e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a212:	2b00      	cmp	r3, #0
 800a214:	d109      	bne.n	800a22a <f_lseek+0x3d2>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2202      	movs	r2, #2
 800a21a:	755a      	strb	r2, [r3, #21]
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2102      	movs	r1, #2
 800a220:	4618      	mov	r0, r3
 800a222:	f7fd f9d4 	bl	80075ce <unlock_fs>
 800a226:	2302      	movs	r3, #2
 800a228:	e065      	b.n	800a2f6 <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	0a5b      	lsrs	r3, r3, #9
 800a22e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a230:	4413      	add	r3, r2
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	699a      	ldr	r2, [r3, #24]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	429a      	cmp	r2, r3
 800a23e:	d90a      	bls.n	800a256 <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	699a      	ldr	r2, [r3, #24]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	7d1b      	ldrb	r3, [r3, #20]
 800a24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a250:	b2da      	uxtb	r2, r3
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	699b      	ldr	r3, [r3, #24]
 800a25a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d040      	beq.n	800a2e4 <f_lseek+0x48c>
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a268:	429a      	cmp	r2, r3
 800a26a:	d03b      	beq.n	800a2e4 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7d1b      	ldrb	r3, [r3, #20]
 800a270:	b25b      	sxtb	r3, r3
 800a272:	2b00      	cmp	r3, #0
 800a274:	da1d      	bge.n	800a2b2 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800a276:	68bb      	ldr	r3, [r7, #8]
 800a278:	7858      	ldrb	r0, [r3, #1]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6a1a      	ldr	r2, [r3, #32]
 800a284:	2301      	movs	r3, #1
 800a286:	f7fd f84d 	bl	8007324 <disk_write>
 800a28a:	4603      	mov	r3, r0
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d009      	beq.n	800a2a4 <f_lseek+0x44c>
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	755a      	strb	r2, [r3, #21]
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	2101      	movs	r1, #1
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fd f997 	bl	80075ce <unlock_fs>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e028      	b.n	800a2f6 <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	7d1b      	ldrb	r3, [r3, #20]
 800a2a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ac:	b2da      	uxtb	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	7858      	ldrb	r0, [r3, #1]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a2bc:	2301      	movs	r3, #1
 800a2be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2c0:	f7fd f810 	bl	80072e4 <disk_read>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d009      	beq.n	800a2de <f_lseek+0x486>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	755a      	strb	r2, [r3, #21]
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f7fd f97a 	bl	80075ce <unlock_fs>
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e00b      	b.n	800a2f6 <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a2e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fd f96e 	bl	80075ce <unlock_fs>
 800a2f2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3740      	adds	r7, #64	@ 0x40
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	bd80      	pop	{r7, pc}

0800a2fe <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800a2fe:	b580      	push	{r7, lr}
 800a300:	b092      	sub	sp, #72	@ 0x48
 800a302:	af00      	add	r7, sp, #0
 800a304:	60f8      	str	r0, [r7, #12]
 800a306:	60b9      	str	r1, [r7, #8]
 800a308:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800a30a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800a30e:	f107 030c 	add.w	r3, r7, #12
 800a312:	2200      	movs	r2, #0
 800a314:	4618      	mov	r0, r3
 800a316:	f7fe fe6d 	bl	8008ff4 <find_volume>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800a320:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a324:	2b00      	cmp	r3, #0
 800a326:	f040 8099 	bne.w	800a45c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800a32a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	699a      	ldr	r2, [r3, #24]
 800a334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a336:	69db      	ldr	r3, [r3, #28]
 800a338:	3b02      	subs	r3, #2
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d804      	bhi.n	800a348 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800a33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a340:	699a      	ldr	r2, [r3, #24]
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	e089      	b.n	800a45c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	2b01      	cmp	r3, #1
 800a352:	d128      	bne.n	800a3a6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800a354:	2302      	movs	r3, #2
 800a356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a35a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800a35c:	f107 0314 	add.w	r3, r7, #20
 800a360:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a362:	4618      	mov	r0, r3
 800a364:	f7fd fbb9 	bl	8007ada <get_fat>
 800a368:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800a36a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a370:	d103      	bne.n	800a37a <f_getfree+0x7c>
 800a372:	2301      	movs	r3, #1
 800a374:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a378:	e063      	b.n	800a442 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800a37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a37c:	2b01      	cmp	r3, #1
 800a37e:	d103      	bne.n	800a388 <f_getfree+0x8a>
 800a380:	2302      	movs	r3, #2
 800a382:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a386:	e05c      	b.n	800a442 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800a388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <f_getfree+0x96>
 800a38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a390:	3301      	adds	r3, #1
 800a392:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800a394:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a396:	3301      	adds	r3, #1
 800a398:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a39a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a39c:	69db      	ldr	r3, [r3, #28]
 800a39e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3a0:	429a      	cmp	r2, r3
 800a3a2:	d3db      	bcc.n	800a35c <f_getfree+0x5e>
 800a3a4:	e04d      	b.n	800a442 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800a3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a8:	69db      	ldr	r3, [r3, #28]
 800a3aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3b0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800a3ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d113      	bne.n	800a3e8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800a3c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c4:	1c5a      	adds	r2, r3, #1
 800a3c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	f7fd facb 	bl	8007964 <move_window>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800a3d4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d131      	bne.n	800a440 <f_getfree+0x142>
							p = fs->win;
 800a3dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3de:	3338      	adds	r3, #56	@ 0x38
 800a3e0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800a3e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3e6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800a3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ea:	781b      	ldrb	r3, [r3, #0]
 800a3ec:	2b02      	cmp	r3, #2
 800a3ee:	d10f      	bne.n	800a410 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800a3f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a3f2:	f7fc ffd5 	bl	80073a0 <ld_word>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d102      	bne.n	800a402 <f_getfree+0x104>
 800a3fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a3fe:	3301      	adds	r3, #1
 800a400:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800a402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a404:	3302      	adds	r3, #2
 800a406:	633b      	str	r3, [r7, #48]	@ 0x30
 800a408:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a40a:	3b02      	subs	r3, #2
 800a40c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a40e:	e010      	b.n	800a432 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800a410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a412:	f7fc ffde 	bl	80073d2 <ld_dword>
 800a416:	4603      	mov	r3, r0
 800a418:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <f_getfree+0x128>
 800a420:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a422:	3301      	adds	r3, #1
 800a424:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800a426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a428:	3304      	adds	r3, #4
 800a42a:	633b      	str	r3, [r7, #48]	@ 0x30
 800a42c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a42e:	3b04      	subs	r3, #4
 800a430:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800a432:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a434:	3b01      	subs	r3, #1
 800a436:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d1bd      	bne.n	800a3ba <f_getfree+0xbc>
 800a43e:	e000      	b.n	800a442 <f_getfree+0x144>
							if (res != FR_OK) break;
 800a440:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a446:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800a448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a44a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a44c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800a44e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a450:	791a      	ldrb	r2, [r3, #4]
 800a452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a454:	f042 0201 	orr.w	r2, r2, #1
 800a458:	b2d2      	uxtb	r2, r2
 800a45a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800a45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a45e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800a462:	4611      	mov	r1, r2
 800a464:	4618      	mov	r0, r3
 800a466:	f7fd f8b2 	bl	80075ce <unlock_fs>
 800a46a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800a46e:	4618      	mov	r0, r3
 800a470:	3748      	adds	r7, #72	@ 0x48
 800a472:	46bd      	mov	sp, r7
 800a474:	bd80      	pop	{r7, pc}
	...

0800a478 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800a478:	b590      	push	{r4, r7, lr}
 800a47a:	b09d      	sub	sp, #116	@ 0x74
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	607a      	str	r2, [r7, #4]
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	460b      	mov	r3, r1
 800a486:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800a488:	2301      	movs	r3, #1
 800a48a:	647b      	str	r3, [r7, #68]	@ 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800a48c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a490:	643b      	str	r3, [r7, #64]	@ 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800a492:	f107 030c 	add.w	r3, r7, #12
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe fd11 	bl	8008ebe <get_ldnumber>
 800a49c:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a49e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	da02      	bge.n	800a4aa <f_mkfs+0x32>
 800a4a4:	230b      	movs	r3, #11
 800a4a6:	f000 bc0d 	b.w	800acc4 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800a4aa:	4a94      	ldr	r2, [pc, #592]	@ (800a6fc <f_mkfs+0x284>)
 800a4ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d005      	beq.n	800a4c2 <f_mkfs+0x4a>
 800a4b6:	4a91      	ldr	r2, [pc, #580]	@ (800a6fc <f_mkfs+0x284>)
 800a4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a4be:	2200      	movs	r2, #0
 800a4c0:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800a4c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a4c4:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800a4ce:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a4d2:	4618      	mov	r0, r3
 800a4d4:	f7fc fede 	bl	8007294 <disk_initialize>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800a4de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a4e2:	f003 0301 	and.w	r3, r3, #1
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d001      	beq.n	800a4ee <f_mkfs+0x76>
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e3ea      	b.n	800acc4 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800a4ee:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800a4f2:	f003 0304 	and.w	r3, r3, #4
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <f_mkfs+0x86>
 800a4fa:	230a      	movs	r3, #10
 800a4fc:	e3e2      	b.n	800acc4 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800a4fe:	f107 0214 	add.w	r2, r7, #20
 800a502:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a506:	2103      	movs	r1, #3
 800a508:	4618      	mov	r0, r3
 800a50a:	f7fc ff2b 	bl	8007364 <disk_ioctl>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10c      	bne.n	800a52e <f_mkfs+0xb6>
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d009      	beq.n	800a52e <f_mkfs+0xb6>
 800a51a:	697b      	ldr	r3, [r7, #20]
 800a51c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a520:	d805      	bhi.n	800a52e <f_mkfs+0xb6>
 800a522:	697b      	ldr	r3, [r7, #20]
 800a524:	1e5a      	subs	r2, r3, #1
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	4013      	ands	r3, r2
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d001      	beq.n	800a532 <f_mkfs+0xba>
 800a52e:	2301      	movs	r3, #1
 800a530:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800a532:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a536:	86fb      	strh	r3, [r7, #54]	@ 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d003      	beq.n	800a546 <f_mkfs+0xce>
 800a53e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	429a      	cmp	r2, r3
 800a544:	d309      	bcc.n	800a55a <f_mkfs+0xe2>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a54c:	d805      	bhi.n	800a55a <f_mkfs+0xe2>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	1e5a      	subs	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	4013      	ands	r3, r2
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <f_mkfs+0xe6>
 800a55a:	2313      	movs	r3, #19
 800a55c:	e3b2      	b.n	800acc4 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800a55e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a560:	687a      	ldr	r2, [r7, #4]
 800a562:	fbb2 f3f3 	udiv	r3, r2, r3
 800a566:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	633b      	str	r3, [r7, #48]	@ 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800a56c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a56e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a572:	fbb2 f3f3 	udiv	r3, r2, r3
 800a576:	62fb      	str	r3, [r7, #44]	@ 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800a578:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a57c:	fb02 f303 	mul.w	r3, r2, r3
 800a580:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800a582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a584:	2b00      	cmp	r3, #0
 800a586:	d101      	bne.n	800a58c <f_mkfs+0x114>
 800a588:	230e      	movs	r3, #14
 800a58a:	e39b      	b.n	800acc4 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800a58c:	f107 0210 	add.w	r2, r7, #16
 800a590:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800a594:	2101      	movs	r1, #1
 800a596:	4618      	mov	r0, r3
 800a598:	f7fc fee4 	bl	8007364 <disk_ioctl>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <f_mkfs+0x12e>
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e38e      	b.n	800acc4 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800a5a6:	7afb      	ldrb	r3, [r7, #11]
 800a5a8:	f003 0308 	and.w	r3, r3, #8
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d001      	beq.n	800a5b4 <f_mkfs+0x13c>
 800a5b0:	2300      	movs	r3, #0
 800a5b2:	e000      	b.n	800a5b6 <f_mkfs+0x13e>
 800a5b4:	233f      	movs	r3, #63	@ 0x3f
 800a5b6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d901      	bls.n	800a5c4 <f_mkfs+0x14c>
 800a5c0:	230e      	movs	r3, #14
 800a5c2:	e37f      	b.n	800acc4 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800a5c4:	693a      	ldr	r2, [r7, #16]
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800a5cc:	693b      	ldr	r3, [r7, #16]
 800a5ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5d0:	d801      	bhi.n	800a5d6 <f_mkfs+0x15e>
 800a5d2:	230e      	movs	r3, #14
 800a5d4:	e376      	b.n	800acc4 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b80      	cmp	r3, #128	@ 0x80
 800a5da:	d901      	bls.n	800a5e0 <f_mkfs+0x168>
 800a5dc:	2313      	movs	r3, #19
 800a5de:	e371      	b.n	800acc4 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800a5e0:	7afb      	ldrb	r3, [r7, #11]
 800a5e2:	f003 0302 	and.w	r3, r3, #2
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00d      	beq.n	800a606 <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800a5ea:	7afb      	ldrb	r3, [r7, #11]
 800a5ec:	f003 0307 	and.w	r3, r3, #7
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d004      	beq.n	800a5fe <f_mkfs+0x186>
 800a5f4:	7afb      	ldrb	r3, [r7, #11]
 800a5f6:	f003 0301 	and.w	r3, r3, #1
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d103      	bne.n	800a606 <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800a5fe:	2303      	movs	r3, #3
 800a600:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a604:	e009      	b.n	800a61a <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800a606:	7afb      	ldrb	r3, [r7, #11]
 800a608:	f003 0301 	and.w	r3, r3, #1
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d101      	bne.n	800a614 <f_mkfs+0x19c>
 800a610:	2313      	movs	r3, #19
 800a612:	e357      	b.n	800acc4 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800a614:	2302      	movs	r3, #2
 800a616:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	653b      	str	r3, [r7, #80]	@ 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800a61e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a622:	2b03      	cmp	r3, #3
 800a624:	d13c      	bne.n	800a6a0 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800a626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11b      	bne.n	800a664 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800a62c:	693b      	ldr	r3, [r7, #16]
 800a62e:	0c5b      	lsrs	r3, r3, #17
 800a630:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a632:	2300      	movs	r3, #0
 800a634:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a636:	2301      	movs	r3, #1
 800a638:	653b      	str	r3, [r7, #80]	@ 0x50
 800a63a:	e005      	b.n	800a648 <f_mkfs+0x1d0>
 800a63c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a63e:	3301      	adds	r3, #1
 800a640:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a644:	005b      	lsls	r3, r3, #1
 800a646:	653b      	str	r3, [r7, #80]	@ 0x50
 800a648:	4a2d      	ldr	r2, [pc, #180]	@ (800a700 <f_mkfs+0x288>)
 800a64a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a64c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d007      	beq.n	800a664 <f_mkfs+0x1ec>
 800a654:	4a2a      	ldr	r2, [pc, #168]	@ (800a700 <f_mkfs+0x288>)
 800a656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a658:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a65c:	461a      	mov	r2, r3
 800a65e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a660:	4293      	cmp	r3, r2
 800a662:	d2eb      	bcs.n	800a63c <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a668:	fbb2 f3f3 	udiv	r3, r2, r3
 800a66c:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800a66e:	6a3b      	ldr	r3, [r7, #32]
 800a670:	3302      	adds	r3, #2
 800a672:	009a      	lsls	r2, r3, #2
 800a674:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a676:	4413      	add	r3, r2
 800a678:	1e5a      	subs	r2, r3, #1
 800a67a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a67c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a680:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800a682:	2320      	movs	r3, #32
 800a684:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = 0;		/* No static directory */
 800a686:	2300      	movs	r3, #0
 800a688:	66fb      	str	r3, [r7, #108]	@ 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800a68a:	6a3b      	ldr	r3, [r7, #32]
 800a68c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a690:	4293      	cmp	r3, r2
 800a692:	d903      	bls.n	800a69c <f_mkfs+0x224>
 800a694:	6a3b      	ldr	r3, [r7, #32]
 800a696:	4a1b      	ldr	r2, [pc, #108]	@ (800a704 <f_mkfs+0x28c>)
 800a698:	4293      	cmp	r3, r2
 800a69a:	d952      	bls.n	800a742 <f_mkfs+0x2ca>
 800a69c:	230e      	movs	r3, #14
 800a69e:	e311      	b.n	800acc4 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800a6a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d11b      	bne.n	800a6de <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	0b1b      	lsrs	r3, r3, #12
 800a6aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6b4:	e005      	b.n	800a6c2 <f_mkfs+0x24a>
 800a6b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6b8:	3301      	adds	r3, #1
 800a6ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a6bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6be:	005b      	lsls	r3, r3, #1
 800a6c0:	653b      	str	r3, [r7, #80]	@ 0x50
 800a6c2:	4a11      	ldr	r2, [pc, #68]	@ (800a708 <f_mkfs+0x290>)
 800a6c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d007      	beq.n	800a6de <f_mkfs+0x266>
 800a6ce:	4a0e      	ldr	r2, [pc, #56]	@ (800a708 <f_mkfs+0x290>)
 800a6d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a6d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6d6:	461a      	mov	r2, r3
 800a6d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d2eb      	bcs.n	800a6b6 <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a6e2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6e6:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	d90c      	bls.n	800a70c <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800a6f2:	6a3b      	ldr	r3, [r7, #32]
 800a6f4:	3302      	adds	r3, #2
 800a6f6:	005b      	lsls	r3, r3, #1
 800a6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6fa:	e012      	b.n	800a722 <f_mkfs+0x2aa>
 800a6fc:	200009d8 	.word	0x200009d8
 800a700:	08012b84 	.word	0x08012b84
 800a704:	0ffffff5 	.word	0x0ffffff5
 800a708:	08012b94 	.word	0x08012b94
				} else {
					fmt = FS_FAT12;
 800a70c:	2301      	movs	r3, #1
 800a70e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800a712:	6a3a      	ldr	r2, [r7, #32]
 800a714:	4613      	mov	r3, r2
 800a716:	005b      	lsls	r3, r3, #1
 800a718:	4413      	add	r3, r2
 800a71a:	3301      	adds	r3, #1
 800a71c:	085b      	lsrs	r3, r3, #1
 800a71e:	3303      	adds	r3, #3
 800a720:	65fb      	str	r3, [r7, #92]	@ 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800a722:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a724:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a726:	4413      	add	r3, r2
 800a728:	1e5a      	subs	r2, r3, #1
 800a72a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a72c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a730:	66bb      	str	r3, [r7, #104]	@ 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800a732:	2301      	movs	r3, #1
 800a734:	657b      	str	r3, [r7, #84]	@ 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800a736:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a738:	015a      	lsls	r2, r3, #5
 800a73a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a73c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a740:	66fb      	str	r3, [r7, #108]	@ 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800a742:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a746:	4413      	add	r3, r2
 800a748:	65bb      	str	r3, [r7, #88]	@ 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800a74a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a74c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a74e:	fb03 f202 	mul.w	r2, r3, r2
 800a752:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a754:	4413      	add	r3, r2
 800a756:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a758:	4413      	add	r3, r2
 800a75a:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	69fb      	ldr	r3, [r7, #28]
 800a760:	4413      	add	r3, r2
 800a762:	1e5a      	subs	r2, r3, #1
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	425b      	negs	r3, r3
 800a768:	401a      	ands	r2, r3
 800a76a:	69fb      	ldr	r3, [r7, #28]
 800a76c:	1ad3      	subs	r3, r2, r3
 800a76e:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800a770:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a774:	2b03      	cmp	r3, #3
 800a776:	d108      	bne.n	800a78a <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800a778:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a77a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a77c:	4413      	add	r3, r2
 800a77e:	657b      	str	r3, [r7, #84]	@ 0x54
 800a780:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a784:	4413      	add	r3, r2
 800a786:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a788:	e006      	b.n	800a798 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800a78a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800a78c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a78e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a792:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a794:	4413      	add	r3, r2
 800a796:	66bb      	str	r3, [r7, #104]	@ 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800a798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a79a:	011a      	lsls	r2, r3, #4
 800a79c:	69fb      	ldr	r3, [r7, #28]
 800a79e:	441a      	add	r2, r3
 800a7a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a2:	1ad2      	subs	r2, r2, r3
 800a7a4:	693b      	ldr	r3, [r7, #16]
 800a7a6:	429a      	cmp	r2, r3
 800a7a8:	d901      	bls.n	800a7ae <f_mkfs+0x336>
 800a7aa:	230e      	movs	r3, #14
 800a7ac:	e28a      	b.n	800acc4 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800a7ae:	693a      	ldr	r2, [r7, #16]
 800a7b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a7b2:	1ad2      	subs	r2, r2, r3
 800a7b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a7b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a7b8:	fb01 f303 	mul.w	r3, r1, r3
 800a7bc:	1ad2      	subs	r2, r2, r3
 800a7be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a7c0:	1ad2      	subs	r2, r2, r3
 800a7c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7c8:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800a7ca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a7ce:	2b03      	cmp	r3, #3
 800a7d0:	d10f      	bne.n	800a7f2 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800a7d2:	6a3b      	ldr	r3, [r7, #32]
 800a7d4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d80a      	bhi.n	800a7f2 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d105      	bne.n	800a7ee <f_mkfs+0x376>
 800a7e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a7e4:	085b      	lsrs	r3, r3, #1
 800a7e6:	607b      	str	r3, [r7, #4]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d144      	bne.n	800a878 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800a7ee:	230e      	movs	r3, #14
 800a7f0:	e268      	b.n	800acc4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800a7f2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a7f6:	2b02      	cmp	r3, #2
 800a7f8:	d133      	bne.n	800a862 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800a7fa:	6a3b      	ldr	r3, [r7, #32]
 800a7fc:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800a800:	4293      	cmp	r3, r2
 800a802:	d91e      	bls.n	800a842 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d107      	bne.n	800a81a <f_mkfs+0x3a2>
 800a80a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	2b40      	cmp	r3, #64	@ 0x40
 800a810:	d803      	bhi.n	800a81a <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800a812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a814:	005b      	lsls	r3, r3, #1
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e033      	b.n	800a882 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800a81a:	7afb      	ldrb	r3, [r7, #11]
 800a81c:	f003 0302 	and.w	r3, r3, #2
 800a820:	2b00      	cmp	r3, #0
 800a822:	d003      	beq.n	800a82c <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800a824:	2303      	movs	r3, #3
 800a826:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800a82a:	e02a      	b.n	800a882 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d105      	bne.n	800a83e <f_mkfs+0x3c6>
 800a832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	607b      	str	r3, [r7, #4]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b80      	cmp	r3, #128	@ 0x80
 800a83c:	d91e      	bls.n	800a87c <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800a83e:	230e      	movs	r3, #14
 800a840:	e240      	b.n	800acc4 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800a842:	6a3b      	ldr	r3, [r7, #32]
 800a844:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a848:	4293      	cmp	r3, r2
 800a84a:	d80a      	bhi.n	800a862 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d105      	bne.n	800a85e <f_mkfs+0x3e6>
 800a852:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a854:	005b      	lsls	r3, r3, #1
 800a856:	607b      	str	r3, [r7, #4]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	2b80      	cmp	r3, #128	@ 0x80
 800a85c:	d910      	bls.n	800a880 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800a85e:	230e      	movs	r3, #14
 800a860:	e230      	b.n	800acc4 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800a862:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a866:	2b01      	cmp	r3, #1
 800a868:	d10c      	bne.n	800a884 <f_mkfs+0x40c>
 800a86a:	6a3b      	ldr	r3, [r7, #32]
 800a86c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800a870:	4293      	cmp	r3, r2
 800a872:	d907      	bls.n	800a884 <f_mkfs+0x40c>
 800a874:	230e      	movs	r3, #14
 800a876:	e225      	b.n	800acc4 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800a878:	bf00      	nop
 800a87a:	e6ce      	b.n	800a61a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a87c:	bf00      	nop
 800a87e:	e6cc      	b.n	800a61a <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800a880:	bf00      	nop
			pau = au;
 800a882:	e6ca      	b.n	800a61a <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 800a884:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 800a886:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a888:	461a      	mov	r2, r3
 800a88a:	2100      	movs	r1, #0
 800a88c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a88e:	f7fc fe2b 	bl	80074e8 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 800a892:	220b      	movs	r2, #11
 800a894:	49b2      	ldr	r1, [pc, #712]	@ (800ab60 <f_mkfs+0x6e8>)
 800a896:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a898:	f7fc fe05 	bl	80074a6 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 800a89c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a89e:	330b      	adds	r3, #11
 800a8a0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f7fc fdb7 	bl	8007418 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 800a8aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8ac:	330d      	adds	r3, #13
 800a8ae:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a8b0:	b2d2      	uxtb	r2, r2
 800a8b2:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 800a8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8b6:	330e      	adds	r3, #14
 800a8b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800a8ba:	b292      	uxth	r2, r2
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7fc fdaa 	bl	8007418 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 800a8c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8c6:	3310      	adds	r3, #16
 800a8c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a8ca:	b2d2      	uxtb	r2, r2
 800a8cc:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 800a8ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8d0:	f103 0211 	add.w	r2, r3, #17
 800a8d4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a8d8:	2b03      	cmp	r3, #3
 800a8da:	d002      	beq.n	800a8e2 <f_mkfs+0x46a>
 800a8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8de:	b29b      	uxth	r3, r3
 800a8e0:	e000      	b.n	800a8e4 <f_mkfs+0x46c>
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f7fc fd96 	bl	8007418 <st_word>
		if (sz_vol < 0x10000) {
 800a8ec:	693b      	ldr	r3, [r7, #16]
 800a8ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8f2:	d208      	bcs.n	800a906 <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 800a8f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8f6:	3313      	adds	r3, #19
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	b292      	uxth	r2, r2
 800a8fc:	4611      	mov	r1, r2
 800a8fe:	4618      	mov	r0, r3
 800a900:	f7fc fd8a 	bl	8007418 <st_word>
 800a904:	e006      	b.n	800a914 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 800a906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a908:	3320      	adds	r3, #32
 800a90a:	693a      	ldr	r2, [r7, #16]
 800a90c:	4611      	mov	r1, r2
 800a90e:	4618      	mov	r0, r3
 800a910:	f7fc fd9d 	bl	800744e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 800a914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a916:	3315      	adds	r3, #21
 800a918:	22f8      	movs	r2, #248	@ 0xf8
 800a91a:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 800a91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a91e:	3318      	adds	r3, #24
 800a920:	213f      	movs	r1, #63	@ 0x3f
 800a922:	4618      	mov	r0, r3
 800a924:	f7fc fd78 	bl	8007418 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 800a928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a92a:	331a      	adds	r3, #26
 800a92c:	21ff      	movs	r1, #255	@ 0xff
 800a92e:	4618      	mov	r0, r3
 800a930:	f7fc fd72 	bl	8007418 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 800a934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a936:	331c      	adds	r3, #28
 800a938:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a93a:	4618      	mov	r0, r3
 800a93c:	f7fc fd87 	bl	800744e <st_dword>
		if (fmt == FS_FAT32) {
 800a940:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800a944:	2b03      	cmp	r3, #3
 800a946:	d131      	bne.n	800a9ac <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 800a948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a94a:	f103 0443 	add.w	r4, r3, #67	@ 0x43
 800a94e:	f7fc fc7f 	bl	8007250 <get_fattime>
 800a952:	4603      	mov	r3, r0
 800a954:	4619      	mov	r1, r3
 800a956:	4620      	mov	r0, r4
 800a958:	f7fc fd79 	bl	800744e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 800a95c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a95e:	3324      	adds	r3, #36	@ 0x24
 800a960:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a962:	4618      	mov	r0, r3
 800a964:	f7fc fd73 	bl	800744e <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 800a968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a96a:	332c      	adds	r3, #44	@ 0x2c
 800a96c:	2102      	movs	r1, #2
 800a96e:	4618      	mov	r0, r3
 800a970:	f7fc fd6d 	bl	800744e <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 800a974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a976:	3330      	adds	r3, #48	@ 0x30
 800a978:	2101      	movs	r1, #1
 800a97a:	4618      	mov	r0, r3
 800a97c:	f7fc fd4c 	bl	8007418 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 800a980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a982:	3332      	adds	r3, #50	@ 0x32
 800a984:	2106      	movs	r1, #6
 800a986:	4618      	mov	r0, r3
 800a988:	f7fc fd46 	bl	8007418 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 800a98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a98e:	3340      	adds	r3, #64	@ 0x40
 800a990:	2280      	movs	r2, #128	@ 0x80
 800a992:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 800a994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a996:	3342      	adds	r3, #66	@ 0x42
 800a998:	2229      	movs	r2, #41	@ 0x29
 800a99a:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 800a99c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a99e:	3347      	adds	r3, #71	@ 0x47
 800a9a0:	2213      	movs	r2, #19
 800a9a2:	4970      	ldr	r1, [pc, #448]	@ (800ab64 <f_mkfs+0x6ec>)
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fc fd7e 	bl	80074a6 <mem_cpy>
 800a9aa:	e020      	b.n	800a9ee <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 800a9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9ae:	f103 0427 	add.w	r4, r3, #39	@ 0x27
 800a9b2:	f7fc fc4d 	bl	8007250 <get_fattime>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f7fc fd47 	bl	800744e <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 800a9c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9c2:	3316      	adds	r3, #22
 800a9c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a9c6:	b292      	uxth	r2, r2
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fc fd24 	bl	8007418 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 800a9d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9d2:	3324      	adds	r3, #36	@ 0x24
 800a9d4:	2280      	movs	r2, #128	@ 0x80
 800a9d6:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 800a9d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9da:	3326      	adds	r3, #38	@ 0x26
 800a9dc:	2229      	movs	r2, #41	@ 0x29
 800a9de:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9e2:	332b      	adds	r3, #43	@ 0x2b
 800a9e4:	2213      	movs	r2, #19
 800a9e6:	4960      	ldr	r1, [pc, #384]	@ (800ab68 <f_mkfs+0x6f0>)
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fc fd5c 	bl	80074a6 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 800a9ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9f0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a9f4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fc fd0d 	bl	8007418 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 800a9fe:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800aa02:	2301      	movs	r3, #1
 800aa04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa08:	f7fc fc8c 	bl	8007324 <disk_write>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d001      	beq.n	800aa16 <f_mkfs+0x59e>
 800aa12:	2301      	movs	r3, #1
 800aa14:	e156      	b.n	800acc4 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 800aa16:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800aa1a:	2b03      	cmp	r3, #3
 800aa1c:	d140      	bne.n	800aaa0 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	1d9a      	adds	r2, r3, #6
 800aa22:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800aa26:	2301      	movs	r3, #1
 800aa28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa2a:	f7fc fc7b 	bl	8007324 <disk_write>
			mem_set(buf, 0, ss);
 800aa2e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa30:	461a      	mov	r2, r3
 800aa32:	2100      	movs	r1, #0
 800aa34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa36:	f7fc fd57 	bl	80074e8 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 800aa3a:	494c      	ldr	r1, [pc, #304]	@ (800ab6c <f_mkfs+0x6f4>)
 800aa3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa3e:	f7fc fd06 	bl	800744e <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800aa48:	4949      	ldr	r1, [pc, #292]	@ (800ab70 <f_mkfs+0x6f8>)
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fc fcff 	bl	800744e <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 800aa50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa52:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800aa56:	6a3b      	ldr	r3, [r7, #32]
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	4610      	mov	r0, r2
 800aa5e:	f7fc fcf6 	bl	800744e <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 800aa62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa64:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800aa68:	2102      	movs	r1, #2
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fc fcef 	bl	800744e <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 800aa70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa72:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800aa76:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fc fccc 	bl	8007418 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 800aa80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa82:	1dda      	adds	r2, r3, #7
 800aa84:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800aa88:	2301      	movs	r3, #1
 800aa8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa8c:	f7fc fc4a 	bl	8007324 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 800aa90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa92:	1c5a      	adds	r2, r3, #1
 800aa94:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800aa98:	2301      	movs	r3, #1
 800aa9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800aa9c:	f7fc fc42 	bl	8007324 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 800aaa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaa6:	f7fc fd1f 	bl	80074e8 <mem_set>
		sect = b_fat;		/* FAT start sector */
 800aaaa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800aaac:	667b      	str	r3, [r7, #100]	@ 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800aaae:	2300      	movs	r3, #0
 800aab0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aab2:	e04b      	b.n	800ab4c <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 800aab4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800aab8:	2b03      	cmp	r3, #3
 800aaba:	d113      	bne.n	800aae4 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 800aabc:	f06f 0107 	mvn.w	r1, #7
 800aac0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aac2:	f7fc fcc4 	bl	800744e <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 800aac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aac8:	3304      	adds	r3, #4
 800aaca:	f04f 31ff 	mov.w	r1, #4294967295
 800aace:	4618      	mov	r0, r3
 800aad0:	f7fc fcbd 	bl	800744e <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 800aad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aad6:	3308      	adds	r3, #8
 800aad8:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800aadc:	4618      	mov	r0, r3
 800aade:	f7fc fcb6 	bl	800744e <st_dword>
 800aae2:	e00b      	b.n	800aafc <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 800aae4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800aae8:	2b01      	cmp	r3, #1
 800aaea:	d101      	bne.n	800aaf0 <f_mkfs+0x678>
 800aaec:	4b21      	ldr	r3, [pc, #132]	@ (800ab74 <f_mkfs+0x6fc>)
 800aaee:	e001      	b.n	800aaf4 <f_mkfs+0x67c>
 800aaf0:	f06f 0307 	mvn.w	r3, #7
 800aaf4:	4619      	mov	r1, r3
 800aaf6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aaf8:	f7fc fca9 	bl	800744e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 800aafc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800aafe:	663b      	str	r3, [r7, #96]	@ 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 800ab00:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab04:	4293      	cmp	r3, r2
 800ab06:	bf28      	it	cs
 800ab08:	4613      	movcs	r3, r2
 800ab0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ab0c:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ab10:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab12:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab16:	f7fc fc05 	bl	8007324 <disk_write>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d001      	beq.n	800ab24 <f_mkfs+0x6ac>
 800ab20:	2301      	movs	r3, #1
 800ab22:	e0cf      	b.n	800acc4 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 800ab24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ab26:	461a      	mov	r2, r3
 800ab28:	2100      	movs	r1, #0
 800ab2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab2c:	f7fc fcdc 	bl	80074e8 <mem_set>
				sect += n; nsect -= n;
 800ab30:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab32:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab34:	4413      	add	r3, r2
 800ab36:	667b      	str	r3, [r7, #100]	@ 0x64
 800ab38:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab3c:	1ad3      	subs	r3, r2, r3
 800ab3e:	663b      	str	r3, [r7, #96]	@ 0x60
			} while (nsect);
 800ab40:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1dc      	bne.n	800ab00 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 800ab46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ab48:	3301      	adds	r3, #1
 800ab4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d3af      	bcc.n	800aab4 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 800ab54:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ab58:	2b03      	cmp	r3, #3
 800ab5a:	d10d      	bne.n	800ab78 <f_mkfs+0x700>
 800ab5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ab5e:	e00c      	b.n	800ab7a <f_mkfs+0x702>
 800ab60:	080121d4 	.word	0x080121d4
 800ab64:	080121e0 	.word	0x080121e0
 800ab68:	080121f4 	.word	0x080121f4
 800ab6c:	41615252 	.word	0x41615252
 800ab70:	61417272 	.word	0x61417272
 800ab74:	00fffff8 	.word	0x00fffff8
 800ab78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ab7a:	663b      	str	r3, [r7, #96]	@ 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 800ab7c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ab7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab80:	4293      	cmp	r3, r2
 800ab82:	bf28      	it	cs
 800ab84:	4613      	movcs	r3, r2
 800ab86:	65fb      	str	r3, [r7, #92]	@ 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 800ab88:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ab8c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ab8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ab90:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ab92:	f7fc fbc7 	bl	8007324 <disk_write>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <f_mkfs+0x728>
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e091      	b.n	800acc4 <f_mkfs+0x84c>
			sect += n; nsect -= n;
 800aba0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800aba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aba4:	4413      	add	r3, r2
 800aba6:	667b      	str	r3, [r7, #100]	@ 0x64
 800aba8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800abaa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800abac:	1ad3      	subs	r3, r2, r3
 800abae:	663b      	str	r3, [r7, #96]	@ 0x60
		} while (nsect);
 800abb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d1e2      	bne.n	800ab7c <f_mkfs+0x704>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 800abb6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d103      	bne.n	800abc6 <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 800abbe:	230c      	movs	r3, #12
 800abc0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800abc4:	e010      	b.n	800abe8 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abcc:	d303      	bcc.n	800abd6 <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 800abce:	2306      	movs	r3, #6
 800abd0:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 800abd4:	e008      	b.n	800abe8 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 800abd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800abda:	2b02      	cmp	r3, #2
 800abdc:	d101      	bne.n	800abe2 <f_mkfs+0x76a>
 800abde:	2304      	movs	r3, #4
 800abe0:	e000      	b.n	800abe4 <f_mkfs+0x76c>
 800abe2:	2301      	movs	r3, #1
 800abe4:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	f003 0308 	and.w	r3, r3, #8
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d15b      	bne.n	800acaa <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 800abf2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800abf4:	461a      	mov	r2, r3
 800abf6:	2100      	movs	r1, #0
 800abf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abfa:	f7fc fc75 	bl	80074e8 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 800abfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac00:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ac04:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7fc fc05 	bl	8007418 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac10:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800ac14:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 800ac16:	69bb      	ldr	r3, [r7, #24]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 800ac1c:	69bb      	ldr	r3, [r7, #24]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	2201      	movs	r2, #1
 800ac22:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 800ac24:	69bb      	ldr	r3, [r7, #24]
 800ac26:	3302      	adds	r3, #2
 800ac28:	2201      	movs	r2, #1
 800ac2a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	3303      	adds	r3, #3
 800ac30:	2200      	movs	r2, #0
 800ac32:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	3304      	adds	r3, #4
 800ac38:	f897 204e 	ldrb.w	r2, [r7, #78]	@ 0x4e
 800ac3c:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 800ac3e:	693a      	ldr	r2, [r7, #16]
 800ac40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac42:	441a      	add	r2, r3
 800ac44:	4b21      	ldr	r3, [pc, #132]	@ (800accc <f_mkfs+0x854>)
 800ac46:	fba3 1302 	umull	r1, r3, r3, r2
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	0852      	lsrs	r2, r2, #1
 800ac4e:	4413      	add	r3, r2
 800ac50:	0b5b      	lsrs	r3, r3, #13
 800ac52:	65fb      	str	r3, [r7, #92]	@ 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 800ac54:	69bb      	ldr	r3, [r7, #24]
 800ac56:	3305      	adds	r3, #5
 800ac58:	22fe      	movs	r2, #254	@ 0xfe
 800ac5a:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 800ac5c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ac5e:	089b      	lsrs	r3, r3, #2
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	3306      	adds	r3, #6
 800ac66:	f042 023f 	orr.w	r2, r2, #63	@ 0x3f
 800ac6a:	b2d2      	uxtb	r2, r2
 800ac6c:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	3307      	adds	r3, #7
 800ac72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ac74:	b2d2      	uxtb	r2, r2
 800ac76:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 800ac78:	69bb      	ldr	r3, [r7, #24]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fc fbe5 	bl	800744e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 800ac84:	69bb      	ldr	r3, [r7, #24]
 800ac86:	330c      	adds	r3, #12
 800ac88:	693a      	ldr	r2, [r7, #16]
 800ac8a:	4611      	mov	r1, r2
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f7fc fbde 	bl	800744e <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 800ac92:	f897 003b 	ldrb.w	r0, [r7, #59]	@ 0x3b
 800ac96:	2301      	movs	r3, #1
 800ac98:	2200      	movs	r2, #0
 800ac9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800ac9c:	f7fc fb42 	bl	8007324 <disk_write>
 800aca0:	4603      	mov	r3, r0
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <f_mkfs+0x832>
 800aca6:	2301      	movs	r3, #1
 800aca8:	e00c      	b.n	800acc4 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 800acaa:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800acae:	2200      	movs	r2, #0
 800acb0:	2100      	movs	r1, #0
 800acb2:	4618      	mov	r0, r3
 800acb4:	f7fc fb56 	bl	8007364 <disk_ioctl>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <f_mkfs+0x84a>
 800acbe:	2301      	movs	r3, #1
 800acc0:	e000      	b.n	800acc4 <f_mkfs+0x84c>

	return FR_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3774      	adds	r7, #116	@ 0x74
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd90      	pop	{r4, r7, pc}
 800accc:	0515565b 	.word	0x0515565b

0800acd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800acde:	2301      	movs	r3, #1
 800ace0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ace2:	2300      	movs	r3, #0
 800ace4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ace6:	4b1f      	ldr	r3, [pc, #124]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ace8:	7a5b      	ldrb	r3, [r3, #9]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	2b00      	cmp	r3, #0
 800acee:	d131      	bne.n	800ad54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800acf0:	4b1c      	ldr	r3, [pc, #112]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800acf2:	7a5b      	ldrb	r3, [r3, #9]
 800acf4:	b2db      	uxtb	r3, r3
 800acf6:	461a      	mov	r2, r3
 800acf8:	4b1a      	ldr	r3, [pc, #104]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800acfa:	2100      	movs	r1, #0
 800acfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800acfe:	4b19      	ldr	r3, [pc, #100]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad00:	7a5b      	ldrb	r3, [r3, #9]
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	4a17      	ldr	r2, [pc, #92]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	4413      	add	r3, r2
 800ad0a:	68fa      	ldr	r2, [r7, #12]
 800ad0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ad0e:	4b15      	ldr	r3, [pc, #84]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad10:	7a5b      	ldrb	r3, [r3, #9]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	461a      	mov	r2, r3
 800ad16:	4b13      	ldr	r3, [pc, #76]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad18:	4413      	add	r3, r2
 800ad1a:	79fa      	ldrb	r2, [r7, #7]
 800ad1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ad1e:	4b11      	ldr	r3, [pc, #68]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad20:	7a5b      	ldrb	r3, [r3, #9]
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	1c5a      	adds	r2, r3, #1
 800ad26:	b2d1      	uxtb	r1, r2
 800ad28:	4a0e      	ldr	r2, [pc, #56]	@ (800ad64 <FATFS_LinkDriverEx+0x94>)
 800ad2a:	7251      	strb	r1, [r2, #9]
 800ad2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ad2e:	7dbb      	ldrb	r3, [r7, #22]
 800ad30:	3330      	adds	r3, #48	@ 0x30
 800ad32:	b2da      	uxtb	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	3301      	adds	r3, #1
 800ad3c:	223a      	movs	r2, #58	@ 0x3a
 800ad3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	3302      	adds	r3, #2
 800ad44:	222f      	movs	r2, #47	@ 0x2f
 800ad46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ad48:	68bb      	ldr	r3, [r7, #8]
 800ad4a:	3303      	adds	r3, #3
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ad50:	2300      	movs	r3, #0
 800ad52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ad54:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
 800ad64:	20000a00 	.word	0x20000a00

0800ad68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
 800ad70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ad72:	2200      	movs	r2, #0
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f7ff ffaa 	bl	800acd0 <FATFS_LinkDriverEx>
 800ad7c:	4603      	mov	r3, r0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3708      	adds	r7, #8
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
	...

0800ad88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b085      	sub	sp, #20
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	6039      	str	r1, [r7, #0]
 800ad92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800ad94:	88fb      	ldrh	r3, [r7, #6]
 800ad96:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad98:	d802      	bhi.n	800ada0 <ff_convert+0x18>
		c = chr;
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	81fb      	strh	r3, [r7, #14]
 800ad9e:	e025      	b.n	800adec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800ada6:	88fb      	ldrh	r3, [r7, #6]
 800ada8:	2bff      	cmp	r3, #255	@ 0xff
 800adaa:	d805      	bhi.n	800adb8 <ff_convert+0x30>
 800adac:	88fb      	ldrh	r3, [r7, #6]
 800adae:	3b80      	subs	r3, #128	@ 0x80
 800adb0:	4a12      	ldr	r2, [pc, #72]	@ (800adfc <ff_convert+0x74>)
 800adb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adb6:	e000      	b.n	800adba <ff_convert+0x32>
 800adb8:	2300      	movs	r3, #0
 800adba:	81fb      	strh	r3, [r7, #14]
 800adbc:	e016      	b.n	800adec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800adbe:	2300      	movs	r3, #0
 800adc0:	81fb      	strh	r3, [r7, #14]
 800adc2:	e009      	b.n	800add8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800adc4:	89fb      	ldrh	r3, [r7, #14]
 800adc6:	4a0d      	ldr	r2, [pc, #52]	@ (800adfc <ff_convert+0x74>)
 800adc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adcc:	88fa      	ldrh	r2, [r7, #6]
 800adce:	429a      	cmp	r2, r3
 800add0:	d006      	beq.n	800ade0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800add2:	89fb      	ldrh	r3, [r7, #14]
 800add4:	3301      	adds	r3, #1
 800add6:	81fb      	strh	r3, [r7, #14]
 800add8:	89fb      	ldrh	r3, [r7, #14]
 800adda:	2b7f      	cmp	r3, #127	@ 0x7f
 800addc:	d9f2      	bls.n	800adc4 <ff_convert+0x3c>
 800adde:	e000      	b.n	800ade2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800ade0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800ade2:	89fb      	ldrh	r3, [r7, #14]
 800ade4:	3380      	adds	r3, #128	@ 0x80
 800ade6:	b29b      	uxth	r3, r3
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800adec:	89fb      	ldrh	r3, [r7, #14]
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	08012ba4 	.word	0x08012ba4

0800ae00 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b087      	sub	sp, #28
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800ae0a:	88fb      	ldrh	r3, [r7, #6]
 800ae0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ae10:	d201      	bcs.n	800ae16 <ff_wtoupper+0x16>
 800ae12:	4b3e      	ldr	r3, [pc, #248]	@ (800af0c <ff_wtoupper+0x10c>)
 800ae14:	e000      	b.n	800ae18 <ff_wtoupper+0x18>
 800ae16:	4b3e      	ldr	r3, [pc, #248]	@ (800af10 <ff_wtoupper+0x110>)
 800ae18:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	1c9a      	adds	r2, r3, #2
 800ae1e:	617a      	str	r2, [r7, #20]
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800ae24:	8a7b      	ldrh	r3, [r7, #18]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d068      	beq.n	800aefc <ff_wtoupper+0xfc>
 800ae2a:	88fa      	ldrh	r2, [r7, #6]
 800ae2c:	8a7b      	ldrh	r3, [r7, #18]
 800ae2e:	429a      	cmp	r2, r3
 800ae30:	d364      	bcc.n	800aefc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	1c9a      	adds	r2, r3, #2
 800ae36:	617a      	str	r2, [r7, #20]
 800ae38:	881b      	ldrh	r3, [r3, #0]
 800ae3a:	823b      	strh	r3, [r7, #16]
 800ae3c:	8a3b      	ldrh	r3, [r7, #16]
 800ae3e:	0a1b      	lsrs	r3, r3, #8
 800ae40:	81fb      	strh	r3, [r7, #14]
 800ae42:	8a3b      	ldrh	r3, [r7, #16]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800ae48:	88fa      	ldrh	r2, [r7, #6]
 800ae4a:	8a79      	ldrh	r1, [r7, #18]
 800ae4c:	8a3b      	ldrh	r3, [r7, #16]
 800ae4e:	440b      	add	r3, r1
 800ae50:	429a      	cmp	r2, r3
 800ae52:	da49      	bge.n	800aee8 <ff_wtoupper+0xe8>
			switch (cmd) {
 800ae54:	89fb      	ldrh	r3, [r7, #14]
 800ae56:	2b08      	cmp	r3, #8
 800ae58:	d84f      	bhi.n	800aefa <ff_wtoupper+0xfa>
 800ae5a:	a201      	add	r2, pc, #4	@ (adr r2, 800ae60 <ff_wtoupper+0x60>)
 800ae5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae60:	0800ae85 	.word	0x0800ae85
 800ae64:	0800ae97 	.word	0x0800ae97
 800ae68:	0800aead 	.word	0x0800aead
 800ae6c:	0800aeb5 	.word	0x0800aeb5
 800ae70:	0800aebd 	.word	0x0800aebd
 800ae74:	0800aec5 	.word	0x0800aec5
 800ae78:	0800aecd 	.word	0x0800aecd
 800ae7c:	0800aed5 	.word	0x0800aed5
 800ae80:	0800aedd 	.word	0x0800aedd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ae84:	88fa      	ldrh	r2, [r7, #6]
 800ae86:	8a7b      	ldrh	r3, [r7, #18]
 800ae88:	1ad3      	subs	r3, r2, r3
 800ae8a:	005b      	lsls	r3, r3, #1
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	4413      	add	r3, r2
 800ae90:	881b      	ldrh	r3, [r3, #0]
 800ae92:	80fb      	strh	r3, [r7, #6]
 800ae94:	e027      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ae96:	88fa      	ldrh	r2, [r7, #6]
 800ae98:	8a7b      	ldrh	r3, [r7, #18]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	b29b      	uxth	r3, r3
 800aea4:	88fa      	ldrh	r2, [r7, #6]
 800aea6:	1ad3      	subs	r3, r2, r3
 800aea8:	80fb      	strh	r3, [r7, #6]
 800aeaa:	e01c      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800aeac:	88fb      	ldrh	r3, [r7, #6]
 800aeae:	3b10      	subs	r3, #16
 800aeb0:	80fb      	strh	r3, [r7, #6]
 800aeb2:	e018      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800aeb4:	88fb      	ldrh	r3, [r7, #6]
 800aeb6:	3b20      	subs	r3, #32
 800aeb8:	80fb      	strh	r3, [r7, #6]
 800aeba:	e014      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800aebc:	88fb      	ldrh	r3, [r7, #6]
 800aebe:	3b30      	subs	r3, #48	@ 0x30
 800aec0:	80fb      	strh	r3, [r7, #6]
 800aec2:	e010      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	3b1a      	subs	r3, #26
 800aec8:	80fb      	strh	r3, [r7, #6]
 800aeca:	e00c      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800aecc:	88fb      	ldrh	r3, [r7, #6]
 800aece:	3308      	adds	r3, #8
 800aed0:	80fb      	strh	r3, [r7, #6]
 800aed2:	e008      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800aed4:	88fb      	ldrh	r3, [r7, #6]
 800aed6:	3b50      	subs	r3, #80	@ 0x50
 800aed8:	80fb      	strh	r3, [r7, #6]
 800aeda:	e004      	b.n	800aee6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800aedc:	88fb      	ldrh	r3, [r7, #6]
 800aede:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800aee2:	80fb      	strh	r3, [r7, #6]
 800aee4:	bf00      	nop
			}
			break;
 800aee6:	e008      	b.n	800aefa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800aee8:	89fb      	ldrh	r3, [r7, #14]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d195      	bne.n	800ae1a <ff_wtoupper+0x1a>
 800aeee:	8a3b      	ldrh	r3, [r7, #16]
 800aef0:	005b      	lsls	r3, r3, #1
 800aef2:	697a      	ldr	r2, [r7, #20]
 800aef4:	4413      	add	r3, r2
 800aef6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800aef8:	e78f      	b.n	800ae1a <ff_wtoupper+0x1a>
			break;
 800aefa:	bf00      	nop
	}

	return chr;
 800aefc:	88fb      	ldrh	r3, [r7, #6]
}
 800aefe:	4618      	mov	r0, r3
 800af00:	371c      	adds	r7, #28
 800af02:	46bd      	mov	sp, r7
 800af04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af08:	4770      	bx	lr
 800af0a:	bf00      	nop
 800af0c:	08012ca4 	.word	0x08012ca4
 800af10:	08012e98 	.word	0x08012e98

0800af14 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	4603      	mov	r3, r0
 800af1c:	6039      	str	r1, [r7, #0]
 800af1e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800af20:	2200      	movs	r2, #0
 800af22:	2101      	movs	r1, #1
 800af24:	2001      	movs	r0, #1
 800af26:	f000 fa9c 	bl	800b462 <osSemaphoreNew>
 800af2a:	4602      	mov	r2, r0
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	60fb      	str	r3, [r7, #12]

    return ret;
 800af40:	68fb      	ldr	r3, [r7, #12]
}
 800af42:	4618      	mov	r0, r3
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b082      	sub	sp, #8
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800af52:	6878      	ldr	r0, [r7, #4]
 800af54:	f000 fba4 	bl	800b6a0 <osSemaphoreDelete>
#endif
    return 1;
 800af58:	2301      	movs	r3, #1
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b084      	sub	sp, #16
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800af6a:	2300      	movs	r3, #0
 800af6c:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800af6e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 fafe 	bl	800b574 <osSemaphoreAcquire>
 800af78:	4603      	mov	r3, r0
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d101      	bne.n	800af82 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800af7e:	2301      	movs	r3, #1
 800af80:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800af82:	68fb      	ldr	r3, [r7, #12]
}
 800af84:	4618      	mov	r0, r3
 800af86:	3710      	adds	r7, #16
 800af88:	46bd      	mov	sp, r7
 800af8a:	bd80      	pop	{r7, pc}

0800af8c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800af8c:	b580      	push	{r7, lr}
 800af8e:	b082      	sub	sp, #8
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 fb3f 	bl	800b618 <osSemaphoreRelease>
#endif
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b082      	sub	sp, #8
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f003 fd06 	bl	800e9bc <pvPortMalloc>
 800afb0:	4603      	mov	r3, r0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f003 fdc8 	bl	800eb58 <vPortFree>
}
 800afc8:	bf00      	nop
 800afca:	3708      	adds	r7, #8
 800afcc:	46bd      	mov	sp, r7
 800afce:	bd80      	pop	{r7, pc}

0800afd0 <__NVIC_SetPriority>:
{
 800afd0:	b480      	push	{r7}
 800afd2:	b083      	sub	sp, #12
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	4603      	mov	r3, r0
 800afd8:	6039      	str	r1, [r7, #0]
 800afda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800afdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	db0a      	blt.n	800affa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	b2da      	uxtb	r2, r3
 800afe8:	490c      	ldr	r1, [pc, #48]	@ (800b01c <__NVIC_SetPriority+0x4c>)
 800afea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800afee:	0112      	lsls	r2, r2, #4
 800aff0:	b2d2      	uxtb	r2, r2
 800aff2:	440b      	add	r3, r1
 800aff4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800aff8:	e00a      	b.n	800b010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800affa:	683b      	ldr	r3, [r7, #0]
 800affc:	b2da      	uxtb	r2, r3
 800affe:	4908      	ldr	r1, [pc, #32]	@ (800b020 <__NVIC_SetPriority+0x50>)
 800b000:	79fb      	ldrb	r3, [r7, #7]
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	3b04      	subs	r3, #4
 800b008:	0112      	lsls	r2, r2, #4
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	440b      	add	r3, r1
 800b00e:	761a      	strb	r2, [r3, #24]
}
 800b010:	bf00      	nop
 800b012:	370c      	adds	r7, #12
 800b014:	46bd      	mov	sp, r7
 800b016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01a:	4770      	bx	lr
 800b01c:	e000e100 	.word	0xe000e100
 800b020:	e000ed00 	.word	0xe000ed00

0800b024 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b024:	b580      	push	{r7, lr}
 800b026:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b028:	4b05      	ldr	r3, [pc, #20]	@ (800b040 <SysTick_Handler+0x1c>)
 800b02a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b02c:	f002 fd36 	bl	800da9c <xTaskGetSchedulerState>
 800b030:	4603      	mov	r3, r0
 800b032:	2b01      	cmp	r3, #1
 800b034:	d001      	beq.n	800b03a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b036:	f003 fc2f 	bl	800e898 <xPortSysTickHandler>
  }
}
 800b03a:	bf00      	nop
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010

0800b044 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b048:	2100      	movs	r1, #0
 800b04a:	f06f 0004 	mvn.w	r0, #4
 800b04e:	f7ff ffbf 	bl	800afd0 <__NVIC_SetPriority>
#endif
}
 800b052:	bf00      	nop
 800b054:	bd80      	pop	{r7, pc}
	...

0800b058 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b05e:	f3ef 8305 	mrs	r3, IPSR
 800b062:	603b      	str	r3, [r7, #0]
  return(result);
 800b064:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b066:	2b00      	cmp	r3, #0
 800b068:	d003      	beq.n	800b072 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b06a:	f06f 0305 	mvn.w	r3, #5
 800b06e:	607b      	str	r3, [r7, #4]
 800b070:	e00c      	b.n	800b08c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b072:	4b0a      	ldr	r3, [pc, #40]	@ (800b09c <osKernelInitialize+0x44>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d105      	bne.n	800b086 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b07a:	4b08      	ldr	r3, [pc, #32]	@ (800b09c <osKernelInitialize+0x44>)
 800b07c:	2201      	movs	r2, #1
 800b07e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b080:	2300      	movs	r3, #0
 800b082:	607b      	str	r3, [r7, #4]
 800b084:	e002      	b.n	800b08c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b086:	f04f 33ff 	mov.w	r3, #4294967295
 800b08a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b08c:	687b      	ldr	r3, [r7, #4]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	370c      	adds	r7, #12
 800b092:	46bd      	mov	sp, r7
 800b094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b098:	4770      	bx	lr
 800b09a:	bf00      	nop
 800b09c:	20000a0c 	.word	0x20000a0c

0800b0a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b082      	sub	sp, #8
 800b0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0a6:	f3ef 8305 	mrs	r3, IPSR
 800b0aa:	603b      	str	r3, [r7, #0]
  return(result);
 800b0ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d003      	beq.n	800b0ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800b0b2:	f06f 0305 	mvn.w	r3, #5
 800b0b6:	607b      	str	r3, [r7, #4]
 800b0b8:	e010      	b.n	800b0dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b0ba:	4b0b      	ldr	r3, [pc, #44]	@ (800b0e8 <osKernelStart+0x48>)
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d109      	bne.n	800b0d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b0c2:	f7ff ffbf 	bl	800b044 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b0c6:	4b08      	ldr	r3, [pc, #32]	@ (800b0e8 <osKernelStart+0x48>)
 800b0c8:	2202      	movs	r2, #2
 800b0ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b0cc:	f002 f872 	bl	800d1b4 <vTaskStartScheduler>
      stat = osOK;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	607b      	str	r3, [r7, #4]
 800b0d4:	e002      	b.n	800b0dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b0d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b0da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b0dc:	687b      	ldr	r3, [r7, #4]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	20000a0c 	.word	0x20000a0c

0800b0ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b08e      	sub	sp, #56	@ 0x38
 800b0f0:	af04      	add	r7, sp, #16
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b0fc:	f3ef 8305 	mrs	r3, IPSR
 800b100:	617b      	str	r3, [r7, #20]
  return(result);
 800b102:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b104:	2b00      	cmp	r3, #0
 800b106:	d17e      	bne.n	800b206 <osThreadNew+0x11a>
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d07b      	beq.n	800b206 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b10e:	2380      	movs	r3, #128	@ 0x80
 800b110:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b112:	2318      	movs	r3, #24
 800b114:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b116:	2300      	movs	r3, #0
 800b118:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b11a:	f04f 33ff 	mov.w	r3, #4294967295
 800b11e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d045      	beq.n	800b1b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d002      	beq.n	800b134 <osThreadNew+0x48>
        name = attr->name;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	699b      	ldr	r3, [r3, #24]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d002      	beq.n	800b142 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	699b      	ldr	r3, [r3, #24]
 800b140:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d008      	beq.n	800b15a <osThreadNew+0x6e>
 800b148:	69fb      	ldr	r3, [r7, #28]
 800b14a:	2b38      	cmp	r3, #56	@ 0x38
 800b14c:	d805      	bhi.n	800b15a <osThreadNew+0x6e>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	d001      	beq.n	800b15e <osThreadNew+0x72>
        return (NULL);
 800b15a:	2300      	movs	r3, #0
 800b15c:	e054      	b.n	800b208 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	695b      	ldr	r3, [r3, #20]
 800b16a:	089b      	lsrs	r3, r3, #2
 800b16c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00e      	beq.n	800b194 <osThreadNew+0xa8>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	68db      	ldr	r3, [r3, #12]
 800b17a:	2ba7      	cmp	r3, #167	@ 0xa7
 800b17c:	d90a      	bls.n	800b194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b182:	2b00      	cmp	r3, #0
 800b184:	d006      	beq.n	800b194 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	695b      	ldr	r3, [r3, #20]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d002      	beq.n	800b194 <osThreadNew+0xa8>
        mem = 1;
 800b18e:	2301      	movs	r3, #1
 800b190:	61bb      	str	r3, [r7, #24]
 800b192:	e010      	b.n	800b1b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	689b      	ldr	r3, [r3, #8]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d10c      	bne.n	800b1b6 <osThreadNew+0xca>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	68db      	ldr	r3, [r3, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d108      	bne.n	800b1b6 <osThreadNew+0xca>
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	691b      	ldr	r3, [r3, #16]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d104      	bne.n	800b1b6 <osThreadNew+0xca>
          mem = 0;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	61bb      	str	r3, [r7, #24]
 800b1b0:	e001      	b.n	800b1b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b1b6:	69bb      	ldr	r3, [r7, #24]
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d110      	bne.n	800b1de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b1c0:	687a      	ldr	r2, [r7, #4]
 800b1c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b1c4:	9202      	str	r2, [sp, #8]
 800b1c6:	9301      	str	r3, [sp, #4]
 800b1c8:	69fb      	ldr	r3, [r7, #28]
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	6a3a      	ldr	r2, [r7, #32]
 800b1d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1d2:	68f8      	ldr	r0, [r7, #12]
 800b1d4:	f001 fd86 	bl	800cce4 <xTaskCreateStatic>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	613b      	str	r3, [r7, #16]
 800b1dc:	e013      	b.n	800b206 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b1de:	69bb      	ldr	r3, [r7, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d110      	bne.n	800b206 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	b29a      	uxth	r2, r3
 800b1e8:	f107 0310 	add.w	r3, r7, #16
 800b1ec:	9301      	str	r3, [sp, #4]
 800b1ee:	69fb      	ldr	r3, [r7, #28]
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f001 fdd4 	bl	800cda4 <xTaskCreate>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b01      	cmp	r3, #1
 800b200:	d001      	beq.n	800b206 <osThreadNew+0x11a>
            hTask = NULL;
 800b202:	2300      	movs	r3, #0
 800b204:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b206:	693b      	ldr	r3, [r7, #16]
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3728      	adds	r7, #40	@ 0x28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b218:	f3ef 8305 	mrs	r3, IPSR
 800b21c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b21e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b220:	2b00      	cmp	r3, #0
 800b222:	d003      	beq.n	800b22c <osDelay+0x1c>
    stat = osErrorISR;
 800b224:	f06f 0305 	mvn.w	r3, #5
 800b228:	60fb      	str	r3, [r7, #12]
 800b22a:	e007      	b.n	800b23c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d002      	beq.n	800b23c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b236:	6878      	ldr	r0, [r7, #4]
 800b238:	f001 ff86 	bl	800d148 <vTaskDelay>
    }
  }

  return (stat);
 800b23c:	68fb      	ldr	r3, [r7, #12]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b246:	b580      	push	{r7, lr}
 800b248:	b088      	sub	sp, #32
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b24e:	2300      	movs	r3, #0
 800b250:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b252:	f3ef 8305 	mrs	r3, IPSR
 800b256:	60bb      	str	r3, [r7, #8]
  return(result);
 800b258:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d174      	bne.n	800b348 <osMutexNew+0x102>
    if (attr != NULL) {
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d003      	beq.n	800b26c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	61bb      	str	r3, [r7, #24]
 800b26a:	e001      	b.n	800b270 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b26c:	2300      	movs	r3, #0
 800b26e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d002      	beq.n	800b280 <osMutexNew+0x3a>
      rmtx = 1U;
 800b27a:	2301      	movs	r3, #1
 800b27c:	617b      	str	r3, [r7, #20]
 800b27e:	e001      	b.n	800b284 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b280:	2300      	movs	r3, #0
 800b282:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	f003 0308 	and.w	r3, r3, #8
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d15c      	bne.n	800b348 <osMutexNew+0x102>
      mem = -1;
 800b28e:	f04f 33ff 	mov.w	r3, #4294967295
 800b292:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d015      	beq.n	800b2c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d006      	beq.n	800b2b0 <osMutexNew+0x6a>
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	2b4f      	cmp	r3, #79	@ 0x4f
 800b2a8:	d902      	bls.n	800b2b0 <osMutexNew+0x6a>
          mem = 1;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	613b      	str	r3, [r7, #16]
 800b2ae:	e00c      	b.n	800b2ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	689b      	ldr	r3, [r3, #8]
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d108      	bne.n	800b2ca <osMutexNew+0x84>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d104      	bne.n	800b2ca <osMutexNew+0x84>
            mem = 0;
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	e001      	b.n	800b2ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b2ca:	693b      	ldr	r3, [r7, #16]
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	d112      	bne.n	800b2f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d007      	beq.n	800b2e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	689b      	ldr	r3, [r3, #8]
 800b2da:	4619      	mov	r1, r3
 800b2dc:	2004      	movs	r0, #4
 800b2de:	f000 fd94 	bl	800be0a <xQueueCreateMutexStatic>
 800b2e2:	61f8      	str	r0, [r7, #28]
 800b2e4:	e016      	b.n	800b314 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	4619      	mov	r1, r3
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f000 fd8c 	bl	800be0a <xQueueCreateMutexStatic>
 800b2f2:	61f8      	str	r0, [r7, #28]
 800b2f4:	e00e      	b.n	800b314 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10b      	bne.n	800b314 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d004      	beq.n	800b30c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b302:	2004      	movs	r0, #4
 800b304:	f000 fd69 	bl	800bdda <xQueueCreateMutex>
 800b308:	61f8      	str	r0, [r7, #28]
 800b30a:	e003      	b.n	800b314 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b30c:	2001      	movs	r0, #1
 800b30e:	f000 fd64 	bl	800bdda <xQueueCreateMutex>
 800b312:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b314:	69fb      	ldr	r3, [r7, #28]
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00c      	beq.n	800b334 <osMutexNew+0xee>
        if (attr != NULL) {
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d003      	beq.n	800b328 <osMutexNew+0xe2>
          name = attr->name;
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	60fb      	str	r3, [r7, #12]
 800b326:	e001      	b.n	800b32c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b328:	2300      	movs	r3, #0
 800b32a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b32c:	68f9      	ldr	r1, [r7, #12]
 800b32e:	69f8      	ldr	r0, [r7, #28]
 800b330:	f001 fc50 	bl	800cbd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b334:	69fb      	ldr	r3, [r7, #28]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d006      	beq.n	800b348 <osMutexNew+0x102>
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d003      	beq.n	800b348 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	f043 0301 	orr.w	r3, r3, #1
 800b346:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b348:	69fb      	ldr	r3, [r7, #28]
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3720      	adds	r7, #32
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b352:	b580      	push	{r7, lr}
 800b354:	b086      	sub	sp, #24
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
 800b35a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f023 0301 	bic.w	r3, r3, #1
 800b362:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f003 0301 	and.w	r3, r3, #1
 800b36a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b36c:	2300      	movs	r3, #0
 800b36e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b370:	f3ef 8305 	mrs	r3, IPSR
 800b374:	60bb      	str	r3, [r7, #8]
  return(result);
 800b376:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b37c:	f06f 0305 	mvn.w	r3, #5
 800b380:	617b      	str	r3, [r7, #20]
 800b382:	e02c      	b.n	800b3de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d103      	bne.n	800b392 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b38a:	f06f 0303 	mvn.w	r3, #3
 800b38e:	617b      	str	r3, [r7, #20]
 800b390:	e025      	b.n	800b3de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d011      	beq.n	800b3bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b398:	6839      	ldr	r1, [r7, #0]
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f000 fd85 	bl	800beaa <xQueueTakeMutexRecursive>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d01b      	beq.n	800b3de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d003      	beq.n	800b3b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b3ac:	f06f 0301 	mvn.w	r3, #1
 800b3b0:	617b      	str	r3, [r7, #20]
 800b3b2:	e014      	b.n	800b3de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b3b4:	f06f 0302 	mvn.w	r3, #2
 800b3b8:	617b      	str	r3, [r7, #20]
 800b3ba:	e010      	b.n	800b3de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6938      	ldr	r0, [r7, #16]
 800b3c0:	f001 f92a 	bl	800c618 <xQueueSemaphoreTake>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d009      	beq.n	800b3de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d003      	beq.n	800b3d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b3d0:	f06f 0301 	mvn.w	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
 800b3d6:	e002      	b.n	800b3de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b3d8:	f06f 0302 	mvn.w	r3, #2
 800b3dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b3de:	697b      	ldr	r3, [r7, #20]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b086      	sub	sp, #24
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f023 0301 	bic.w	r3, r3, #1
 800b3f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f003 0301 	and.w	r3, r3, #1
 800b3fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b400:	2300      	movs	r3, #0
 800b402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b404:	f3ef 8305 	mrs	r3, IPSR
 800b408:	60bb      	str	r3, [r7, #8]
  return(result);
 800b40a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d003      	beq.n	800b418 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b410:	f06f 0305 	mvn.w	r3, #5
 800b414:	617b      	str	r3, [r7, #20]
 800b416:	e01f      	b.n	800b458 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b418:	693b      	ldr	r3, [r7, #16]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d103      	bne.n	800b426 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b41e:	f06f 0303 	mvn.w	r3, #3
 800b422:	617b      	str	r3, [r7, #20]
 800b424:	e018      	b.n	800b458 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d009      	beq.n	800b440 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b42c:	6938      	ldr	r0, [r7, #16]
 800b42e:	f000 fd07 	bl	800be40 <xQueueGiveMutexRecursive>
 800b432:	4603      	mov	r3, r0
 800b434:	2b01      	cmp	r3, #1
 800b436:	d00f      	beq.n	800b458 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b438:	f06f 0302 	mvn.w	r3, #2
 800b43c:	617b      	str	r3, [r7, #20]
 800b43e:	e00b      	b.n	800b458 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b440:	2300      	movs	r3, #0
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	6938      	ldr	r0, [r7, #16]
 800b448:	f000 fdd4 	bl	800bff4 <xQueueGenericSend>
 800b44c:	4603      	mov	r3, r0
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d002      	beq.n	800b458 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b452:	f06f 0302 	mvn.w	r3, #2
 800b456:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b458:	697b      	ldr	r3, [r7, #20]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3718      	adds	r7, #24
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}

0800b462 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b462:	b580      	push	{r7, lr}
 800b464:	b08a      	sub	sp, #40	@ 0x28
 800b466:	af02      	add	r7, sp, #8
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	60b9      	str	r1, [r7, #8]
 800b46c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b46e:	2300      	movs	r3, #0
 800b470:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b472:	f3ef 8305 	mrs	r3, IPSR
 800b476:	613b      	str	r3, [r7, #16]
  return(result);
 800b478:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d175      	bne.n	800b56a <osSemaphoreNew+0x108>
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d072      	beq.n	800b56a <osSemaphoreNew+0x108>
 800b484:	68ba      	ldr	r2, [r7, #8]
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d86e      	bhi.n	800b56a <osSemaphoreNew+0x108>
    mem = -1;
 800b48c:	f04f 33ff 	mov.w	r3, #4294967295
 800b490:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d015      	beq.n	800b4c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d006      	beq.n	800b4ae <osSemaphoreNew+0x4c>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	68db      	ldr	r3, [r3, #12]
 800b4a4:	2b4f      	cmp	r3, #79	@ 0x4f
 800b4a6:	d902      	bls.n	800b4ae <osSemaphoreNew+0x4c>
        mem = 1;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	61bb      	str	r3, [r7, #24]
 800b4ac:	e00c      	b.n	800b4c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	689b      	ldr	r3, [r3, #8]
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d108      	bne.n	800b4c8 <osSemaphoreNew+0x66>
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	68db      	ldr	r3, [r3, #12]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d104      	bne.n	800b4c8 <osSemaphoreNew+0x66>
          mem = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	61bb      	str	r3, [r7, #24]
 800b4c2:	e001      	b.n	800b4c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4ce:	d04c      	beq.n	800b56a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b01      	cmp	r3, #1
 800b4d4:	d128      	bne.n	800b528 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	2b01      	cmp	r3, #1
 800b4da:	d10a      	bne.n	800b4f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	2203      	movs	r2, #3
 800b4e2:	9200      	str	r2, [sp, #0]
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	2100      	movs	r1, #0
 800b4e8:	2001      	movs	r0, #1
 800b4ea:	f000 fb81 	bl	800bbf0 <xQueueGenericCreateStatic>
 800b4ee:	61f8      	str	r0, [r7, #28]
 800b4f0:	e005      	b.n	800b4fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b4f2:	2203      	movs	r2, #3
 800b4f4:	2100      	movs	r1, #0
 800b4f6:	2001      	movs	r0, #1
 800b4f8:	f000 fbf7 	bl	800bcea <xQueueGenericCreate>
 800b4fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d022      	beq.n	800b54a <osSemaphoreNew+0xe8>
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d01f      	beq.n	800b54a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b50a:	2300      	movs	r3, #0
 800b50c:	2200      	movs	r2, #0
 800b50e:	2100      	movs	r1, #0
 800b510:	69f8      	ldr	r0, [r7, #28]
 800b512:	f000 fd6f 	bl	800bff4 <xQueueGenericSend>
 800b516:	4603      	mov	r3, r0
 800b518:	2b01      	cmp	r3, #1
 800b51a:	d016      	beq.n	800b54a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b51c:	69f8      	ldr	r0, [r7, #28]
 800b51e:	f001 fa0d 	bl	800c93c <vQueueDelete>
            hSemaphore = NULL;
 800b522:	2300      	movs	r3, #0
 800b524:	61fb      	str	r3, [r7, #28]
 800b526:	e010      	b.n	800b54a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d108      	bne.n	800b540 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	689b      	ldr	r3, [r3, #8]
 800b532:	461a      	mov	r2, r3
 800b534:	68b9      	ldr	r1, [r7, #8]
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 fcee 	bl	800bf18 <xQueueCreateCountingSemaphoreStatic>
 800b53c:	61f8      	str	r0, [r7, #28]
 800b53e:	e004      	b.n	800b54a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b540:	68b9      	ldr	r1, [r7, #8]
 800b542:	68f8      	ldr	r0, [r7, #12]
 800b544:	f000 fd21 	bl	800bf8a <xQueueCreateCountingSemaphore>
 800b548:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b54a:	69fb      	ldr	r3, [r7, #28]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d00c      	beq.n	800b56a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d003      	beq.n	800b55e <osSemaphoreNew+0xfc>
          name = attr->name;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	617b      	str	r3, [r7, #20]
 800b55c:	e001      	b.n	800b562 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b55e:	2300      	movs	r3, #0
 800b560:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b562:	6979      	ldr	r1, [r7, #20]
 800b564:	69f8      	ldr	r0, [r7, #28]
 800b566:	f001 fb35 	bl	800cbd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b56a:	69fb      	ldr	r3, [r7, #28]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3720      	adds	r7, #32
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}

0800b574 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b574:	b580      	push	{r7, lr}
 800b576:	b086      	sub	sp, #24
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d103      	bne.n	800b594 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b58c:	f06f 0303 	mvn.w	r3, #3
 800b590:	617b      	str	r3, [r7, #20]
 800b592:	e039      	b.n	800b608 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b594:	f3ef 8305 	mrs	r3, IPSR
 800b598:	60fb      	str	r3, [r7, #12]
  return(result);
 800b59a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d022      	beq.n	800b5e6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d003      	beq.n	800b5ae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b5a6:	f06f 0303 	mvn.w	r3, #3
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	e02c      	b.n	800b608 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b5b2:	f107 0308 	add.w	r3, r7, #8
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	6938      	ldr	r0, [r7, #16]
 800b5bc:	f001 f93c 	bl	800c838 <xQueueReceiveFromISR>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	2b01      	cmp	r3, #1
 800b5c4:	d003      	beq.n	800b5ce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b5c6:	f06f 0302 	mvn.w	r3, #2
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	e01c      	b.n	800b608 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d019      	beq.n	800b608 <osSemaphoreAcquire+0x94>
 800b5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800b614 <osSemaphoreAcquire+0xa0>)
 800b5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5da:	601a      	str	r2, [r3, #0]
 800b5dc:	f3bf 8f4f 	dsb	sy
 800b5e0:	f3bf 8f6f 	isb	sy
 800b5e4:	e010      	b.n	800b608 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6938      	ldr	r0, [r7, #16]
 800b5ea:	f001 f815 	bl	800c618 <xQueueSemaphoreTake>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	2b01      	cmp	r3, #1
 800b5f2:	d009      	beq.n	800b608 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d003      	beq.n	800b602 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b5fa:	f06f 0301 	mvn.w	r3, #1
 800b5fe:	617b      	str	r3, [r7, #20]
 800b600:	e002      	b.n	800b608 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b602:	f06f 0302 	mvn.w	r3, #2
 800b606:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b608:	697b      	ldr	r3, [r7, #20]
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3718      	adds	r7, #24
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd80      	pop	{r7, pc}
 800b612:	bf00      	nop
 800b614:	e000ed04 	.word	0xe000ed04

0800b618 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b618:	b580      	push	{r7, lr}
 800b61a:	b086      	sub	sp, #24
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b624:	2300      	movs	r3, #0
 800b626:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b62e:	f06f 0303 	mvn.w	r3, #3
 800b632:	617b      	str	r3, [r7, #20]
 800b634:	e02c      	b.n	800b690 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b636:	f3ef 8305 	mrs	r3, IPSR
 800b63a:	60fb      	str	r3, [r7, #12]
  return(result);
 800b63c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d01a      	beq.n	800b678 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b642:	2300      	movs	r3, #0
 800b644:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b646:	f107 0308 	add.w	r3, r7, #8
 800b64a:	4619      	mov	r1, r3
 800b64c:	6938      	ldr	r0, [r7, #16]
 800b64e:	f000 fe71 	bl	800c334 <xQueueGiveFromISR>
 800b652:	4603      	mov	r3, r0
 800b654:	2b01      	cmp	r3, #1
 800b656:	d003      	beq.n	800b660 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b658:	f06f 0302 	mvn.w	r3, #2
 800b65c:	617b      	str	r3, [r7, #20]
 800b65e:	e017      	b.n	800b690 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d014      	beq.n	800b690 <osSemaphoreRelease+0x78>
 800b666:	4b0d      	ldr	r3, [pc, #52]	@ (800b69c <osSemaphoreRelease+0x84>)
 800b668:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b66c:	601a      	str	r2, [r3, #0]
 800b66e:	f3bf 8f4f 	dsb	sy
 800b672:	f3bf 8f6f 	isb	sy
 800b676:	e00b      	b.n	800b690 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b678:	2300      	movs	r3, #0
 800b67a:	2200      	movs	r2, #0
 800b67c:	2100      	movs	r1, #0
 800b67e:	6938      	ldr	r0, [r7, #16]
 800b680:	f000 fcb8 	bl	800bff4 <xQueueGenericSend>
 800b684:	4603      	mov	r3, r0
 800b686:	2b01      	cmp	r3, #1
 800b688:	d002      	beq.n	800b690 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b68a:	f06f 0302 	mvn.w	r3, #2
 800b68e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b690:	697b      	ldr	r3, [r7, #20]
}
 800b692:	4618      	mov	r0, r3
 800b694:	3718      	adds	r7, #24
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}
 800b69a:	bf00      	nop
 800b69c:	e000ed04 	.word	0xe000ed04

0800b6a0 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b086      	sub	sp, #24
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6ac:	f3ef 8305 	mrs	r3, IPSR
 800b6b0:	60fb      	str	r3, [r7, #12]
  return(result);
 800b6b2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800b6b8:	f06f 0305 	mvn.w	r3, #5
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e00e      	b.n	800b6de <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800b6c0:	693b      	ldr	r3, [r7, #16]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d103      	bne.n	800b6ce <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800b6c6:	f06f 0303 	mvn.w	r3, #3
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e007      	b.n	800b6de <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800b6ce:	6938      	ldr	r0, [r7, #16]
 800b6d0:	f001 faaa 	bl	800cc28 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800b6d8:	6938      	ldr	r0, [r7, #16]
 800b6da:	f001 f92f 	bl	800c93c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800b6de:	697b      	ldr	r3, [r7, #20]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b08a      	sub	sp, #40	@ 0x28
 800b6ec:	af02      	add	r7, sp, #8
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6f8:	f3ef 8305 	mrs	r3, IPSR
 800b6fc:	613b      	str	r3, [r7, #16]
  return(result);
 800b6fe:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b700:	2b00      	cmp	r3, #0
 800b702:	d15f      	bne.n	800b7c4 <osMessageQueueNew+0xdc>
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d05c      	beq.n	800b7c4 <osMessageQueueNew+0xdc>
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d059      	beq.n	800b7c4 <osMessageQueueNew+0xdc>
    mem = -1;
 800b710:	f04f 33ff 	mov.w	r3, #4294967295
 800b714:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d029      	beq.n	800b770 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d012      	beq.n	800b74a <osMessageQueueNew+0x62>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	2b4f      	cmp	r3, #79	@ 0x4f
 800b72a:	d90e      	bls.n	800b74a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b730:	2b00      	cmp	r3, #0
 800b732:	d00a      	beq.n	800b74a <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	695a      	ldr	r2, [r3, #20]
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	68b9      	ldr	r1, [r7, #8]
 800b73c:	fb01 f303 	mul.w	r3, r1, r3
 800b740:	429a      	cmp	r2, r3
 800b742:	d302      	bcc.n	800b74a <osMessageQueueNew+0x62>
        mem = 1;
 800b744:	2301      	movs	r3, #1
 800b746:	61bb      	str	r3, [r7, #24]
 800b748:	e014      	b.n	800b774 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d110      	bne.n	800b774 <osMessageQueueNew+0x8c>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	68db      	ldr	r3, [r3, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10c      	bne.n	800b774 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d108      	bne.n	800b774 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	695b      	ldr	r3, [r3, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d104      	bne.n	800b774 <osMessageQueueNew+0x8c>
          mem = 0;
 800b76a:	2300      	movs	r3, #0
 800b76c:	61bb      	str	r3, [r7, #24]
 800b76e:	e001      	b.n	800b774 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b770:	2300      	movs	r3, #0
 800b772:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d10b      	bne.n	800b792 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	691a      	ldr	r2, [r3, #16]
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	689b      	ldr	r3, [r3, #8]
 800b782:	2100      	movs	r1, #0
 800b784:	9100      	str	r1, [sp, #0]
 800b786:	68b9      	ldr	r1, [r7, #8]
 800b788:	68f8      	ldr	r0, [r7, #12]
 800b78a:	f000 fa31 	bl	800bbf0 <xQueueGenericCreateStatic>
 800b78e:	61f8      	str	r0, [r7, #28]
 800b790:	e008      	b.n	800b7a4 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d105      	bne.n	800b7a4 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b798:	2200      	movs	r2, #0
 800b79a:	68b9      	ldr	r1, [r7, #8]
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f000 faa4 	bl	800bcea <xQueueGenericCreate>
 800b7a2:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b7a4:	69fb      	ldr	r3, [r7, #28]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00c      	beq.n	800b7c4 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d003      	beq.n	800b7b8 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	617b      	str	r3, [r7, #20]
 800b7b6:	e001      	b.n	800b7bc <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b7bc:	6979      	ldr	r1, [r7, #20]
 800b7be:	69f8      	ldr	r0, [r7, #28]
 800b7c0:	f001 fa08 	bl	800cbd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b7c4:	69fb      	ldr	r3, [r7, #28]
}
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	3720      	adds	r7, #32
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	bd80      	pop	{r7, pc}
	...

0800b7d0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	603b      	str	r3, [r7, #0]
 800b7dc:	4613      	mov	r3, r2
 800b7de:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b7e4:	2300      	movs	r3, #0
 800b7e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b7e8:	f3ef 8305 	mrs	r3, IPSR
 800b7ec:	617b      	str	r3, [r7, #20]
  return(result);
 800b7ee:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d028      	beq.n	800b846 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d005      	beq.n	800b806 <osMessageQueuePut+0x36>
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d002      	beq.n	800b806 <osMessageQueuePut+0x36>
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d003      	beq.n	800b80e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b806:	f06f 0303 	mvn.w	r3, #3
 800b80a:	61fb      	str	r3, [r7, #28]
 800b80c:	e038      	b.n	800b880 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b80e:	2300      	movs	r3, #0
 800b810:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b812:	f107 0210 	add.w	r2, r7, #16
 800b816:	2300      	movs	r3, #0
 800b818:	68b9      	ldr	r1, [r7, #8]
 800b81a:	69b8      	ldr	r0, [r7, #24]
 800b81c:	f000 fcec 	bl	800c1f8 <xQueueGenericSendFromISR>
 800b820:	4603      	mov	r3, r0
 800b822:	2b01      	cmp	r3, #1
 800b824:	d003      	beq.n	800b82e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b826:	f06f 0302 	mvn.w	r3, #2
 800b82a:	61fb      	str	r3, [r7, #28]
 800b82c:	e028      	b.n	800b880 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d025      	beq.n	800b880 <osMessageQueuePut+0xb0>
 800b834:	4b15      	ldr	r3, [pc, #84]	@ (800b88c <osMessageQueuePut+0xbc>)
 800b836:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b83a:	601a      	str	r2, [r3, #0]
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	f3bf 8f6f 	isb	sy
 800b844:	e01c      	b.n	800b880 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d002      	beq.n	800b852 <osMessageQueuePut+0x82>
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d103      	bne.n	800b85a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b852:	f06f 0303 	mvn.w	r3, #3
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e012      	b.n	800b880 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b85a:	2300      	movs	r3, #0
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	68b9      	ldr	r1, [r7, #8]
 800b860:	69b8      	ldr	r0, [r7, #24]
 800b862:	f000 fbc7 	bl	800bff4 <xQueueGenericSend>
 800b866:	4603      	mov	r3, r0
 800b868:	2b01      	cmp	r3, #1
 800b86a:	d009      	beq.n	800b880 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d003      	beq.n	800b87a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b872:	f06f 0301 	mvn.w	r3, #1
 800b876:	61fb      	str	r3, [r7, #28]
 800b878:	e002      	b.n	800b880 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b87a:	f06f 0302 	mvn.w	r3, #2
 800b87e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b880:	69fb      	ldr	r3, [r7, #28]
}
 800b882:	4618      	mov	r0, r3
 800b884:	3720      	adds	r7, #32
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	e000ed04 	.word	0xe000ed04

0800b890 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b890:	b580      	push	{r7, lr}
 800b892:	b088      	sub	sp, #32
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
 800b89c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a6:	f3ef 8305 	mrs	r3, IPSR
 800b8aa:	617b      	str	r3, [r7, #20]
  return(result);
 800b8ac:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d028      	beq.n	800b904 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d005      	beq.n	800b8c4 <osMessageQueueGet+0x34>
 800b8b8:	68bb      	ldr	r3, [r7, #8]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <osMessageQueueGet+0x34>
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b8c4:	f06f 0303 	mvn.w	r3, #3
 800b8c8:	61fb      	str	r3, [r7, #28]
 800b8ca:	e037      	b.n	800b93c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b8d0:	f107 0310 	add.w	r3, r7, #16
 800b8d4:	461a      	mov	r2, r3
 800b8d6:	68b9      	ldr	r1, [r7, #8]
 800b8d8:	69b8      	ldr	r0, [r7, #24]
 800b8da:	f000 ffad 	bl	800c838 <xQueueReceiveFromISR>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d003      	beq.n	800b8ec <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b8e4:	f06f 0302 	mvn.w	r3, #2
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	e027      	b.n	800b93c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d024      	beq.n	800b93c <osMessageQueueGet+0xac>
 800b8f2:	4b15      	ldr	r3, [pc, #84]	@ (800b948 <osMessageQueueGet+0xb8>)
 800b8f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8f8:	601a      	str	r2, [r3, #0]
 800b8fa:	f3bf 8f4f 	dsb	sy
 800b8fe:	f3bf 8f6f 	isb	sy
 800b902:	e01b      	b.n	800b93c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d002      	beq.n	800b910 <osMessageQueueGet+0x80>
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d103      	bne.n	800b918 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b910:	f06f 0303 	mvn.w	r3, #3
 800b914:	61fb      	str	r3, [r7, #28]
 800b916:	e011      	b.n	800b93c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	68b9      	ldr	r1, [r7, #8]
 800b91c:	69b8      	ldr	r0, [r7, #24]
 800b91e:	f000 fd99 	bl	800c454 <xQueueReceive>
 800b922:	4603      	mov	r3, r0
 800b924:	2b01      	cmp	r3, #1
 800b926:	d009      	beq.n	800b93c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d003      	beq.n	800b936 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b92e:	f06f 0301 	mvn.w	r3, #1
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	e002      	b.n	800b93c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b936:	f06f 0302 	mvn.w	r3, #2
 800b93a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b93c:	69fb      	ldr	r3, [r7, #28]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	e000ed04 	.word	0xe000ed04

0800b94c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b94c:	b480      	push	{r7}
 800b94e:	b085      	sub	sp, #20
 800b950:	af00      	add	r7, sp, #0
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	4a07      	ldr	r2, [pc, #28]	@ (800b978 <vApplicationGetIdleTaskMemory+0x2c>)
 800b95c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	4a06      	ldr	r2, [pc, #24]	@ (800b97c <vApplicationGetIdleTaskMemory+0x30>)
 800b962:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2280      	movs	r2, #128	@ 0x80
 800b968:	601a      	str	r2, [r3, #0]
}
 800b96a:	bf00      	nop
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	20000a10 	.word	0x20000a10
 800b97c:	20000ab8 	.word	0x20000ab8

0800b980 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	4a07      	ldr	r2, [pc, #28]	@ (800b9ac <vApplicationGetTimerTaskMemory+0x2c>)
 800b990:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	4a06      	ldr	r2, [pc, #24]	@ (800b9b0 <vApplicationGetTimerTaskMemory+0x30>)
 800b996:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b99e:	601a      	str	r2, [r3, #0]
}
 800b9a0:	bf00      	nop
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr
 800b9ac:	20000cb8 	.word	0x20000cb8
 800b9b0:	20000d60 	.word	0x20000d60

0800b9b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b083      	sub	sp, #12
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	f103 0208 	add.w	r2, r3, #8
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f103 0208 	add.w	r2, r3, #8
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f103 0208 	add.w	r2, r3, #8
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b9e8:	bf00      	nop
 800b9ea:	370c      	adds	r7, #12
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f2:	4770      	bx	lr

0800b9f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ba02:	bf00      	nop
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba0e:	b480      	push	{r7}
 800ba10:	b085      	sub	sp, #20
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	685b      	ldr	r3, [r3, #4]
 800ba1c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	683a      	ldr	r2, [r7, #0]
 800ba32:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	683a      	ldr	r2, [r7, #0]
 800ba38:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	687a      	ldr	r2, [r7, #4]
 800ba3e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	601a      	str	r2, [r3, #0]
}
 800ba4a:	bf00      	nop
 800ba4c:	3714      	adds	r7, #20
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba54:	4770      	bx	lr

0800ba56 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ba56:	b480      	push	{r7}
 800ba58:	b085      	sub	sp, #20
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba6c:	d103      	bne.n	800ba76 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	60fb      	str	r3, [r7, #12]
 800ba74:	e00c      	b.n	800ba90 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	3308      	adds	r3, #8
 800ba7a:	60fb      	str	r3, [r7, #12]
 800ba7c:	e002      	b.n	800ba84 <vListInsert+0x2e>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	60fb      	str	r3, [r7, #12]
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	685b      	ldr	r3, [r3, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d2f6      	bcs.n	800ba7e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	683a      	ldr	r2, [r7, #0]
 800ba9e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	68fa      	ldr	r2, [r7, #12]
 800baa4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	683a      	ldr	r2, [r7, #0]
 800baaa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	687a      	ldr	r2, [r7, #4]
 800bab0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	601a      	str	r2, [r3, #0]
}
 800babc:	bf00      	nop
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr

0800bac8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	691b      	ldr	r3, [r3, #16]
 800bad4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	6892      	ldr	r2, [r2, #8]
 800bade:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	687a      	ldr	r2, [r7, #4]
 800bae6:	6852      	ldr	r2, [r2, #4]
 800bae8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	685b      	ldr	r3, [r3, #4]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d103      	bne.n	800bafc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	1e5a      	subs	r2, r3, #1
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
}
 800bb10:	4618      	mov	r0, r3
 800bb12:	3714      	adds	r7, #20
 800bb14:	46bd      	mov	sp, r7
 800bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1a:	4770      	bx	lr

0800bb1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d10b      	bne.n	800bb48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bb30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb34:	f383 8811 	msr	BASEPRI, r3
 800bb38:	f3bf 8f6f 	isb	sy
 800bb3c:	f3bf 8f4f 	dsb	sy
 800bb40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800bb42:	bf00      	nop
 800bb44:	bf00      	nop
 800bb46:	e7fd      	b.n	800bb44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800bb48:	f002 fe16 	bl	800e778 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	681a      	ldr	r2, [r3, #0]
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb54:	68f9      	ldr	r1, [r7, #12]
 800bb56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	441a      	add	r2, r3
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	681a      	ldr	r2, [r3, #0]
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bb78:	3b01      	subs	r3, #1
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800bb7e:	fb01 f303 	mul.w	r3, r1, r3
 800bb82:	441a      	add	r2, r3
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	22ff      	movs	r2, #255	@ 0xff
 800bb8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	22ff      	movs	r2, #255	@ 0xff
 800bb94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d114      	bne.n	800bbc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d01a      	beq.n	800bbdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3310      	adds	r3, #16
 800bbaa:	4618      	mov	r0, r3
 800bbac:	f001 fda0 	bl	800d6f0 <xTaskRemoveFromEventList>
 800bbb0:	4603      	mov	r3, r0
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d012      	beq.n	800bbdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bbb6:	4b0d      	ldr	r3, [pc, #52]	@ (800bbec <xQueueGenericReset+0xd0>)
 800bbb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbbc:	601a      	str	r2, [r3, #0]
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	f3bf 8f6f 	isb	sy
 800bbc6:	e009      	b.n	800bbdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	3310      	adds	r3, #16
 800bbcc:	4618      	mov	r0, r3
 800bbce:	f7ff fef1 	bl	800b9b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	3324      	adds	r3, #36	@ 0x24
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7ff feec 	bl	800b9b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bbdc:	f002 fdfe 	bl	800e7dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bbe0:	2301      	movs	r3, #1
}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3710      	adds	r7, #16
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	e000ed04 	.word	0xe000ed04

0800bbf0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bbf0:	b580      	push	{r7, lr}
 800bbf2:	b08e      	sub	sp, #56	@ 0x38
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	607a      	str	r2, [r7, #4]
 800bbfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d10b      	bne.n	800bc1c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800bc04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc08:	f383 8811 	msr	BASEPRI, r3
 800bc0c:	f3bf 8f6f 	isb	sy
 800bc10:	f3bf 8f4f 	dsb	sy
 800bc14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800bc16:	bf00      	nop
 800bc18:	bf00      	nop
 800bc1a:	e7fd      	b.n	800bc18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d10b      	bne.n	800bc3a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800bc22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc26:	f383 8811 	msr	BASEPRI, r3
 800bc2a:	f3bf 8f6f 	isb	sy
 800bc2e:	f3bf 8f4f 	dsb	sy
 800bc32:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800bc34:	bf00      	nop
 800bc36:	bf00      	nop
 800bc38:	e7fd      	b.n	800bc36 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d002      	beq.n	800bc46 <xQueueGenericCreateStatic+0x56>
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d001      	beq.n	800bc4a <xQueueGenericCreateStatic+0x5a>
 800bc46:	2301      	movs	r3, #1
 800bc48:	e000      	b.n	800bc4c <xQueueGenericCreateStatic+0x5c>
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d10b      	bne.n	800bc68 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800bc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc54:	f383 8811 	msr	BASEPRI, r3
 800bc58:	f3bf 8f6f 	isb	sy
 800bc5c:	f3bf 8f4f 	dsb	sy
 800bc60:	623b      	str	r3, [r7, #32]
}
 800bc62:	bf00      	nop
 800bc64:	bf00      	nop
 800bc66:	e7fd      	b.n	800bc64 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d102      	bne.n	800bc74 <xQueueGenericCreateStatic+0x84>
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <xQueueGenericCreateStatic+0x88>
 800bc74:	2301      	movs	r3, #1
 800bc76:	e000      	b.n	800bc7a <xQueueGenericCreateStatic+0x8a>
 800bc78:	2300      	movs	r3, #0
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d10b      	bne.n	800bc96 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	61fb      	str	r3, [r7, #28]
}
 800bc90:	bf00      	nop
 800bc92:	bf00      	nop
 800bc94:	e7fd      	b.n	800bc92 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bc96:	2350      	movs	r3, #80	@ 0x50
 800bc98:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bc9a:	697b      	ldr	r3, [r7, #20]
 800bc9c:	2b50      	cmp	r3, #80	@ 0x50
 800bc9e:	d00b      	beq.n	800bcb8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800bca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bca4:	f383 8811 	msr	BASEPRI, r3
 800bca8:	f3bf 8f6f 	isb	sy
 800bcac:	f3bf 8f4f 	dsb	sy
 800bcb0:	61bb      	str	r3, [r7, #24]
}
 800bcb2:	bf00      	nop
 800bcb4:	bf00      	nop
 800bcb6:	e7fd      	b.n	800bcb4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bcb8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d00d      	beq.n	800bce0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bccc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800bcd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	4613      	mov	r3, r2
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	68b9      	ldr	r1, [r7, #8]
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 f840 	bl	800bd60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800bce2:	4618      	mov	r0, r3
 800bce4:	3730      	adds	r7, #48	@ 0x30
 800bce6:	46bd      	mov	sp, r7
 800bce8:	bd80      	pop	{r7, pc}

0800bcea <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bcea:	b580      	push	{r7, lr}
 800bcec:	b08a      	sub	sp, #40	@ 0x28
 800bcee:	af02      	add	r7, sp, #8
 800bcf0:	60f8      	str	r0, [r7, #12]
 800bcf2:	60b9      	str	r1, [r7, #8]
 800bcf4:	4613      	mov	r3, r2
 800bcf6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d10b      	bne.n	800bd16 <xQueueGenericCreate+0x2c>
	__asm volatile
 800bcfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd02:	f383 8811 	msr	BASEPRI, r3
 800bd06:	f3bf 8f6f 	isb	sy
 800bd0a:	f3bf 8f4f 	dsb	sy
 800bd0e:	613b      	str	r3, [r7, #16]
}
 800bd10:	bf00      	nop
 800bd12:	bf00      	nop
 800bd14:	e7fd      	b.n	800bd12 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	68ba      	ldr	r2, [r7, #8]
 800bd1a:	fb02 f303 	mul.w	r3, r2, r3
 800bd1e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	3350      	adds	r3, #80	@ 0x50
 800bd24:	4618      	mov	r0, r3
 800bd26:	f002 fe49 	bl	800e9bc <pvPortMalloc>
 800bd2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bd2c:	69bb      	ldr	r3, [r7, #24]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d011      	beq.n	800bd56 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd36:	697b      	ldr	r3, [r7, #20]
 800bd38:	3350      	adds	r3, #80	@ 0x50
 800bd3a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	2200      	movs	r2, #0
 800bd40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bd44:	79fa      	ldrb	r2, [r7, #7]
 800bd46:	69bb      	ldr	r3, [r7, #24]
 800bd48:	9300      	str	r3, [sp, #0]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	697a      	ldr	r2, [r7, #20]
 800bd4e:	68b9      	ldr	r1, [r7, #8]
 800bd50:	68f8      	ldr	r0, [r7, #12]
 800bd52:	f000 f805 	bl	800bd60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bd56:	69bb      	ldr	r3, [r7, #24]
	}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3720      	adds	r7, #32
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
 800bd6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bd6e:	68bb      	ldr	r3, [r7, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d103      	bne.n	800bd7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bd74:	69bb      	ldr	r3, [r7, #24]
 800bd76:	69ba      	ldr	r2, [r7, #24]
 800bd78:	601a      	str	r2, [r3, #0]
 800bd7a:	e002      	b.n	800bd82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bd7c:	69bb      	ldr	r3, [r7, #24]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	68fa      	ldr	r2, [r7, #12]
 800bd86:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bd88:	69bb      	ldr	r3, [r7, #24]
 800bd8a:	68ba      	ldr	r2, [r7, #8]
 800bd8c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bd8e:	2101      	movs	r1, #1
 800bd90:	69b8      	ldr	r0, [r7, #24]
 800bd92:	f7ff fec3 	bl	800bb1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bd96:	69bb      	ldr	r3, [r7, #24]
 800bd98:	78fa      	ldrb	r2, [r7, #3]
 800bd9a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bd9e:	bf00      	nop
 800bda0:	3710      	adds	r7, #16
 800bda2:	46bd      	mov	sp, r7
 800bda4:	bd80      	pop	{r7, pc}

0800bda6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bda6:	b580      	push	{r7, lr}
 800bda8:	b082      	sub	sp, #8
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00e      	beq.n	800bdd2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	2200      	movs	r2, #0
 800bdca:	2100      	movs	r1, #0
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f911 	bl	800bff4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bdd2:	bf00      	nop
 800bdd4:	3708      	adds	r7, #8
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}

0800bdda <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bdda:	b580      	push	{r7, lr}
 800bddc:	b086      	sub	sp, #24
 800bdde:	af00      	add	r7, sp, #0
 800bde0:	4603      	mov	r3, r0
 800bde2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bde4:	2301      	movs	r3, #1
 800bde6:	617b      	str	r3, [r7, #20]
 800bde8:	2300      	movs	r3, #0
 800bdea:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bdec:	79fb      	ldrb	r3, [r7, #7]
 800bdee:	461a      	mov	r2, r3
 800bdf0:	6939      	ldr	r1, [r7, #16]
 800bdf2:	6978      	ldr	r0, [r7, #20]
 800bdf4:	f7ff ff79 	bl	800bcea <xQueueGenericCreate>
 800bdf8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff ffd3 	bl	800bda6 <prvInitialiseMutex>

		return xNewQueue;
 800be00:	68fb      	ldr	r3, [r7, #12]
	}
 800be02:	4618      	mov	r0, r3
 800be04:	3718      	adds	r7, #24
 800be06:	46bd      	mov	sp, r7
 800be08:	bd80      	pop	{r7, pc}

0800be0a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b088      	sub	sp, #32
 800be0e:	af02      	add	r7, sp, #8
 800be10:	4603      	mov	r3, r0
 800be12:	6039      	str	r1, [r7, #0]
 800be14:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800be16:	2301      	movs	r3, #1
 800be18:	617b      	str	r3, [r7, #20]
 800be1a:	2300      	movs	r3, #0
 800be1c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	9300      	str	r3, [sp, #0]
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	2200      	movs	r2, #0
 800be26:	6939      	ldr	r1, [r7, #16]
 800be28:	6978      	ldr	r0, [r7, #20]
 800be2a:	f7ff fee1 	bl	800bbf0 <xQueueGenericCreateStatic>
 800be2e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800be30:	68f8      	ldr	r0, [r7, #12]
 800be32:	f7ff ffb8 	bl	800bda6 <prvInitialiseMutex>

		return xNewQueue;
 800be36:	68fb      	ldr	r3, [r7, #12]
	}
 800be38:	4618      	mov	r0, r3
 800be3a:	3718      	adds	r7, #24
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800be40:	b590      	push	{r4, r7, lr}
 800be42:	b087      	sub	sp, #28
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800be4c:	693b      	ldr	r3, [r7, #16]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d10b      	bne.n	800be6a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800be52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be56:	f383 8811 	msr	BASEPRI, r3
 800be5a:	f3bf 8f6f 	isb	sy
 800be5e:	f3bf 8f4f 	dsb	sy
 800be62:	60fb      	str	r3, [r7, #12]
}
 800be64:	bf00      	nop
 800be66:	bf00      	nop
 800be68:	e7fd      	b.n	800be66 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	689c      	ldr	r4, [r3, #8]
 800be6e:	f001 fe05 	bl	800da7c <xTaskGetCurrentTaskHandle>
 800be72:	4603      	mov	r3, r0
 800be74:	429c      	cmp	r4, r3
 800be76:	d111      	bne.n	800be9c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800be78:	693b      	ldr	r3, [r7, #16]
 800be7a:	68db      	ldr	r3, [r3, #12]
 800be7c:	1e5a      	subs	r2, r3, #1
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800be82:	693b      	ldr	r3, [r7, #16]
 800be84:	68db      	ldr	r3, [r3, #12]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d105      	bne.n	800be96 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800be8a:	2300      	movs	r3, #0
 800be8c:	2200      	movs	r2, #0
 800be8e:	2100      	movs	r1, #0
 800be90:	6938      	ldr	r0, [r7, #16]
 800be92:	f000 f8af 	bl	800bff4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800be96:	2301      	movs	r3, #1
 800be98:	617b      	str	r3, [r7, #20]
 800be9a:	e001      	b.n	800bea0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800be9c:	2300      	movs	r3, #0
 800be9e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bea0:	697b      	ldr	r3, [r7, #20]
	}
 800bea2:	4618      	mov	r0, r3
 800bea4:	371c      	adds	r7, #28
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd90      	pop	{r4, r7, pc}

0800beaa <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800beaa:	b590      	push	{r4, r7, lr}
 800beac:	b087      	sub	sp, #28
 800beae:	af00      	add	r7, sp, #0
 800beb0:	6078      	str	r0, [r7, #4]
 800beb2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800beb8:	693b      	ldr	r3, [r7, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10b      	bne.n	800bed6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	60fb      	str	r3, [r7, #12]
}
 800bed0:	bf00      	nop
 800bed2:	bf00      	nop
 800bed4:	e7fd      	b.n	800bed2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bed6:	693b      	ldr	r3, [r7, #16]
 800bed8:	689c      	ldr	r4, [r3, #8]
 800beda:	f001 fdcf 	bl	800da7c <xTaskGetCurrentTaskHandle>
 800bede:	4603      	mov	r3, r0
 800bee0:	429c      	cmp	r4, r3
 800bee2:	d107      	bne.n	800bef4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	1c5a      	adds	r2, r3, #1
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800beee:	2301      	movs	r3, #1
 800bef0:	617b      	str	r3, [r7, #20]
 800bef2:	e00c      	b.n	800bf0e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bef4:	6839      	ldr	r1, [r7, #0]
 800bef6:	6938      	ldr	r0, [r7, #16]
 800bef8:	f000 fb8e 	bl	800c618 <xQueueSemaphoreTake>
 800befc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d004      	beq.n	800bf0e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bf04:	693b      	ldr	r3, [r7, #16]
 800bf06:	68db      	ldr	r3, [r3, #12]
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bf0e:	697b      	ldr	r3, [r7, #20]
	}
 800bf10:	4618      	mov	r0, r3
 800bf12:	371c      	adds	r7, #28
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd90      	pop	{r4, r7, pc}

0800bf18 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b08a      	sub	sp, #40	@ 0x28
 800bf1c:	af02      	add	r7, sp, #8
 800bf1e:	60f8      	str	r0, [r7, #12]
 800bf20:	60b9      	str	r1, [r7, #8]
 800bf22:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10b      	bne.n	800bf42 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800bf2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf2e:	f383 8811 	msr	BASEPRI, r3
 800bf32:	f3bf 8f6f 	isb	sy
 800bf36:	f3bf 8f4f 	dsb	sy
 800bf3a:	61bb      	str	r3, [r7, #24]
}
 800bf3c:	bf00      	nop
 800bf3e:	bf00      	nop
 800bf40:	e7fd      	b.n	800bf3e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bf42:	68ba      	ldr	r2, [r7, #8]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d90b      	bls.n	800bf62 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800bf4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	617b      	str	r3, [r7, #20]
}
 800bf5c:	bf00      	nop
 800bf5e:	bf00      	nop
 800bf60:	e7fd      	b.n	800bf5e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bf62:	2302      	movs	r3, #2
 800bf64:	9300      	str	r3, [sp, #0]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	68f8      	ldr	r0, [r7, #12]
 800bf6e:	f7ff fe3f 	bl	800bbf0 <xQueueGenericCreateStatic>
 800bf72:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bf74:	69fb      	ldr	r3, [r7, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d002      	beq.n	800bf80 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	68ba      	ldr	r2, [r7, #8]
 800bf7e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bf80:	69fb      	ldr	r3, [r7, #28]
	}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3720      	adds	r7, #32
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}

0800bf8a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b086      	sub	sp, #24
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d10b      	bne.n	800bfb2 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	613b      	str	r3, [r7, #16]
}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	e7fd      	b.n	800bfae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bfb2:	683a      	ldr	r2, [r7, #0]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d90b      	bls.n	800bfd2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800bfba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfbe:	f383 8811 	msr	BASEPRI, r3
 800bfc2:	f3bf 8f6f 	isb	sy
 800bfc6:	f3bf 8f4f 	dsb	sy
 800bfca:	60fb      	str	r3, [r7, #12]
}
 800bfcc:	bf00      	nop
 800bfce:	bf00      	nop
 800bfd0:	e7fd      	b.n	800bfce <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bfd2:	2202      	movs	r2, #2
 800bfd4:	2100      	movs	r1, #0
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7ff fe87 	bl	800bcea <xQueueGenericCreate>
 800bfdc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d002      	beq.n	800bfea <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	683a      	ldr	r2, [r7, #0]
 800bfe8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bfea:	697b      	ldr	r3, [r7, #20]
	}
 800bfec:	4618      	mov	r0, r3
 800bfee:	3718      	adds	r7, #24
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bd80      	pop	{r7, pc}

0800bff4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b08e      	sub	sp, #56	@ 0x38
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
 800c000:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c002:	2300      	movs	r3, #0
 800c004:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c00a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d10b      	bne.n	800c028 <xQueueGenericSend+0x34>
	__asm volatile
 800c010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c014:	f383 8811 	msr	BASEPRI, r3
 800c018:	f3bf 8f6f 	isb	sy
 800c01c:	f3bf 8f4f 	dsb	sy
 800c020:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c022:	bf00      	nop
 800c024:	bf00      	nop
 800c026:	e7fd      	b.n	800c024 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d103      	bne.n	800c036 <xQueueGenericSend+0x42>
 800c02e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c032:	2b00      	cmp	r3, #0
 800c034:	d101      	bne.n	800c03a <xQueueGenericSend+0x46>
 800c036:	2301      	movs	r3, #1
 800c038:	e000      	b.n	800c03c <xQueueGenericSend+0x48>
 800c03a:	2300      	movs	r3, #0
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d10b      	bne.n	800c058 <xQueueGenericSend+0x64>
	__asm volatile
 800c040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c044:	f383 8811 	msr	BASEPRI, r3
 800c048:	f3bf 8f6f 	isb	sy
 800c04c:	f3bf 8f4f 	dsb	sy
 800c050:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c052:	bf00      	nop
 800c054:	bf00      	nop
 800c056:	e7fd      	b.n	800c054 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2b02      	cmp	r3, #2
 800c05c:	d103      	bne.n	800c066 <xQueueGenericSend+0x72>
 800c05e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c062:	2b01      	cmp	r3, #1
 800c064:	d101      	bne.n	800c06a <xQueueGenericSend+0x76>
 800c066:	2301      	movs	r3, #1
 800c068:	e000      	b.n	800c06c <xQueueGenericSend+0x78>
 800c06a:	2300      	movs	r3, #0
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d10b      	bne.n	800c088 <xQueueGenericSend+0x94>
	__asm volatile
 800c070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c074:	f383 8811 	msr	BASEPRI, r3
 800c078:	f3bf 8f6f 	isb	sy
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	623b      	str	r3, [r7, #32]
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	e7fd      	b.n	800c084 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c088:	f001 fd08 	bl	800da9c <xTaskGetSchedulerState>
 800c08c:	4603      	mov	r3, r0
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d102      	bne.n	800c098 <xQueueGenericSend+0xa4>
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d101      	bne.n	800c09c <xQueueGenericSend+0xa8>
 800c098:	2301      	movs	r3, #1
 800c09a:	e000      	b.n	800c09e <xQueueGenericSend+0xaa>
 800c09c:	2300      	movs	r3, #0
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d10b      	bne.n	800c0ba <xQueueGenericSend+0xc6>
	__asm volatile
 800c0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0a6:	f383 8811 	msr	BASEPRI, r3
 800c0aa:	f3bf 8f6f 	isb	sy
 800c0ae:	f3bf 8f4f 	dsb	sy
 800c0b2:	61fb      	str	r3, [r7, #28]
}
 800c0b4:	bf00      	nop
 800c0b6:	bf00      	nop
 800c0b8:	e7fd      	b.n	800c0b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c0ba:	f002 fb5d 	bl	800e778 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c0be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d302      	bcc.n	800c0d0 <xQueueGenericSend+0xdc>
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	2b02      	cmp	r3, #2
 800c0ce:	d129      	bne.n	800c124 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c0d0:	683a      	ldr	r2, [r7, #0]
 800c0d2:	68b9      	ldr	r1, [r7, #8]
 800c0d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c0d6:	f000 fc6d 	bl	800c9b4 <prvCopyDataToQueue>
 800c0da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d010      	beq.n	800c106 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c0e6:	3324      	adds	r3, #36	@ 0x24
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	f001 fb01 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d013      	beq.n	800c11c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c0f4:	4b3f      	ldr	r3, [pc, #252]	@ (800c1f4 <xQueueGenericSend+0x200>)
 800c0f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0fa:	601a      	str	r2, [r3, #0]
 800c0fc:	f3bf 8f4f 	dsb	sy
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	e00a      	b.n	800c11c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d007      	beq.n	800c11c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c10c:	4b39      	ldr	r3, [pc, #228]	@ (800c1f4 <xQueueGenericSend+0x200>)
 800c10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c112:	601a      	str	r2, [r3, #0]
 800c114:	f3bf 8f4f 	dsb	sy
 800c118:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c11c:	f002 fb5e 	bl	800e7dc <vPortExitCritical>
				return pdPASS;
 800c120:	2301      	movs	r3, #1
 800c122:	e063      	b.n	800c1ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d103      	bne.n	800c132 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c12a:	f002 fb57 	bl	800e7dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	e05c      	b.n	800c1ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c134:	2b00      	cmp	r3, #0
 800c136:	d106      	bne.n	800c146 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c138:	f107 0314 	add.w	r3, r7, #20
 800c13c:	4618      	mov	r0, r3
 800c13e:	f001 fb3b 	bl	800d7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c142:	2301      	movs	r3, #1
 800c144:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c146:	f002 fb49 	bl	800e7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c14a:	f001 f8a3 	bl	800d294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c14e:	f002 fb13 	bl	800e778 <vPortEnterCritical>
 800c152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c154:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c158:	b25b      	sxtb	r3, r3
 800c15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c15e:	d103      	bne.n	800c168 <xQueueGenericSend+0x174>
 800c160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c162:	2200      	movs	r2, #0
 800c164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c16a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c16e:	b25b      	sxtb	r3, r3
 800c170:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c174:	d103      	bne.n	800c17e <xQueueGenericSend+0x18a>
 800c176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c178:	2200      	movs	r2, #0
 800c17a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c17e:	f002 fb2d 	bl	800e7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c182:	1d3a      	adds	r2, r7, #4
 800c184:	f107 0314 	add.w	r3, r7, #20
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f001 fb2a 	bl	800d7e4 <xTaskCheckForTimeOut>
 800c190:	4603      	mov	r3, r0
 800c192:	2b00      	cmp	r3, #0
 800c194:	d124      	bne.n	800c1e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c196:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c198:	f000 fd04 	bl	800cba4 <prvIsQueueFull>
 800c19c:	4603      	mov	r3, r0
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d018      	beq.n	800c1d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c1a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c1a4:	3310      	adds	r3, #16
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	4611      	mov	r1, r2
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 fa4e 	bl	800d64c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c1b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1b2:	f000 fc8f 	bl	800cad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c1b6:	f001 f87b 	bl	800d2b0 <xTaskResumeAll>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	f47f af7c 	bne.w	800c0ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c1c2:	4b0c      	ldr	r3, [pc, #48]	@ (800c1f4 <xQueueGenericSend+0x200>)
 800c1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c8:	601a      	str	r2, [r3, #0]
 800c1ca:	f3bf 8f4f 	dsb	sy
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	e772      	b.n	800c0ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c1d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1d6:	f000 fc7d 	bl	800cad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1da:	f001 f869 	bl	800d2b0 <xTaskResumeAll>
 800c1de:	e76c      	b.n	800c0ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c1e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c1e2:	f000 fc77 	bl	800cad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1e6:	f001 f863 	bl	800d2b0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c1ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	3738      	adds	r7, #56	@ 0x38
 800c1f0:	46bd      	mov	sp, r7
 800c1f2:	bd80      	pop	{r7, pc}
 800c1f4:	e000ed04 	.word	0xe000ed04

0800c1f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b090      	sub	sp, #64	@ 0x40
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	607a      	str	r2, [r7, #4]
 800c204:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c20a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d10b      	bne.n	800c228 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c222:	bf00      	nop
 800c224:	bf00      	nop
 800c226:	e7fd      	b.n	800c224 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d103      	bne.n	800c236 <xQueueGenericSendFromISR+0x3e>
 800c22e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <xQueueGenericSendFromISR+0x42>
 800c236:	2301      	movs	r3, #1
 800c238:	e000      	b.n	800c23c <xQueueGenericSendFromISR+0x44>
 800c23a:	2300      	movs	r3, #0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10b      	bne.n	800c258 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c244:	f383 8811 	msr	BASEPRI, r3
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	f3bf 8f4f 	dsb	sy
 800c250:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c252:	bf00      	nop
 800c254:	bf00      	nop
 800c256:	e7fd      	b.n	800c254 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c258:	683b      	ldr	r3, [r7, #0]
 800c25a:	2b02      	cmp	r3, #2
 800c25c:	d103      	bne.n	800c266 <xQueueGenericSendFromISR+0x6e>
 800c25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c262:	2b01      	cmp	r3, #1
 800c264:	d101      	bne.n	800c26a <xQueueGenericSendFromISR+0x72>
 800c266:	2301      	movs	r3, #1
 800c268:	e000      	b.n	800c26c <xQueueGenericSendFromISR+0x74>
 800c26a:	2300      	movs	r3, #0
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10b      	bne.n	800c288 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	623b      	str	r3, [r7, #32]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c288:	f002 fb56 	bl	800e938 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c28c:	f3ef 8211 	mrs	r2, BASEPRI
 800c290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c294:	f383 8811 	msr	BASEPRI, r3
 800c298:	f3bf 8f6f 	isb	sy
 800c29c:	f3bf 8f4f 	dsb	sy
 800c2a0:	61fa      	str	r2, [r7, #28]
 800c2a2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c2a4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2a6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d302      	bcc.n	800c2ba <xQueueGenericSendFromISR+0xc2>
 800c2b4:	683b      	ldr	r3, [r7, #0]
 800c2b6:	2b02      	cmp	r3, #2
 800c2b8:	d12f      	bne.n	800c31a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c2c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c2ca:	683a      	ldr	r2, [r7, #0]
 800c2cc:	68b9      	ldr	r1, [r7, #8]
 800c2ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c2d0:	f000 fb70 	bl	800c9b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c2d4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c2d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2dc:	d112      	bne.n	800c304 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d016      	beq.n	800c314 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c2e8:	3324      	adds	r3, #36	@ 0x24
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 fa00 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d00e      	beq.n	800c314 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	601a      	str	r2, [r3, #0]
 800c302:	e007      	b.n	800c314 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c308:	3301      	adds	r3, #1
 800c30a:	b2db      	uxtb	r3, r3
 800c30c:	b25a      	sxtb	r2, r3
 800c30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c310:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c314:	2301      	movs	r3, #1
 800c316:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c318:	e001      	b.n	800c31e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c31a:	2300      	movs	r3, #0
 800c31c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c320:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c322:	697b      	ldr	r3, [r7, #20]
 800c324:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c328:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c32a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c32c:	4618      	mov	r0, r3
 800c32e:	3740      	adds	r7, #64	@ 0x40
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08e      	sub	sp, #56	@ 0x38
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10b      	bne.n	800c360 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	623b      	str	r3, [r7, #32]
}
 800c35a:	bf00      	nop
 800c35c:	bf00      	nop
 800c35e:	e7fd      	b.n	800c35c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00b      	beq.n	800c380 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800c368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c36c:	f383 8811 	msr	BASEPRI, r3
 800c370:	f3bf 8f6f 	isb	sy
 800c374:	f3bf 8f4f 	dsb	sy
 800c378:	61fb      	str	r3, [r7, #28]
}
 800c37a:	bf00      	nop
 800c37c:	bf00      	nop
 800c37e:	e7fd      	b.n	800c37c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d103      	bne.n	800c390 <xQueueGiveFromISR+0x5c>
 800c388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d101      	bne.n	800c394 <xQueueGiveFromISR+0x60>
 800c390:	2301      	movs	r3, #1
 800c392:	e000      	b.n	800c396 <xQueueGiveFromISR+0x62>
 800c394:	2300      	movs	r3, #0
 800c396:	2b00      	cmp	r3, #0
 800c398:	d10b      	bne.n	800c3b2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800c39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c39e:	f383 8811 	msr	BASEPRI, r3
 800c3a2:	f3bf 8f6f 	isb	sy
 800c3a6:	f3bf 8f4f 	dsb	sy
 800c3aa:	61bb      	str	r3, [r7, #24]
}
 800c3ac:	bf00      	nop
 800c3ae:	bf00      	nop
 800c3b0:	e7fd      	b.n	800c3ae <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c3b2:	f002 fac1 	bl	800e938 <vPortValidateInterruptPriority>
	__asm volatile
 800c3b6:	f3ef 8211 	mrs	r2, BASEPRI
 800c3ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3be:	f383 8811 	msr	BASEPRI, r3
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	f3bf 8f4f 	dsb	sy
 800c3ca:	617a      	str	r2, [r7, #20]
 800c3cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c3ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c3d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c3d6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d22b      	bcs.n	800c43a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c3e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c3f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c3f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3fc:	d112      	bne.n	800c424 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c3fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c402:	2b00      	cmp	r3, #0
 800c404:	d016      	beq.n	800c434 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c408:	3324      	adds	r3, #36	@ 0x24
 800c40a:	4618      	mov	r0, r3
 800c40c:	f001 f970 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c410:	4603      	mov	r3, r0
 800c412:	2b00      	cmp	r3, #0
 800c414:	d00e      	beq.n	800c434 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d00b      	beq.n	800c434 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2201      	movs	r2, #1
 800c420:	601a      	str	r2, [r3, #0]
 800c422:	e007      	b.n	800c434 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c424:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c428:	3301      	adds	r3, #1
 800c42a:	b2db      	uxtb	r3, r3
 800c42c:	b25a      	sxtb	r2, r3
 800c42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c434:	2301      	movs	r3, #1
 800c436:	637b      	str	r3, [r7, #52]	@ 0x34
 800c438:	e001      	b.n	800c43e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	637b      	str	r3, [r7, #52]	@ 0x34
 800c43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c440:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f383 8811 	msr	BASEPRI, r3
}
 800c448:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3738      	adds	r7, #56	@ 0x38
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08c      	sub	sp, #48	@ 0x30
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c460:	2300      	movs	r3, #0
 800c462:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d10b      	bne.n	800c486 <xQueueReceive+0x32>
	__asm volatile
 800c46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c472:	f383 8811 	msr	BASEPRI, r3
 800c476:	f3bf 8f6f 	isb	sy
 800c47a:	f3bf 8f4f 	dsb	sy
 800c47e:	623b      	str	r3, [r7, #32]
}
 800c480:	bf00      	nop
 800c482:	bf00      	nop
 800c484:	e7fd      	b.n	800c482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <xQueueReceive+0x40>
 800c48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c490:	2b00      	cmp	r3, #0
 800c492:	d101      	bne.n	800c498 <xQueueReceive+0x44>
 800c494:	2301      	movs	r3, #1
 800c496:	e000      	b.n	800c49a <xQueueReceive+0x46>
 800c498:	2300      	movs	r3, #0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d10b      	bne.n	800c4b6 <xQueueReceive+0x62>
	__asm volatile
 800c49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a2:	f383 8811 	msr	BASEPRI, r3
 800c4a6:	f3bf 8f6f 	isb	sy
 800c4aa:	f3bf 8f4f 	dsb	sy
 800c4ae:	61fb      	str	r3, [r7, #28]
}
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	e7fd      	b.n	800c4b2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c4b6:	f001 faf1 	bl	800da9c <xTaskGetSchedulerState>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d102      	bne.n	800c4c6 <xQueueReceive+0x72>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d101      	bne.n	800c4ca <xQueueReceive+0x76>
 800c4c6:	2301      	movs	r3, #1
 800c4c8:	e000      	b.n	800c4cc <xQueueReceive+0x78>
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d10b      	bne.n	800c4e8 <xQueueReceive+0x94>
	__asm volatile
 800c4d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4d4:	f383 8811 	msr	BASEPRI, r3
 800c4d8:	f3bf 8f6f 	isb	sy
 800c4dc:	f3bf 8f4f 	dsb	sy
 800c4e0:	61bb      	str	r3, [r7, #24]
}
 800c4e2:	bf00      	nop
 800c4e4:	bf00      	nop
 800c4e6:	e7fd      	b.n	800c4e4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c4e8:	f002 f946 	bl	800e778 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c4f0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d01f      	beq.n	800c538 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c4f8:	68b9      	ldr	r1, [r7, #8]
 800c4fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c4fc:	f000 fac4 	bl	800ca88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c502:	1e5a      	subs	r2, r3, #1
 800c504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c506:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50a:	691b      	ldr	r3, [r3, #16]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d00f      	beq.n	800c530 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c512:	3310      	adds	r3, #16
 800c514:	4618      	mov	r0, r3
 800c516:	f001 f8eb 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d007      	beq.n	800c530 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c520:	4b3c      	ldr	r3, [pc, #240]	@ (800c614 <xQueueReceive+0x1c0>)
 800c522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c526:	601a      	str	r2, [r3, #0]
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c530:	f002 f954 	bl	800e7dc <vPortExitCritical>
				return pdPASS;
 800c534:	2301      	movs	r3, #1
 800c536:	e069      	b.n	800c60c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d103      	bne.n	800c546 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c53e:	f002 f94d 	bl	800e7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c542:	2300      	movs	r3, #0
 800c544:	e062      	b.n	800c60c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d106      	bne.n	800c55a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c54c:	f107 0310 	add.w	r3, r7, #16
 800c550:	4618      	mov	r0, r3
 800c552:	f001 f931 	bl	800d7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c556:	2301      	movs	r3, #1
 800c558:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c55a:	f002 f93f 	bl	800e7dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c55e:	f000 fe99 	bl	800d294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c562:	f002 f909 	bl	800e778 <vPortEnterCritical>
 800c566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c568:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c56c:	b25b      	sxtb	r3, r3
 800c56e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c572:	d103      	bne.n	800c57c <xQueueReceive+0x128>
 800c574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c576:	2200      	movs	r2, #0
 800c578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c582:	b25b      	sxtb	r3, r3
 800c584:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c588:	d103      	bne.n	800c592 <xQueueReceive+0x13e>
 800c58a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58c:	2200      	movs	r2, #0
 800c58e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c592:	f002 f923 	bl	800e7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c596:	1d3a      	adds	r2, r7, #4
 800c598:	f107 0310 	add.w	r3, r7, #16
 800c59c:	4611      	mov	r1, r2
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f001 f920 	bl	800d7e4 <xTaskCheckForTimeOut>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d123      	bne.n	800c5f2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ac:	f000 fae4 	bl	800cb78 <prvIsQueueEmpty>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d017      	beq.n	800c5e6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c5b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b8:	3324      	adds	r3, #36	@ 0x24
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	4611      	mov	r1, r2
 800c5be:	4618      	mov	r0, r3
 800c5c0:	f001 f844 	bl	800d64c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c5c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5c6:	f000 fa85 	bl	800cad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c5ca:	f000 fe71 	bl	800d2b0 <xTaskResumeAll>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d189      	bne.n	800c4e8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800c614 <xQueueReceive+0x1c0>)
 800c5d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5da:	601a      	str	r2, [r3, #0]
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	f3bf 8f6f 	isb	sy
 800c5e4:	e780      	b.n	800c4e8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c5e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5e8:	f000 fa74 	bl	800cad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c5ec:	f000 fe60 	bl	800d2b0 <xTaskResumeAll>
 800c5f0:	e77a      	b.n	800c4e8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c5f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5f4:	f000 fa6e 	bl	800cad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c5f8:	f000 fe5a 	bl	800d2b0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c5fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5fe:	f000 fabb 	bl	800cb78 <prvIsQueueEmpty>
 800c602:	4603      	mov	r3, r0
 800c604:	2b00      	cmp	r3, #0
 800c606:	f43f af6f 	beq.w	800c4e8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c60a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3730      	adds	r7, #48	@ 0x30
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}
 800c614:	e000ed04 	.word	0xe000ed04

0800c618 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b08e      	sub	sp, #56	@ 0x38
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c622:	2300      	movs	r3, #0
 800c624:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c62a:	2300      	movs	r3, #0
 800c62c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c630:	2b00      	cmp	r3, #0
 800c632:	d10b      	bne.n	800c64c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800c634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c638:	f383 8811 	msr	BASEPRI, r3
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	f3bf 8f4f 	dsb	sy
 800c644:	623b      	str	r3, [r7, #32]
}
 800c646:	bf00      	nop
 800c648:	bf00      	nop
 800c64a:	e7fd      	b.n	800c648 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c64c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c650:	2b00      	cmp	r3, #0
 800c652:	d00b      	beq.n	800c66c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800c654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c658:	f383 8811 	msr	BASEPRI, r3
 800c65c:	f3bf 8f6f 	isb	sy
 800c660:	f3bf 8f4f 	dsb	sy
 800c664:	61fb      	str	r3, [r7, #28]
}
 800c666:	bf00      	nop
 800c668:	bf00      	nop
 800c66a:	e7fd      	b.n	800c668 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c66c:	f001 fa16 	bl	800da9c <xTaskGetSchedulerState>
 800c670:	4603      	mov	r3, r0
 800c672:	2b00      	cmp	r3, #0
 800c674:	d102      	bne.n	800c67c <xQueueSemaphoreTake+0x64>
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <xQueueSemaphoreTake+0x68>
 800c67c:	2301      	movs	r3, #1
 800c67e:	e000      	b.n	800c682 <xQueueSemaphoreTake+0x6a>
 800c680:	2300      	movs	r3, #0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d10b      	bne.n	800c69e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	61bb      	str	r3, [r7, #24]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c69e:	f002 f86b 	bl	800e778 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c6a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6a6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d024      	beq.n	800c6f8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b0:	1e5a      	subs	r2, r3, #1
 800c6b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d104      	bne.n	800c6c8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c6be:	f001 fb67 	bl	800dd90 <pvTaskIncrementMutexHeldCount>
 800c6c2:	4602      	mov	r2, r0
 800c6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d00f      	beq.n	800c6f0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6d2:	3310      	adds	r3, #16
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f001 f80b 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d007      	beq.n	800c6f0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c6e0:	4b54      	ldr	r3, [pc, #336]	@ (800c834 <xQueueSemaphoreTake+0x21c>)
 800c6e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6e6:	601a      	str	r2, [r3, #0]
 800c6e8:	f3bf 8f4f 	dsb	sy
 800c6ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c6f0:	f002 f874 	bl	800e7dc <vPortExitCritical>
				return pdPASS;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e098      	b.n	800c82a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6f8:	683b      	ldr	r3, [r7, #0]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d112      	bne.n	800c724 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c700:	2b00      	cmp	r3, #0
 800c702:	d00b      	beq.n	800c71c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800c704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c708:	f383 8811 	msr	BASEPRI, r3
 800c70c:	f3bf 8f6f 	isb	sy
 800c710:	f3bf 8f4f 	dsb	sy
 800c714:	617b      	str	r3, [r7, #20]
}
 800c716:	bf00      	nop
 800c718:	bf00      	nop
 800c71a:	e7fd      	b.n	800c718 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c71c:	f002 f85e 	bl	800e7dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c720:	2300      	movs	r3, #0
 800c722:	e082      	b.n	800c82a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c726:	2b00      	cmp	r3, #0
 800c728:	d106      	bne.n	800c738 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c72a:	f107 030c 	add.w	r3, r7, #12
 800c72e:	4618      	mov	r0, r3
 800c730:	f001 f842 	bl	800d7b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c738:	f002 f850 	bl	800e7dc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c73c:	f000 fdaa 	bl	800d294 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c740:	f002 f81a 	bl	800e778 <vPortEnterCritical>
 800c744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c746:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c74a:	b25b      	sxtb	r3, r3
 800c74c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c750:	d103      	bne.n	800c75a <xQueueSemaphoreTake+0x142>
 800c752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c754:	2200      	movs	r2, #0
 800c756:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c75c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c760:	b25b      	sxtb	r3, r3
 800c762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c766:	d103      	bne.n	800c770 <xQueueSemaphoreTake+0x158>
 800c768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c76a:	2200      	movs	r2, #0
 800c76c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c770:	f002 f834 	bl	800e7dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c774:	463a      	mov	r2, r7
 800c776:	f107 030c 	add.w	r3, r7, #12
 800c77a:	4611      	mov	r1, r2
 800c77c:	4618      	mov	r0, r3
 800c77e:	f001 f831 	bl	800d7e4 <xTaskCheckForTimeOut>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d132      	bne.n	800c7ee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c78a:	f000 f9f5 	bl	800cb78 <prvIsQueueEmpty>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d026      	beq.n	800c7e2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d109      	bne.n	800c7b0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c79c:	f001 ffec 	bl	800e778 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c7a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f001 f997 	bl	800dad8 <xTaskPriorityInherit>
 800c7aa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800c7ac:	f002 f816 	bl	800e7dc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7b2:	3324      	adds	r3, #36	@ 0x24
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	4611      	mov	r1, r2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f000 ff47 	bl	800d64c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c7be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7c0:	f000 f988 	bl	800cad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c7c4:	f000 fd74 	bl	800d2b0 <xTaskResumeAll>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f47f af67 	bne.w	800c69e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c7d0:	4b18      	ldr	r3, [pc, #96]	@ (800c834 <xQueueSemaphoreTake+0x21c>)
 800c7d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c7d6:	601a      	str	r2, [r3, #0]
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	f3bf 8f6f 	isb	sy
 800c7e0:	e75d      	b.n	800c69e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c7e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7e4:	f000 f976 	bl	800cad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c7e8:	f000 fd62 	bl	800d2b0 <xTaskResumeAll>
 800c7ec:	e757      	b.n	800c69e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c7ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7f0:	f000 f970 	bl	800cad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c7f4:	f000 fd5c 	bl	800d2b0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c7f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c7fa:	f000 f9bd 	bl	800cb78 <prvIsQueueEmpty>
 800c7fe:	4603      	mov	r3, r0
 800c800:	2b00      	cmp	r3, #0
 800c802:	f43f af4c 	beq.w	800c69e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d00d      	beq.n	800c828 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c80c:	f001 ffb4 	bl	800e778 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c810:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c812:	f000 f8b7 	bl	800c984 <prvGetDisinheritPriorityAfterTimeout>
 800c816:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c81e:	4618      	mov	r0, r3
 800c820:	f001 fa32 	bl	800dc88 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c824:	f001 ffda 	bl	800e7dc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3738      	adds	r7, #56	@ 0x38
 800c82e:	46bd      	mov	sp, r7
 800c830:	bd80      	pop	{r7, pc}
 800c832:	bf00      	nop
 800c834:	e000ed04 	.word	0xe000ed04

0800c838 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b08e      	sub	sp, #56	@ 0x38
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10b      	bne.n	800c866 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	623b      	str	r3, [r7, #32]
}
 800c860:	bf00      	nop
 800c862:	bf00      	nop
 800c864:	e7fd      	b.n	800c862 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d103      	bne.n	800c874 <xQueueReceiveFromISR+0x3c>
 800c86c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c86e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <xQueueReceiveFromISR+0x40>
 800c874:	2301      	movs	r3, #1
 800c876:	e000      	b.n	800c87a <xQueueReceiveFromISR+0x42>
 800c878:	2300      	movs	r3, #0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d10b      	bne.n	800c896 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800c87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c882:	f383 8811 	msr	BASEPRI, r3
 800c886:	f3bf 8f6f 	isb	sy
 800c88a:	f3bf 8f4f 	dsb	sy
 800c88e:	61fb      	str	r3, [r7, #28]
}
 800c890:	bf00      	nop
 800c892:	bf00      	nop
 800c894:	e7fd      	b.n	800c892 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c896:	f002 f84f 	bl	800e938 <vPortValidateInterruptPriority>
	__asm volatile
 800c89a:	f3ef 8211 	mrs	r2, BASEPRI
 800c89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8a2:	f383 8811 	msr	BASEPRI, r3
 800c8a6:	f3bf 8f6f 	isb	sy
 800c8aa:	f3bf 8f4f 	dsb	sy
 800c8ae:	61ba      	str	r2, [r7, #24]
 800c8b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c8b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c8b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c8b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8ba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c8bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d02f      	beq.n	800c922 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c8c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c8cc:	68b9      	ldr	r1, [r7, #8]
 800c8ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c8d0:	f000 f8da 	bl	800ca88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d6:	1e5a      	subs	r2, r3, #1
 800c8d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8da:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c8dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c8e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8e4:	d112      	bne.n	800c90c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d016      	beq.n	800c91c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c8f0:	3310      	adds	r3, #16
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 fefc 	bl	800d6f0 <xTaskRemoveFromEventList>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d00e      	beq.n	800c91c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d00b      	beq.n	800c91c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2201      	movs	r2, #1
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	e007      	b.n	800c91c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c910:	3301      	adds	r3, #1
 800c912:	b2db      	uxtb	r3, r3
 800c914:	b25a      	sxtb	r2, r3
 800c916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800c91c:	2301      	movs	r3, #1
 800c91e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c920:	e001      	b.n	800c926 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800c922:	2300      	movs	r3, #0
 800c924:	637b      	str	r3, [r7, #52]	@ 0x34
 800c926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c928:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c92a:	693b      	ldr	r3, [r7, #16]
 800c92c:	f383 8811 	msr	BASEPRI, r3
}
 800c930:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800c934:	4618      	mov	r0, r3
 800c936:	3738      	adds	r7, #56	@ 0x38
 800c938:	46bd      	mov	sp, r7
 800c93a:	bd80      	pop	{r7, pc}

0800c93c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d10b      	bne.n	800c966 <vQueueDelete+0x2a>
	__asm volatile
 800c94e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c952:	f383 8811 	msr	BASEPRI, r3
 800c956:	f3bf 8f6f 	isb	sy
 800c95a:	f3bf 8f4f 	dsb	sy
 800c95e:	60bb      	str	r3, [r7, #8]
}
 800c960:	bf00      	nop
 800c962:	bf00      	nop
 800c964:	e7fd      	b.n	800c962 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c966:	68f8      	ldr	r0, [r7, #12]
 800c968:	f000 f95e 	bl	800cc28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800c972:	2b00      	cmp	r3, #0
 800c974:	d102      	bne.n	800c97c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800c976:	68f8      	ldr	r0, [r7, #12]
 800c978:	f002 f8ee 	bl	800eb58 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c97c:	bf00      	nop
 800c97e:	3710      	adds	r7, #16
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c984:	b480      	push	{r7}
 800c986:	b085      	sub	sp, #20
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	d006      	beq.n	800c9a2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e001      	b.n	800c9a6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c9a6:	68fb      	ldr	r3, [r7, #12]
	}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3714      	adds	r7, #20
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b2:	4770      	bx	lr

0800c9b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	60f8      	str	r0, [r7, #12]
 800c9bc:	60b9      	str	r1, [r7, #8]
 800c9be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c9c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d10d      	bne.n	800c9ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d14d      	bne.n	800ca76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	689b      	ldr	r3, [r3, #8]
 800c9de:	4618      	mov	r0, r3
 800c9e0:	f001 f8e2 	bl	800dba8 <xTaskPriorityDisinherit>
 800c9e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	609a      	str	r2, [r3, #8]
 800c9ec:	e043      	b.n	800ca76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d119      	bne.n	800ca28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	6858      	ldr	r0, [r3, #4]
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	f003 f979 	bl	800fcf6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	685a      	ldr	r2, [r3, #4]
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	685a      	ldr	r2, [r3, #4]
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d32b      	bcc.n	800ca76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	605a      	str	r2, [r3, #4]
 800ca26:	e026      	b.n	800ca76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	68d8      	ldr	r0, [r3, #12]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca30:	461a      	mov	r2, r3
 800ca32:	68b9      	ldr	r1, [r7, #8]
 800ca34:	f003 f95f 	bl	800fcf6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	68da      	ldr	r2, [r3, #12]
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca40:	425b      	negs	r3, r3
 800ca42:	441a      	add	r2, r3
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68da      	ldr	r2, [r3, #12]
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d207      	bcs.n	800ca64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	689a      	ldr	r2, [r3, #8]
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca5c:	425b      	negs	r3, r3
 800ca5e:	441a      	add	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	2b02      	cmp	r3, #2
 800ca68:	d105      	bne.n	800ca76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ca70:	693b      	ldr	r3, [r7, #16]
 800ca72:	3b01      	subs	r3, #1
 800ca74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	1c5a      	adds	r2, r3, #1
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ca7e:	697b      	ldr	r3, [r7, #20]
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3718      	adds	r7, #24
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d018      	beq.n	800cacc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	68da      	ldr	r2, [r3, #12]
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caa2:	441a      	add	r2, r3
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	68da      	ldr	r2, [r3, #12]
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689b      	ldr	r3, [r3, #8]
 800cab0:	429a      	cmp	r2, r3
 800cab2:	d303      	bcc.n	800cabc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	68d9      	ldr	r1, [r3, #12]
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac4:	461a      	mov	r2, r3
 800cac6:	6838      	ldr	r0, [r7, #0]
 800cac8:	f003 f915 	bl	800fcf6 <memcpy>
	}
}
 800cacc:	bf00      	nop
 800cace:	3708      	adds	r7, #8
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}

0800cad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cadc:	f001 fe4c 	bl	800e778 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cae8:	e011      	b.n	800cb0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d012      	beq.n	800cb18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	3324      	adds	r3, #36	@ 0x24
 800caf6:	4618      	mov	r0, r3
 800caf8:	f000 fdfa 	bl	800d6f0 <xTaskRemoveFromEventList>
 800cafc:	4603      	mov	r3, r0
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d001      	beq.n	800cb06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb02:	f000 fed3 	bl	800d8ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	dce9      	bgt.n	800caea <prvUnlockQueue+0x16>
 800cb16:	e000      	b.n	800cb1a <prvUnlockQueue+0x46>
					break;
 800cb18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	22ff      	movs	r2, #255	@ 0xff
 800cb1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cb22:	f001 fe5b 	bl	800e7dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cb26:	f001 fe27 	bl	800e778 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cb30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb32:	e011      	b.n	800cb58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	691b      	ldr	r3, [r3, #16]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d012      	beq.n	800cb62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3310      	adds	r3, #16
 800cb40:	4618      	mov	r0, r3
 800cb42:	f000 fdd5 	bl	800d6f0 <xTaskRemoveFromEventList>
 800cb46:	4603      	mov	r3, r0
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d001      	beq.n	800cb50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cb4c:	f000 feae 	bl	800d8ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
 800cb52:	3b01      	subs	r3, #1
 800cb54:	b2db      	uxtb	r3, r3
 800cb56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cb58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	dce9      	bgt.n	800cb34 <prvUnlockQueue+0x60>
 800cb60:	e000      	b.n	800cb64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cb62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	22ff      	movs	r2, #255	@ 0xff
 800cb68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cb6c:	f001 fe36 	bl	800e7dc <vPortExitCritical>
}
 800cb70:	bf00      	nop
 800cb72:	3710      	adds	r7, #16
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb80:	f001 fdfa 	bl	800e778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d102      	bne.n	800cb92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cb8c:	2301      	movs	r3, #1
 800cb8e:	60fb      	str	r3, [r7, #12]
 800cb90:	e001      	b.n	800cb96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cb96:	f001 fe21 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3710      	adds	r7, #16
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}

0800cba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cbac:	f001 fde4 	bl	800e778 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d102      	bne.n	800cbc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	e001      	b.n	800cbc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cbc6:	f001 fe09 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}

0800cbd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cbde:	2300      	movs	r3, #0
 800cbe0:	60fb      	str	r3, [r7, #12]
 800cbe2:	e014      	b.n	800cc0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cbe4:	4a0f      	ldr	r2, [pc, #60]	@ (800cc24 <vQueueAddToRegistry+0x50>)
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d10b      	bne.n	800cc08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cbf0:	490c      	ldr	r1, [pc, #48]	@ (800cc24 <vQueueAddToRegistry+0x50>)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	683a      	ldr	r2, [r7, #0]
 800cbf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cbfa:	4a0a      	ldr	r2, [pc, #40]	@ (800cc24 <vQueueAddToRegistry+0x50>)
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	00db      	lsls	r3, r3, #3
 800cc00:	4413      	add	r3, r2
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc06:	e006      	b.n	800cc16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	3301      	adds	r3, #1
 800cc0c:	60fb      	str	r3, [r7, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	2b07      	cmp	r3, #7
 800cc12:	d9e7      	bls.n	800cbe4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop
 800cc18:	3714      	adds	r7, #20
 800cc1a:	46bd      	mov	sp, r7
 800cc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc20:	4770      	bx	lr
 800cc22:	bf00      	nop
 800cc24:	20001160 	.word	0x20001160

0800cc28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc30:	2300      	movs	r3, #0
 800cc32:	60fb      	str	r3, [r7, #12]
 800cc34:	e016      	b.n	800cc64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800cc36:	4a10      	ldr	r2, [pc, #64]	@ (800cc78 <vQueueUnregisterQueue+0x50>)
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	00db      	lsls	r3, r3, #3
 800cc3c:	4413      	add	r3, r2
 800cc3e:	685b      	ldr	r3, [r3, #4]
 800cc40:	687a      	ldr	r2, [r7, #4]
 800cc42:	429a      	cmp	r2, r3
 800cc44:	d10b      	bne.n	800cc5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800cc46:	4a0c      	ldr	r2, [pc, #48]	@ (800cc78 <vQueueUnregisterQueue+0x50>)
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800cc50:	4a09      	ldr	r2, [pc, #36]	@ (800cc78 <vQueueUnregisterQueue+0x50>)
 800cc52:	68fb      	ldr	r3, [r7, #12]
 800cc54:	00db      	lsls	r3, r3, #3
 800cc56:	4413      	add	r3, r2
 800cc58:	2200      	movs	r2, #0
 800cc5a:	605a      	str	r2, [r3, #4]
				break;
 800cc5c:	e006      	b.n	800cc6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	3301      	adds	r3, #1
 800cc62:	60fb      	str	r3, [r7, #12]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b07      	cmp	r3, #7
 800cc68:	d9e5      	bls.n	800cc36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800cc6a:	bf00      	nop
 800cc6c:	bf00      	nop
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	20001160 	.word	0x20001160

0800cc7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800cc8c:	f001 fd74 	bl	800e778 <vPortEnterCritical>
 800cc90:	697b      	ldr	r3, [r7, #20]
 800cc92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc96:	b25b      	sxtb	r3, r3
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d103      	bne.n	800cca6 <vQueueWaitForMessageRestricted+0x2a>
 800cc9e:	697b      	ldr	r3, [r7, #20]
 800cca0:	2200      	movs	r2, #0
 800cca2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cca6:	697b      	ldr	r3, [r7, #20]
 800cca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccac:	b25b      	sxtb	r3, r3
 800ccae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccb2:	d103      	bne.n	800ccbc <vQueueWaitForMessageRestricted+0x40>
 800ccb4:	697b      	ldr	r3, [r7, #20]
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ccbc:	f001 fd8e 	bl	800e7dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d106      	bne.n	800ccd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	3324      	adds	r3, #36	@ 0x24
 800cccc:	687a      	ldr	r2, [r7, #4]
 800ccce:	68b9      	ldr	r1, [r7, #8]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 fce1 	bl	800d698 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ccd6:	6978      	ldr	r0, [r7, #20]
 800ccd8:	f7ff fefc 	bl	800cad4 <prvUnlockQueue>
	}
 800ccdc:	bf00      	nop
 800ccde:	3718      	adds	r7, #24
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b08e      	sub	sp, #56	@ 0x38
 800cce8:	af04      	add	r7, sp, #16
 800ccea:	60f8      	str	r0, [r7, #12]
 800ccec:	60b9      	str	r1, [r7, #8]
 800ccee:	607a      	str	r2, [r7, #4]
 800ccf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ccf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d10b      	bne.n	800cd10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ccf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccfc:	f383 8811 	msr	BASEPRI, r3
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	f3bf 8f4f 	dsb	sy
 800cd08:	623b      	str	r3, [r7, #32]
}
 800cd0a:	bf00      	nop
 800cd0c:	bf00      	nop
 800cd0e:	e7fd      	b.n	800cd0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d10b      	bne.n	800cd2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	61fb      	str	r3, [r7, #28]
}
 800cd28:	bf00      	nop
 800cd2a:	bf00      	nop
 800cd2c:	e7fd      	b.n	800cd2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd2e:	23a8      	movs	r3, #168	@ 0xa8
 800cd30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd32:	693b      	ldr	r3, [r7, #16]
 800cd34:	2ba8      	cmp	r3, #168	@ 0xa8
 800cd36:	d00b      	beq.n	800cd50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd3c:	f383 8811 	msr	BASEPRI, r3
 800cd40:	f3bf 8f6f 	isb	sy
 800cd44:	f3bf 8f4f 	dsb	sy
 800cd48:	61bb      	str	r3, [r7, #24]
}
 800cd4a:	bf00      	nop
 800cd4c:	bf00      	nop
 800cd4e:	e7fd      	b.n	800cd4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d01e      	beq.n	800cd96 <xTaskCreateStatic+0xb2>
 800cd58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d01b      	beq.n	800cd96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6a:	2202      	movs	r2, #2
 800cd6c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd70:	2300      	movs	r3, #0
 800cd72:	9303      	str	r3, [sp, #12]
 800cd74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd76:	9302      	str	r3, [sp, #8]
 800cd78:	f107 0314 	add.w	r3, r7, #20
 800cd7c:	9301      	str	r3, [sp, #4]
 800cd7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd80:	9300      	str	r3, [sp, #0]
 800cd82:	683b      	ldr	r3, [r7, #0]
 800cd84:	687a      	ldr	r2, [r7, #4]
 800cd86:	68b9      	ldr	r1, [r7, #8]
 800cd88:	68f8      	ldr	r0, [r7, #12]
 800cd8a:	f000 f851 	bl	800ce30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cd8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cd90:	f000 f8f6 	bl	800cf80 <prvAddNewTaskToReadyList>
 800cd94:	e001      	b.n	800cd9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cd9a:	697b      	ldr	r3, [r7, #20]
	}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3728      	adds	r7, #40	@ 0x28
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08c      	sub	sp, #48	@ 0x30
 800cda8:	af04      	add	r7, sp, #16
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cdb4:	88fb      	ldrh	r3, [r7, #6]
 800cdb6:	009b      	lsls	r3, r3, #2
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f001 fdff 	bl	800e9bc <pvPortMalloc>
 800cdbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d00e      	beq.n	800cde4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdc6:	20a8      	movs	r0, #168	@ 0xa8
 800cdc8:	f001 fdf8 	bl	800e9bc <pvPortMalloc>
 800cdcc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdce:	69fb      	ldr	r3, [r7, #28]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d003      	beq.n	800cddc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800cdda:	e005      	b.n	800cde8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cddc:	6978      	ldr	r0, [r7, #20]
 800cdde:	f001 febb 	bl	800eb58 <vPortFree>
 800cde2:	e001      	b.n	800cde8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cde4:	2300      	movs	r3, #0
 800cde6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d017      	beq.n	800ce1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cdee:	69fb      	ldr	r3, [r7, #28]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cdf6:	88fa      	ldrh	r2, [r7, #6]
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	9303      	str	r3, [sp, #12]
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	9302      	str	r3, [sp, #8]
 800ce00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce02:	9301      	str	r3, [sp, #4]
 800ce04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce06:	9300      	str	r3, [sp, #0]
 800ce08:	683b      	ldr	r3, [r7, #0]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 f80f 	bl	800ce30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce12:	69f8      	ldr	r0, [r7, #28]
 800ce14:	f000 f8b4 	bl	800cf80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce18:	2301      	movs	r3, #1
 800ce1a:	61bb      	str	r3, [r7, #24]
 800ce1c:	e002      	b.n	800ce24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ce22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce24:	69bb      	ldr	r3, [r7, #24]
	}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3720      	adds	r7, #32
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}
	...

0800ce30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b088      	sub	sp, #32
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	60f8      	str	r0, [r7, #12]
 800ce38:	60b9      	str	r1, [r7, #8]
 800ce3a:	607a      	str	r2, [r7, #4]
 800ce3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	009b      	lsls	r3, r3, #2
 800ce46:	461a      	mov	r2, r3
 800ce48:	21a5      	movs	r1, #165	@ 0xa5
 800ce4a:	f002 fe77 	bl	800fb3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ce58:	3b01      	subs	r3, #1
 800ce5a:	009b      	lsls	r3, r3, #2
 800ce5c:	4413      	add	r3, r2
 800ce5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce60:	69bb      	ldr	r3, [r7, #24]
 800ce62:	f023 0307 	bic.w	r3, r3, #7
 800ce66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	f003 0307 	and.w	r3, r3, #7
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00b      	beq.n	800ce8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	617b      	str	r3, [r7, #20]
}
 800ce84:	bf00      	nop
 800ce86:	bf00      	nop
 800ce88:	e7fd      	b.n	800ce86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d01f      	beq.n	800ced0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ce90:	2300      	movs	r3, #0
 800ce92:	61fb      	str	r3, [r7, #28]
 800ce94:	e012      	b.n	800cebc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	69fb      	ldr	r3, [r7, #28]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	7819      	ldrb	r1, [r3, #0]
 800ce9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cea0:	69fb      	ldr	r3, [r7, #28]
 800cea2:	4413      	add	r3, r2
 800cea4:	3334      	adds	r3, #52	@ 0x34
 800cea6:	460a      	mov	r2, r1
 800cea8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	69fb      	ldr	r3, [r7, #28]
 800ceae:	4413      	add	r3, r2
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d006      	beq.n	800cec4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	3301      	adds	r3, #1
 800ceba:	61fb      	str	r3, [r7, #28]
 800cebc:	69fb      	ldr	r3, [r7, #28]
 800cebe:	2b0f      	cmp	r3, #15
 800cec0:	d9e9      	bls.n	800ce96 <prvInitialiseNewTask+0x66>
 800cec2:	e000      	b.n	800cec6 <prvInitialiseNewTask+0x96>
			{
				break;
 800cec4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec8:	2200      	movs	r2, #0
 800ceca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cece:	e003      	b.n	800ced8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ced0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced2:	2200      	movs	r2, #0
 800ced4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ced8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ceda:	2b37      	cmp	r3, #55	@ 0x37
 800cedc:	d901      	bls.n	800cee2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cede:	2337      	movs	r3, #55	@ 0x37
 800cee0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cee4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cee6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ceea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ceec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ceee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef0:	2200      	movs	r2, #0
 800cef2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef6:	3304      	adds	r3, #4
 800cef8:	4618      	mov	r0, r3
 800cefa:	f7fe fd7b 	bl	800b9f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cefe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf00:	3318      	adds	r3, #24
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fe fd76 	bl	800b9f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	2200      	movs	r2, #0
 800cf22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cf2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf30:	3354      	adds	r3, #84	@ 0x54
 800cf32:	224c      	movs	r2, #76	@ 0x4c
 800cf34:	2100      	movs	r1, #0
 800cf36:	4618      	mov	r0, r3
 800cf38:	f002 fe00 	bl	800fb3c <memset>
 800cf3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf3e:	4a0d      	ldr	r2, [pc, #52]	@ (800cf74 <prvInitialiseNewTask+0x144>)
 800cf40:	659a      	str	r2, [r3, #88]	@ 0x58
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	4a0c      	ldr	r2, [pc, #48]	@ (800cf78 <prvInitialiseNewTask+0x148>)
 800cf46:	65da      	str	r2, [r3, #92]	@ 0x5c
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf7c <prvInitialiseNewTask+0x14c>)
 800cf4c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf4e:	683a      	ldr	r2, [r7, #0]
 800cf50:	68f9      	ldr	r1, [r7, #12]
 800cf52:	69b8      	ldr	r0, [r7, #24]
 800cf54:	f001 fade 	bl	800e514 <pxPortInitialiseStack>
 800cf58:	4602      	mov	r2, r0
 800cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d002      	beq.n	800cf6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf6a:	bf00      	nop
 800cf6c:	3720      	adds	r7, #32
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	200053f4 	.word	0x200053f4
 800cf78:	2000545c 	.word	0x2000545c
 800cf7c:	200054c4 	.word	0x200054c4

0800cf80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf88:	f001 fbf6 	bl	800e778 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf8c:	4b2d      	ldr	r3, [pc, #180]	@ (800d044 <prvAddNewTaskToReadyList+0xc4>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3301      	adds	r3, #1
 800cf92:	4a2c      	ldr	r2, [pc, #176]	@ (800d044 <prvAddNewTaskToReadyList+0xc4>)
 800cf94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf96:	4b2c      	ldr	r3, [pc, #176]	@ (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d109      	bne.n	800cfb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf9e:	4a2a      	ldr	r2, [pc, #168]	@ (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfa4:	4b27      	ldr	r3, [pc, #156]	@ (800d044 <prvAddNewTaskToReadyList+0xc4>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	d110      	bne.n	800cfce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfac:	f000 fca2 	bl	800d8f4 <prvInitialiseTaskLists>
 800cfb0:	e00d      	b.n	800cfce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfb2:	4b26      	ldr	r3, [pc, #152]	@ (800d04c <prvAddNewTaskToReadyList+0xcc>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d109      	bne.n	800cfce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfba:	4b23      	ldr	r3, [pc, #140]	@ (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc4:	429a      	cmp	r2, r3
 800cfc6:	d802      	bhi.n	800cfce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfc8:	4a1f      	ldr	r2, [pc, #124]	@ (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfce:	4b20      	ldr	r3, [pc, #128]	@ (800d050 <prvAddNewTaskToReadyList+0xd0>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	4a1e      	ldr	r2, [pc, #120]	@ (800d050 <prvAddNewTaskToReadyList+0xd0>)
 800cfd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfd8:	4b1d      	ldr	r3, [pc, #116]	@ (800d050 <prvAddNewTaskToReadyList+0xd0>)
 800cfda:	681a      	ldr	r2, [r3, #0]
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe4:	4b1b      	ldr	r3, [pc, #108]	@ (800d054 <prvAddNewTaskToReadyList+0xd4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	429a      	cmp	r2, r3
 800cfea:	d903      	bls.n	800cff4 <prvAddNewTaskToReadyList+0x74>
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cff0:	4a18      	ldr	r2, [pc, #96]	@ (800d054 <prvAddNewTaskToReadyList+0xd4>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff8:	4613      	mov	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4413      	add	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4a15      	ldr	r2, [pc, #84]	@ (800d058 <prvAddNewTaskToReadyList+0xd8>)
 800d002:	441a      	add	r2, r3
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	3304      	adds	r3, #4
 800d008:	4619      	mov	r1, r3
 800d00a:	4610      	mov	r0, r2
 800d00c:	f7fe fcff 	bl	800ba0e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d010:	f001 fbe4 	bl	800e7dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d014:	4b0d      	ldr	r3, [pc, #52]	@ (800d04c <prvAddNewTaskToReadyList+0xcc>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00e      	beq.n	800d03a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d01c:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <prvAddNewTaskToReadyList+0xc8>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d026:	429a      	cmp	r2, r3
 800d028:	d207      	bcs.n	800d03a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d02a:	4b0c      	ldr	r3, [pc, #48]	@ (800d05c <prvAddNewTaskToReadyList+0xdc>)
 800d02c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	f3bf 8f4f 	dsb	sy
 800d036:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d03a:	bf00      	nop
 800d03c:	3708      	adds	r7, #8
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20001674 	.word	0x20001674
 800d048:	200011a0 	.word	0x200011a0
 800d04c:	20001680 	.word	0x20001680
 800d050:	20001690 	.word	0x20001690
 800d054:	2000167c 	.word	0x2000167c
 800d058:	200011a4 	.word	0x200011a4
 800d05c:	e000ed04 	.word	0xe000ed04

0800d060 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d068:	f001 fb86 	bl	800e778 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d102      	bne.n	800d078 <vTaskDelete+0x18>
 800d072:	4b2d      	ldr	r3, [pc, #180]	@ (800d128 <vTaskDelete+0xc8>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	e000      	b.n	800d07a <vTaskDelete+0x1a>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	3304      	adds	r3, #4
 800d080:	4618      	mov	r0, r3
 800d082:	f7fe fd21 	bl	800bac8 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d004      	beq.n	800d098 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	3318      	adds	r3, #24
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe fd18 	bl	800bac8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d098:	4b24      	ldr	r3, [pc, #144]	@ (800d12c <vTaskDelete+0xcc>)
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	3301      	adds	r3, #1
 800d09e:	4a23      	ldr	r2, [pc, #140]	@ (800d12c <vTaskDelete+0xcc>)
 800d0a0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d0a2:	4b21      	ldr	r3, [pc, #132]	@ (800d128 <vTaskDelete+0xc8>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	68fa      	ldr	r2, [r7, #12]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d10b      	bne.n	800d0c4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	3304      	adds	r3, #4
 800d0b0:	4619      	mov	r1, r3
 800d0b2:	481f      	ldr	r0, [pc, #124]	@ (800d130 <vTaskDelete+0xd0>)
 800d0b4:	f7fe fcab 	bl	800ba0e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d0b8:	4b1e      	ldr	r3, [pc, #120]	@ (800d134 <vTaskDelete+0xd4>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	3301      	adds	r3, #1
 800d0be:	4a1d      	ldr	r2, [pc, #116]	@ (800d134 <vTaskDelete+0xd4>)
 800d0c0:	6013      	str	r3, [r2, #0]
 800d0c2:	e009      	b.n	800d0d8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800d138 <vTaskDelete+0xd8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	3b01      	subs	r3, #1
 800d0ca:	4a1b      	ldr	r2, [pc, #108]	@ (800d138 <vTaskDelete+0xd8>)
 800d0cc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800d0ce:	68f8      	ldr	r0, [r7, #12]
 800d0d0:	f000 fc7e 	bl	800d9d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d0d4:	f000 fcb2 	bl	800da3c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800d0d8:	f001 fb80 	bl	800e7dc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d0dc:	4b17      	ldr	r3, [pc, #92]	@ (800d13c <vTaskDelete+0xdc>)
 800d0de:	681b      	ldr	r3, [r3, #0]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d01c      	beq.n	800d11e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 800d0e4:	4b10      	ldr	r3, [pc, #64]	@ (800d128 <vTaskDelete+0xc8>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68fa      	ldr	r2, [r7, #12]
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d117      	bne.n	800d11e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800d0ee:	4b14      	ldr	r3, [pc, #80]	@ (800d140 <vTaskDelete+0xe0>)
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <vTaskDelete+0xae>
	__asm volatile
 800d0f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0fa:	f383 8811 	msr	BASEPRI, r3
 800d0fe:	f3bf 8f6f 	isb	sy
 800d102:	f3bf 8f4f 	dsb	sy
 800d106:	60bb      	str	r3, [r7, #8]
}
 800d108:	bf00      	nop
 800d10a:	bf00      	nop
 800d10c:	e7fd      	b.n	800d10a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800d10e:	4b0d      	ldr	r3, [pc, #52]	@ (800d144 <vTaskDelete+0xe4>)
 800d110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d114:	601a      	str	r2, [r3, #0]
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d11e:	bf00      	nop
 800d120:	3710      	adds	r7, #16
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	200011a0 	.word	0x200011a0
 800d12c:	20001690 	.word	0x20001690
 800d130:	20001648 	.word	0x20001648
 800d134:	2000165c 	.word	0x2000165c
 800d138:	20001674 	.word	0x20001674
 800d13c:	20001680 	.word	0x20001680
 800d140:	2000169c 	.word	0x2000169c
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d150:	2300      	movs	r3, #0
 800d152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d018      	beq.n	800d18c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d15a:	4b14      	ldr	r3, [pc, #80]	@ (800d1ac <vTaskDelay+0x64>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00b      	beq.n	800d17a <vTaskDelay+0x32>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	60bb      	str	r3, [r7, #8]
}
 800d174:	bf00      	nop
 800d176:	bf00      	nop
 800d178:	e7fd      	b.n	800d176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d17a:	f000 f88b 	bl	800d294 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d17e:	2100      	movs	r1, #0
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f000 fe19 	bl	800ddb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d186:	f000 f893 	bl	800d2b0 <xTaskResumeAll>
 800d18a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d107      	bne.n	800d1a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d192:	4b07      	ldr	r3, [pc, #28]	@ (800d1b0 <vTaskDelay+0x68>)
 800d194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d198:	601a      	str	r2, [r3, #0]
 800d19a:	f3bf 8f4f 	dsb	sy
 800d19e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d1a2:	bf00      	nop
 800d1a4:	3710      	adds	r7, #16
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	bf00      	nop
 800d1ac:	2000169c 	.word	0x2000169c
 800d1b0:	e000ed04 	.word	0xe000ed04

0800d1b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b08a      	sub	sp, #40	@ 0x28
 800d1b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d1c2:	463a      	mov	r2, r7
 800d1c4:	1d39      	adds	r1, r7, #4
 800d1c6:	f107 0308 	add.w	r3, r7, #8
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fbbe 	bl	800b94c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d1d0:	6839      	ldr	r1, [r7, #0]
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	68ba      	ldr	r2, [r7, #8]
 800d1d6:	9202      	str	r2, [sp, #8]
 800d1d8:	9301      	str	r3, [sp, #4]
 800d1da:	2300      	movs	r3, #0
 800d1dc:	9300      	str	r3, [sp, #0]
 800d1de:	2300      	movs	r3, #0
 800d1e0:	460a      	mov	r2, r1
 800d1e2:	4924      	ldr	r1, [pc, #144]	@ (800d274 <vTaskStartScheduler+0xc0>)
 800d1e4:	4824      	ldr	r0, [pc, #144]	@ (800d278 <vTaskStartScheduler+0xc4>)
 800d1e6:	f7ff fd7d 	bl	800cce4 <xTaskCreateStatic>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	4a23      	ldr	r2, [pc, #140]	@ (800d27c <vTaskStartScheduler+0xc8>)
 800d1ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d1f0:	4b22      	ldr	r3, [pc, #136]	@ (800d27c <vTaskStartScheduler+0xc8>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	617b      	str	r3, [r7, #20]
 800d1fc:	e001      	b.n	800d202 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d1fe:	2300      	movs	r3, #0
 800d200:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	2b01      	cmp	r3, #1
 800d206:	d102      	bne.n	800d20e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d208:	f000 fe2a 	bl	800de60 <xTimerCreateTimerTask>
 800d20c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2b01      	cmp	r3, #1
 800d212:	d11b      	bne.n	800d24c <vTaskStartScheduler+0x98>
	__asm volatile
 800d214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	613b      	str	r3, [r7, #16]
}
 800d226:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d228:	4b15      	ldr	r3, [pc, #84]	@ (800d280 <vTaskStartScheduler+0xcc>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	3354      	adds	r3, #84	@ 0x54
 800d22e:	4a15      	ldr	r2, [pc, #84]	@ (800d284 <vTaskStartScheduler+0xd0>)
 800d230:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d232:	4b15      	ldr	r3, [pc, #84]	@ (800d288 <vTaskStartScheduler+0xd4>)
 800d234:	f04f 32ff 	mov.w	r2, #4294967295
 800d238:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d23a:	4b14      	ldr	r3, [pc, #80]	@ (800d28c <vTaskStartScheduler+0xd8>)
 800d23c:	2201      	movs	r2, #1
 800d23e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d240:	4b13      	ldr	r3, [pc, #76]	@ (800d290 <vTaskStartScheduler+0xdc>)
 800d242:	2200      	movs	r2, #0
 800d244:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d246:	f001 f9f3 	bl	800e630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d24a:	e00f      	b.n	800d26c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d252:	d10b      	bne.n	800d26c <vTaskStartScheduler+0xb8>
	__asm volatile
 800d254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	60fb      	str	r3, [r7, #12]
}
 800d266:	bf00      	nop
 800d268:	bf00      	nop
 800d26a:	e7fd      	b.n	800d268 <vTaskStartScheduler+0xb4>
}
 800d26c:	bf00      	nop
 800d26e:	3718      	adds	r7, #24
 800d270:	46bd      	mov	sp, r7
 800d272:	bd80      	pop	{r7, pc}
 800d274:	08012208 	.word	0x08012208
 800d278:	0800d8c5 	.word	0x0800d8c5
 800d27c:	20001698 	.word	0x20001698
 800d280:	200011a0 	.word	0x200011a0
 800d284:	20000024 	.word	0x20000024
 800d288:	20001694 	.word	0x20001694
 800d28c:	20001680 	.word	0x20001680
 800d290:	20001678 	.word	0x20001678

0800d294 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d294:	b480      	push	{r7}
 800d296:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d298:	4b04      	ldr	r3, [pc, #16]	@ (800d2ac <vTaskSuspendAll+0x18>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	3301      	adds	r3, #1
 800d29e:	4a03      	ldr	r2, [pc, #12]	@ (800d2ac <vTaskSuspendAll+0x18>)
 800d2a0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d2a2:	bf00      	nop
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr
 800d2ac:	2000169c 	.word	0x2000169c

0800d2b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d2be:	4b42      	ldr	r3, [pc, #264]	@ (800d3c8 <xTaskResumeAll+0x118>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d10b      	bne.n	800d2de <xTaskResumeAll+0x2e>
	__asm volatile
 800d2c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ca:	f383 8811 	msr	BASEPRI, r3
 800d2ce:	f3bf 8f6f 	isb	sy
 800d2d2:	f3bf 8f4f 	dsb	sy
 800d2d6:	603b      	str	r3, [r7, #0]
}
 800d2d8:	bf00      	nop
 800d2da:	bf00      	nop
 800d2dc:	e7fd      	b.n	800d2da <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d2de:	f001 fa4b 	bl	800e778 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d2e2:	4b39      	ldr	r3, [pc, #228]	@ (800d3c8 <xTaskResumeAll+0x118>)
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	3b01      	subs	r3, #1
 800d2e8:	4a37      	ldr	r2, [pc, #220]	@ (800d3c8 <xTaskResumeAll+0x118>)
 800d2ea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d2ec:	4b36      	ldr	r3, [pc, #216]	@ (800d3c8 <xTaskResumeAll+0x118>)
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d162      	bne.n	800d3ba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d2f4:	4b35      	ldr	r3, [pc, #212]	@ (800d3cc <xTaskResumeAll+0x11c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	d05e      	beq.n	800d3ba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2fc:	e02f      	b.n	800d35e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2fe:	4b34      	ldr	r3, [pc, #208]	@ (800d3d0 <xTaskResumeAll+0x120>)
 800d300:	68db      	ldr	r3, [r3, #12]
 800d302:	68db      	ldr	r3, [r3, #12]
 800d304:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3318      	adds	r3, #24
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7fe fbdc 	bl	800bac8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3304      	adds	r3, #4
 800d314:	4618      	mov	r0, r3
 800d316:	f7fe fbd7 	bl	800bac8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d31e:	4b2d      	ldr	r3, [pc, #180]	@ (800d3d4 <xTaskResumeAll+0x124>)
 800d320:	681b      	ldr	r3, [r3, #0]
 800d322:	429a      	cmp	r2, r3
 800d324:	d903      	bls.n	800d32e <xTaskResumeAll+0x7e>
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d32a:	4a2a      	ldr	r2, [pc, #168]	@ (800d3d4 <xTaskResumeAll+0x124>)
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d332:	4613      	mov	r3, r2
 800d334:	009b      	lsls	r3, r3, #2
 800d336:	4413      	add	r3, r2
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	4a27      	ldr	r2, [pc, #156]	@ (800d3d8 <xTaskResumeAll+0x128>)
 800d33c:	441a      	add	r2, r3
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3304      	adds	r3, #4
 800d342:	4619      	mov	r1, r3
 800d344:	4610      	mov	r0, r2
 800d346:	f7fe fb62 	bl	800ba0e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d34e:	4b23      	ldr	r3, [pc, #140]	@ (800d3dc <xTaskResumeAll+0x12c>)
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d354:	429a      	cmp	r2, r3
 800d356:	d302      	bcc.n	800d35e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d358:	4b21      	ldr	r3, [pc, #132]	@ (800d3e0 <xTaskResumeAll+0x130>)
 800d35a:	2201      	movs	r2, #1
 800d35c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d35e:	4b1c      	ldr	r3, [pc, #112]	@ (800d3d0 <xTaskResumeAll+0x120>)
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d1cb      	bne.n	800d2fe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d001      	beq.n	800d370 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d36c:	f000 fb66 	bl	800da3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d370:	4b1c      	ldr	r3, [pc, #112]	@ (800d3e4 <xTaskResumeAll+0x134>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d010      	beq.n	800d39e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d37c:	f000 f846 	bl	800d40c <xTaskIncrementTick>
 800d380:	4603      	mov	r3, r0
 800d382:	2b00      	cmp	r3, #0
 800d384:	d002      	beq.n	800d38c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d386:	4b16      	ldr	r3, [pc, #88]	@ (800d3e0 <xTaskResumeAll+0x130>)
 800d388:	2201      	movs	r2, #1
 800d38a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	3b01      	subs	r3, #1
 800d390:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d1f1      	bne.n	800d37c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d398:	4b12      	ldr	r3, [pc, #72]	@ (800d3e4 <xTaskResumeAll+0x134>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d39e:	4b10      	ldr	r3, [pc, #64]	@ (800d3e0 <xTaskResumeAll+0x130>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d009      	beq.n	800d3ba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d3a6:	2301      	movs	r3, #1
 800d3a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d3aa:	4b0f      	ldr	r3, [pc, #60]	@ (800d3e8 <xTaskResumeAll+0x138>)
 800d3ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d3b0:	601a      	str	r2, [r3, #0]
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d3ba:	f001 fa0f 	bl	800e7dc <vPortExitCritical>

	return xAlreadyYielded;
 800d3be:	68bb      	ldr	r3, [r7, #8]
}
 800d3c0:	4618      	mov	r0, r3
 800d3c2:	3710      	adds	r7, #16
 800d3c4:	46bd      	mov	sp, r7
 800d3c6:	bd80      	pop	{r7, pc}
 800d3c8:	2000169c 	.word	0x2000169c
 800d3cc:	20001674 	.word	0x20001674
 800d3d0:	20001634 	.word	0x20001634
 800d3d4:	2000167c 	.word	0x2000167c
 800d3d8:	200011a4 	.word	0x200011a4
 800d3dc:	200011a0 	.word	0x200011a0
 800d3e0:	20001688 	.word	0x20001688
 800d3e4:	20001684 	.word	0x20001684
 800d3e8:	e000ed04 	.word	0xe000ed04

0800d3ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	b083      	sub	sp, #12
 800d3f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d3f2:	4b05      	ldr	r3, [pc, #20]	@ (800d408 <xTaskGetTickCount+0x1c>)
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d3f8:	687b      	ldr	r3, [r7, #4]
}
 800d3fa:	4618      	mov	r0, r3
 800d3fc:	370c      	adds	r7, #12
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr
 800d406:	bf00      	nop
 800d408:	20001678 	.word	0x20001678

0800d40c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b086      	sub	sp, #24
 800d410:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d412:	2300      	movs	r3, #0
 800d414:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d416:	4b4f      	ldr	r3, [pc, #316]	@ (800d554 <xTaskIncrementTick+0x148>)
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f040 8090 	bne.w	800d540 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d420:	4b4d      	ldr	r3, [pc, #308]	@ (800d558 <xTaskIncrementTick+0x14c>)
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	3301      	adds	r3, #1
 800d426:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d428:	4a4b      	ldr	r2, [pc, #300]	@ (800d558 <xTaskIncrementTick+0x14c>)
 800d42a:	693b      	ldr	r3, [r7, #16]
 800d42c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d121      	bne.n	800d478 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d434:	4b49      	ldr	r3, [pc, #292]	@ (800d55c <xTaskIncrementTick+0x150>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00b      	beq.n	800d456 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	603b      	str	r3, [r7, #0]
}
 800d450:	bf00      	nop
 800d452:	bf00      	nop
 800d454:	e7fd      	b.n	800d452 <xTaskIncrementTick+0x46>
 800d456:	4b41      	ldr	r3, [pc, #260]	@ (800d55c <xTaskIncrementTick+0x150>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	60fb      	str	r3, [r7, #12]
 800d45c:	4b40      	ldr	r3, [pc, #256]	@ (800d560 <xTaskIncrementTick+0x154>)
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	4a3e      	ldr	r2, [pc, #248]	@ (800d55c <xTaskIncrementTick+0x150>)
 800d462:	6013      	str	r3, [r2, #0]
 800d464:	4a3e      	ldr	r2, [pc, #248]	@ (800d560 <xTaskIncrementTick+0x154>)
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	6013      	str	r3, [r2, #0]
 800d46a:	4b3e      	ldr	r3, [pc, #248]	@ (800d564 <xTaskIncrementTick+0x158>)
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	4a3c      	ldr	r2, [pc, #240]	@ (800d564 <xTaskIncrementTick+0x158>)
 800d472:	6013      	str	r3, [r2, #0]
 800d474:	f000 fae2 	bl	800da3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d478:	4b3b      	ldr	r3, [pc, #236]	@ (800d568 <xTaskIncrementTick+0x15c>)
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	429a      	cmp	r2, r3
 800d480:	d349      	bcc.n	800d516 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d482:	4b36      	ldr	r3, [pc, #216]	@ (800d55c <xTaskIncrementTick+0x150>)
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	681b      	ldr	r3, [r3, #0]
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d104      	bne.n	800d496 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d48c:	4b36      	ldr	r3, [pc, #216]	@ (800d568 <xTaskIncrementTick+0x15c>)
 800d48e:	f04f 32ff 	mov.w	r2, #4294967295
 800d492:	601a      	str	r2, [r3, #0]
					break;
 800d494:	e03f      	b.n	800d516 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d496:	4b31      	ldr	r3, [pc, #196]	@ (800d55c <xTaskIncrementTick+0x150>)
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	68db      	ldr	r3, [r3, #12]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	685b      	ldr	r3, [r3, #4]
 800d4a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d203      	bcs.n	800d4b6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d4ae:	4a2e      	ldr	r2, [pc, #184]	@ (800d568 <xTaskIncrementTick+0x15c>)
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d4b4:	e02f      	b.n	800d516 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	3304      	adds	r3, #4
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7fe fb04 	bl	800bac8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d4c0:	68bb      	ldr	r3, [r7, #8]
 800d4c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d004      	beq.n	800d4d2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	3318      	adds	r3, #24
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f7fe fafb 	bl	800bac8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d6:	4b25      	ldr	r3, [pc, #148]	@ (800d56c <xTaskIncrementTick+0x160>)
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d903      	bls.n	800d4e6 <xTaskIncrementTick+0xda>
 800d4de:	68bb      	ldr	r3, [r7, #8]
 800d4e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e2:	4a22      	ldr	r2, [pc, #136]	@ (800d56c <xTaskIncrementTick+0x160>)
 800d4e4:	6013      	str	r3, [r2, #0]
 800d4e6:	68bb      	ldr	r3, [r7, #8]
 800d4e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ea:	4613      	mov	r3, r2
 800d4ec:	009b      	lsls	r3, r3, #2
 800d4ee:	4413      	add	r3, r2
 800d4f0:	009b      	lsls	r3, r3, #2
 800d4f2:	4a1f      	ldr	r2, [pc, #124]	@ (800d570 <xTaskIncrementTick+0x164>)
 800d4f4:	441a      	add	r2, r3
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	3304      	adds	r3, #4
 800d4fa:	4619      	mov	r1, r3
 800d4fc:	4610      	mov	r0, r2
 800d4fe:	f7fe fa86 	bl	800ba0e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d506:	4b1b      	ldr	r3, [pc, #108]	@ (800d574 <xTaskIncrementTick+0x168>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d3b8      	bcc.n	800d482 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d510:	2301      	movs	r3, #1
 800d512:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d514:	e7b5      	b.n	800d482 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d516:	4b17      	ldr	r3, [pc, #92]	@ (800d574 <xTaskIncrementTick+0x168>)
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d51c:	4914      	ldr	r1, [pc, #80]	@ (800d570 <xTaskIncrementTick+0x164>)
 800d51e:	4613      	mov	r3, r2
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	4413      	add	r3, r2
 800d524:	009b      	lsls	r3, r3, #2
 800d526:	440b      	add	r3, r1
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	2b01      	cmp	r3, #1
 800d52c:	d901      	bls.n	800d532 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d52e:	2301      	movs	r3, #1
 800d530:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d532:	4b11      	ldr	r3, [pc, #68]	@ (800d578 <xTaskIncrementTick+0x16c>)
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d007      	beq.n	800d54a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d53a:	2301      	movs	r3, #1
 800d53c:	617b      	str	r3, [r7, #20]
 800d53e:	e004      	b.n	800d54a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d540:	4b0e      	ldr	r3, [pc, #56]	@ (800d57c <xTaskIncrementTick+0x170>)
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	3301      	adds	r3, #1
 800d546:	4a0d      	ldr	r2, [pc, #52]	@ (800d57c <xTaskIncrementTick+0x170>)
 800d548:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d54a:	697b      	ldr	r3, [r7, #20]
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3718      	adds	r7, #24
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}
 800d554:	2000169c 	.word	0x2000169c
 800d558:	20001678 	.word	0x20001678
 800d55c:	2000162c 	.word	0x2000162c
 800d560:	20001630 	.word	0x20001630
 800d564:	2000168c 	.word	0x2000168c
 800d568:	20001694 	.word	0x20001694
 800d56c:	2000167c 	.word	0x2000167c
 800d570:	200011a4 	.word	0x200011a4
 800d574:	200011a0 	.word	0x200011a0
 800d578:	20001688 	.word	0x20001688
 800d57c:	20001684 	.word	0x20001684

0800d580 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d580:	b480      	push	{r7}
 800d582:	b085      	sub	sp, #20
 800d584:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d586:	4b2b      	ldr	r3, [pc, #172]	@ (800d634 <vTaskSwitchContext+0xb4>)
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d003      	beq.n	800d596 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d58e:	4b2a      	ldr	r3, [pc, #168]	@ (800d638 <vTaskSwitchContext+0xb8>)
 800d590:	2201      	movs	r2, #1
 800d592:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d594:	e047      	b.n	800d626 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d596:	4b28      	ldr	r3, [pc, #160]	@ (800d638 <vTaskSwitchContext+0xb8>)
 800d598:	2200      	movs	r2, #0
 800d59a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d59c:	4b27      	ldr	r3, [pc, #156]	@ (800d63c <vTaskSwitchContext+0xbc>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	60fb      	str	r3, [r7, #12]
 800d5a2:	e011      	b.n	800d5c8 <vTaskSwitchContext+0x48>
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d10b      	bne.n	800d5c2 <vTaskSwitchContext+0x42>
	__asm volatile
 800d5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ae:	f383 8811 	msr	BASEPRI, r3
 800d5b2:	f3bf 8f6f 	isb	sy
 800d5b6:	f3bf 8f4f 	dsb	sy
 800d5ba:	607b      	str	r3, [r7, #4]
}
 800d5bc:	bf00      	nop
 800d5be:	bf00      	nop
 800d5c0:	e7fd      	b.n	800d5be <vTaskSwitchContext+0x3e>
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3b01      	subs	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
 800d5c8:	491d      	ldr	r1, [pc, #116]	@ (800d640 <vTaskSwitchContext+0xc0>)
 800d5ca:	68fa      	ldr	r2, [r7, #12]
 800d5cc:	4613      	mov	r3, r2
 800d5ce:	009b      	lsls	r3, r3, #2
 800d5d0:	4413      	add	r3, r2
 800d5d2:	009b      	lsls	r3, r3, #2
 800d5d4:	440b      	add	r3, r1
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d0e3      	beq.n	800d5a4 <vTaskSwitchContext+0x24>
 800d5dc:	68fa      	ldr	r2, [r7, #12]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	4a16      	ldr	r2, [pc, #88]	@ (800d640 <vTaskSwitchContext+0xc0>)
 800d5e8:	4413      	add	r3, r2
 800d5ea:	60bb      	str	r3, [r7, #8]
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	685a      	ldr	r2, [r3, #4]
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	605a      	str	r2, [r3, #4]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	685a      	ldr	r2, [r3, #4]
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d104      	bne.n	800d60c <vTaskSwitchContext+0x8c>
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	685b      	ldr	r3, [r3, #4]
 800d606:	685a      	ldr	r2, [r3, #4]
 800d608:	68bb      	ldr	r3, [r7, #8]
 800d60a:	605a      	str	r2, [r3, #4]
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	685b      	ldr	r3, [r3, #4]
 800d610:	68db      	ldr	r3, [r3, #12]
 800d612:	4a0c      	ldr	r2, [pc, #48]	@ (800d644 <vTaskSwitchContext+0xc4>)
 800d614:	6013      	str	r3, [r2, #0]
 800d616:	4a09      	ldr	r2, [pc, #36]	@ (800d63c <vTaskSwitchContext+0xbc>)
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d61c:	4b09      	ldr	r3, [pc, #36]	@ (800d644 <vTaskSwitchContext+0xc4>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	3354      	adds	r3, #84	@ 0x54
 800d622:	4a09      	ldr	r2, [pc, #36]	@ (800d648 <vTaskSwitchContext+0xc8>)
 800d624:	6013      	str	r3, [r2, #0]
}
 800d626:	bf00      	nop
 800d628:	3714      	adds	r7, #20
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr
 800d632:	bf00      	nop
 800d634:	2000169c 	.word	0x2000169c
 800d638:	20001688 	.word	0x20001688
 800d63c:	2000167c 	.word	0x2000167c
 800d640:	200011a4 	.word	0x200011a4
 800d644:	200011a0 	.word	0x200011a0
 800d648:	20000024 	.word	0x20000024

0800d64c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d10b      	bne.n	800d674 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d660:	f383 8811 	msr	BASEPRI, r3
 800d664:	f3bf 8f6f 	isb	sy
 800d668:	f3bf 8f4f 	dsb	sy
 800d66c:	60fb      	str	r3, [r7, #12]
}
 800d66e:	bf00      	nop
 800d670:	bf00      	nop
 800d672:	e7fd      	b.n	800d670 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d674:	4b07      	ldr	r3, [pc, #28]	@ (800d694 <vTaskPlaceOnEventList+0x48>)
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	3318      	adds	r3, #24
 800d67a:	4619      	mov	r1, r3
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f7fe f9ea 	bl	800ba56 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d682:	2101      	movs	r1, #1
 800d684:	6838      	ldr	r0, [r7, #0]
 800d686:	f000 fb97 	bl	800ddb8 <prvAddCurrentTaskToDelayedList>
}
 800d68a:	bf00      	nop
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	200011a0 	.word	0x200011a0

0800d698 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d10b      	bne.n	800d6c2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6ae:	f383 8811 	msr	BASEPRI, r3
 800d6b2:	f3bf 8f6f 	isb	sy
 800d6b6:	f3bf 8f4f 	dsb	sy
 800d6ba:	617b      	str	r3, [r7, #20]
}
 800d6bc:	bf00      	nop
 800d6be:	bf00      	nop
 800d6c0:	e7fd      	b.n	800d6be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d6ec <vTaskPlaceOnEventListRestricted+0x54>)
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	3318      	adds	r3, #24
 800d6c8:	4619      	mov	r1, r3
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f7fe f99f 	bl	800ba0e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d002      	beq.n	800d6dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d6dc:	6879      	ldr	r1, [r7, #4]
 800d6de:	68b8      	ldr	r0, [r7, #8]
 800d6e0:	f000 fb6a 	bl	800ddb8 <prvAddCurrentTaskToDelayedList>
	}
 800d6e4:	bf00      	nop
 800d6e6:	3718      	adds	r7, #24
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	200011a0 	.word	0x200011a0

0800d6f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b086      	sub	sp, #24
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	68db      	ldr	r3, [r3, #12]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d700:	693b      	ldr	r3, [r7, #16]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d10b      	bne.n	800d71e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	60fb      	str	r3, [r7, #12]
}
 800d718:	bf00      	nop
 800d71a:	bf00      	nop
 800d71c:	e7fd      	b.n	800d71a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	3318      	adds	r3, #24
 800d722:	4618      	mov	r0, r3
 800d724:	f7fe f9d0 	bl	800bac8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d728:	4b1d      	ldr	r3, [pc, #116]	@ (800d7a0 <xTaskRemoveFromEventList+0xb0>)
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d11d      	bne.n	800d76c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	3304      	adds	r3, #4
 800d734:	4618      	mov	r0, r3
 800d736:	f7fe f9c7 	bl	800bac8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d73a:	693b      	ldr	r3, [r7, #16]
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	4b19      	ldr	r3, [pc, #100]	@ (800d7a4 <xTaskRemoveFromEventList+0xb4>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	429a      	cmp	r2, r3
 800d744:	d903      	bls.n	800d74e <xTaskRemoveFromEventList+0x5e>
 800d746:	693b      	ldr	r3, [r7, #16]
 800d748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74a:	4a16      	ldr	r2, [pc, #88]	@ (800d7a4 <xTaskRemoveFromEventList+0xb4>)
 800d74c:	6013      	str	r3, [r2, #0]
 800d74e:	693b      	ldr	r3, [r7, #16]
 800d750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d752:	4613      	mov	r3, r2
 800d754:	009b      	lsls	r3, r3, #2
 800d756:	4413      	add	r3, r2
 800d758:	009b      	lsls	r3, r3, #2
 800d75a:	4a13      	ldr	r2, [pc, #76]	@ (800d7a8 <xTaskRemoveFromEventList+0xb8>)
 800d75c:	441a      	add	r2, r3
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	3304      	adds	r3, #4
 800d762:	4619      	mov	r1, r3
 800d764:	4610      	mov	r0, r2
 800d766:	f7fe f952 	bl	800ba0e <vListInsertEnd>
 800d76a:	e005      	b.n	800d778 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d76c:	693b      	ldr	r3, [r7, #16]
 800d76e:	3318      	adds	r3, #24
 800d770:	4619      	mov	r1, r3
 800d772:	480e      	ldr	r0, [pc, #56]	@ (800d7ac <xTaskRemoveFromEventList+0xbc>)
 800d774:	f7fe f94b 	bl	800ba0e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d778:	693b      	ldr	r3, [r7, #16]
 800d77a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d77c:	4b0c      	ldr	r3, [pc, #48]	@ (800d7b0 <xTaskRemoveFromEventList+0xc0>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d782:	429a      	cmp	r2, r3
 800d784:	d905      	bls.n	800d792 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d786:	2301      	movs	r3, #1
 800d788:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d78a:	4b0a      	ldr	r3, [pc, #40]	@ (800d7b4 <xTaskRemoveFromEventList+0xc4>)
 800d78c:	2201      	movs	r2, #1
 800d78e:	601a      	str	r2, [r3, #0]
 800d790:	e001      	b.n	800d796 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d792:	2300      	movs	r3, #0
 800d794:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d796:	697b      	ldr	r3, [r7, #20]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3718      	adds	r7, #24
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}
 800d7a0:	2000169c 	.word	0x2000169c
 800d7a4:	2000167c 	.word	0x2000167c
 800d7a8:	200011a4 	.word	0x200011a4
 800d7ac:	20001634 	.word	0x20001634
 800d7b0:	200011a0 	.word	0x200011a0
 800d7b4:	20001688 	.word	0x20001688

0800d7b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d7b8:	b480      	push	{r7}
 800d7ba:	b083      	sub	sp, #12
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d7c0:	4b06      	ldr	r3, [pc, #24]	@ (800d7dc <vTaskInternalSetTimeOutState+0x24>)
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d7c8:	4b05      	ldr	r3, [pc, #20]	@ (800d7e0 <vTaskInternalSetTimeOutState+0x28>)
 800d7ca:	681a      	ldr	r2, [r3, #0]
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	605a      	str	r2, [r3, #4]
}
 800d7d0:	bf00      	nop
 800d7d2:	370c      	adds	r7, #12
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	2000168c 	.word	0x2000168c
 800d7e0:	20001678 	.word	0x20001678

0800d7e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b088      	sub	sp, #32
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d10b      	bne.n	800d80c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7f8:	f383 8811 	msr	BASEPRI, r3
 800d7fc:	f3bf 8f6f 	isb	sy
 800d800:	f3bf 8f4f 	dsb	sy
 800d804:	613b      	str	r3, [r7, #16]
}
 800d806:	bf00      	nop
 800d808:	bf00      	nop
 800d80a:	e7fd      	b.n	800d808 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d10b      	bne.n	800d82a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d816:	f383 8811 	msr	BASEPRI, r3
 800d81a:	f3bf 8f6f 	isb	sy
 800d81e:	f3bf 8f4f 	dsb	sy
 800d822:	60fb      	str	r3, [r7, #12]
}
 800d824:	bf00      	nop
 800d826:	bf00      	nop
 800d828:	e7fd      	b.n	800d826 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d82a:	f000 ffa5 	bl	800e778 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d82e:	4b1d      	ldr	r3, [pc, #116]	@ (800d8a4 <xTaskCheckForTimeOut+0xc0>)
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	685b      	ldr	r3, [r3, #4]
 800d838:	69ba      	ldr	r2, [r7, #24]
 800d83a:	1ad3      	subs	r3, r2, r3
 800d83c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d846:	d102      	bne.n	800d84e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d848:	2300      	movs	r3, #0
 800d84a:	61fb      	str	r3, [r7, #28]
 800d84c:	e023      	b.n	800d896 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681a      	ldr	r2, [r3, #0]
 800d852:	4b15      	ldr	r3, [pc, #84]	@ (800d8a8 <xTaskCheckForTimeOut+0xc4>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	429a      	cmp	r2, r3
 800d858:	d007      	beq.n	800d86a <xTaskCheckForTimeOut+0x86>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	685b      	ldr	r3, [r3, #4]
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	429a      	cmp	r2, r3
 800d862:	d302      	bcc.n	800d86a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d864:	2301      	movs	r3, #1
 800d866:	61fb      	str	r3, [r7, #28]
 800d868:	e015      	b.n	800d896 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	429a      	cmp	r2, r3
 800d872:	d20b      	bcs.n	800d88c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	1ad2      	subs	r2, r2, r3
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7ff ff99 	bl	800d7b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d886:	2300      	movs	r3, #0
 800d888:	61fb      	str	r3, [r7, #28]
 800d88a:	e004      	b.n	800d896 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	2200      	movs	r2, #0
 800d890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d892:	2301      	movs	r3, #1
 800d894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d896:	f000 ffa1 	bl	800e7dc <vPortExitCritical>

	return xReturn;
 800d89a:	69fb      	ldr	r3, [r7, #28]
}
 800d89c:	4618      	mov	r0, r3
 800d89e:	3720      	adds	r7, #32
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}
 800d8a4:	20001678 	.word	0x20001678
 800d8a8:	2000168c 	.word	0x2000168c

0800d8ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d8b0:	4b03      	ldr	r3, [pc, #12]	@ (800d8c0 <vTaskMissedYield+0x14>)
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	601a      	str	r2, [r3, #0]
}
 800d8b6:	bf00      	nop
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr
 800d8c0:	20001688 	.word	0x20001688

0800d8c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d8cc:	f000 f852 	bl	800d974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d8d0:	4b06      	ldr	r3, [pc, #24]	@ (800d8ec <prvIdleTask+0x28>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b01      	cmp	r3, #1
 800d8d6:	d9f9      	bls.n	800d8cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d8d8:	4b05      	ldr	r3, [pc, #20]	@ (800d8f0 <prvIdleTask+0x2c>)
 800d8da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8de:	601a      	str	r2, [r3, #0]
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d8e8:	e7f0      	b.n	800d8cc <prvIdleTask+0x8>
 800d8ea:	bf00      	nop
 800d8ec:	200011a4 	.word	0x200011a4
 800d8f0:	e000ed04 	.word	0xe000ed04

0800d8f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d8f4:	b580      	push	{r7, lr}
 800d8f6:	b082      	sub	sp, #8
 800d8f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	607b      	str	r3, [r7, #4]
 800d8fe:	e00c      	b.n	800d91a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d900:	687a      	ldr	r2, [r7, #4]
 800d902:	4613      	mov	r3, r2
 800d904:	009b      	lsls	r3, r3, #2
 800d906:	4413      	add	r3, r2
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	4a12      	ldr	r2, [pc, #72]	@ (800d954 <prvInitialiseTaskLists+0x60>)
 800d90c:	4413      	add	r3, r2
 800d90e:	4618      	mov	r0, r3
 800d910:	f7fe f850 	bl	800b9b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	3301      	adds	r3, #1
 800d918:	607b      	str	r3, [r7, #4]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	2b37      	cmp	r3, #55	@ 0x37
 800d91e:	d9ef      	bls.n	800d900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d920:	480d      	ldr	r0, [pc, #52]	@ (800d958 <prvInitialiseTaskLists+0x64>)
 800d922:	f7fe f847 	bl	800b9b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d926:	480d      	ldr	r0, [pc, #52]	@ (800d95c <prvInitialiseTaskLists+0x68>)
 800d928:	f7fe f844 	bl	800b9b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d92c:	480c      	ldr	r0, [pc, #48]	@ (800d960 <prvInitialiseTaskLists+0x6c>)
 800d92e:	f7fe f841 	bl	800b9b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d932:	480c      	ldr	r0, [pc, #48]	@ (800d964 <prvInitialiseTaskLists+0x70>)
 800d934:	f7fe f83e 	bl	800b9b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d938:	480b      	ldr	r0, [pc, #44]	@ (800d968 <prvInitialiseTaskLists+0x74>)
 800d93a:	f7fe f83b 	bl	800b9b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d93e:	4b0b      	ldr	r3, [pc, #44]	@ (800d96c <prvInitialiseTaskLists+0x78>)
 800d940:	4a05      	ldr	r2, [pc, #20]	@ (800d958 <prvInitialiseTaskLists+0x64>)
 800d942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d944:	4b0a      	ldr	r3, [pc, #40]	@ (800d970 <prvInitialiseTaskLists+0x7c>)
 800d946:	4a05      	ldr	r2, [pc, #20]	@ (800d95c <prvInitialiseTaskLists+0x68>)
 800d948:	601a      	str	r2, [r3, #0]
}
 800d94a:	bf00      	nop
 800d94c:	3708      	adds	r7, #8
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}
 800d952:	bf00      	nop
 800d954:	200011a4 	.word	0x200011a4
 800d958:	20001604 	.word	0x20001604
 800d95c:	20001618 	.word	0x20001618
 800d960:	20001634 	.word	0x20001634
 800d964:	20001648 	.word	0x20001648
 800d968:	20001660 	.word	0x20001660
 800d96c:	2000162c 	.word	0x2000162c
 800d970:	20001630 	.word	0x20001630

0800d974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b082      	sub	sp, #8
 800d978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d97a:	e019      	b.n	800d9b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d97c:	f000 fefc 	bl	800e778 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d980:	4b10      	ldr	r3, [pc, #64]	@ (800d9c4 <prvCheckTasksWaitingTermination+0x50>)
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	68db      	ldr	r3, [r3, #12]
 800d986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	3304      	adds	r3, #4
 800d98c:	4618      	mov	r0, r3
 800d98e:	f7fe f89b 	bl	800bac8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d992:	4b0d      	ldr	r3, [pc, #52]	@ (800d9c8 <prvCheckTasksWaitingTermination+0x54>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	3b01      	subs	r3, #1
 800d998:	4a0b      	ldr	r2, [pc, #44]	@ (800d9c8 <prvCheckTasksWaitingTermination+0x54>)
 800d99a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d99c:	4b0b      	ldr	r3, [pc, #44]	@ (800d9cc <prvCheckTasksWaitingTermination+0x58>)
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	3b01      	subs	r3, #1
 800d9a2:	4a0a      	ldr	r2, [pc, #40]	@ (800d9cc <prvCheckTasksWaitingTermination+0x58>)
 800d9a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d9a6:	f000 ff19 	bl	800e7dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d9aa:	6878      	ldr	r0, [r7, #4]
 800d9ac:	f000 f810 	bl	800d9d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d9b0:	4b06      	ldr	r3, [pc, #24]	@ (800d9cc <prvCheckTasksWaitingTermination+0x58>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e1      	bne.n	800d97c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d9b8:	bf00      	nop
 800d9ba:	bf00      	nop
 800d9bc:	3708      	adds	r7, #8
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	20001648 	.word	0x20001648
 800d9c8:	20001674 	.word	0x20001674
 800d9cc:	2000165c 	.word	0x2000165c

0800d9d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b084      	sub	sp, #16
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	3354      	adds	r3, #84	@ 0x54
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 f8c9 	bl	800fb74 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d108      	bne.n	800d9fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	f001 f8b1 	bl	800eb58 <vPortFree>
				vPortFree( pxTCB );
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f001 f8ae 	bl	800eb58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d9fc:	e019      	b.n	800da32 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da04:	2b01      	cmp	r3, #1
 800da06:	d103      	bne.n	800da10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f001 f8a5 	bl	800eb58 <vPortFree>
	}
 800da0e:	e010      	b.n	800da32 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800da16:	2b02      	cmp	r3, #2
 800da18:	d00b      	beq.n	800da32 <prvDeleteTCB+0x62>
	__asm volatile
 800da1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da1e:	f383 8811 	msr	BASEPRI, r3
 800da22:	f3bf 8f6f 	isb	sy
 800da26:	f3bf 8f4f 	dsb	sy
 800da2a:	60fb      	str	r3, [r7, #12]
}
 800da2c:	bf00      	nop
 800da2e:	bf00      	nop
 800da30:	e7fd      	b.n	800da2e <prvDeleteTCB+0x5e>
	}
 800da32:	bf00      	nop
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800da3c:	b480      	push	{r7}
 800da3e:	b083      	sub	sp, #12
 800da40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800da42:	4b0c      	ldr	r3, [pc, #48]	@ (800da74 <prvResetNextTaskUnblockTime+0x38>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d104      	bne.n	800da56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800da4c:	4b0a      	ldr	r3, [pc, #40]	@ (800da78 <prvResetNextTaskUnblockTime+0x3c>)
 800da4e:	f04f 32ff 	mov.w	r2, #4294967295
 800da52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800da54:	e008      	b.n	800da68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800da56:	4b07      	ldr	r3, [pc, #28]	@ (800da74 <prvResetNextTaskUnblockTime+0x38>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	68db      	ldr	r3, [r3, #12]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	4a04      	ldr	r2, [pc, #16]	@ (800da78 <prvResetNextTaskUnblockTime+0x3c>)
 800da66:	6013      	str	r3, [r2, #0]
}
 800da68:	bf00      	nop
 800da6a:	370c      	adds	r7, #12
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr
 800da74:	2000162c 	.word	0x2000162c
 800da78:	20001694 	.word	0x20001694

0800da7c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800da7c:	b480      	push	{r7}
 800da7e:	b083      	sub	sp, #12
 800da80:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800da82:	4b05      	ldr	r3, [pc, #20]	@ (800da98 <xTaskGetCurrentTaskHandle+0x1c>)
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	607b      	str	r3, [r7, #4]

		return xReturn;
 800da88:	687b      	ldr	r3, [r7, #4]
	}
 800da8a:	4618      	mov	r0, r3
 800da8c:	370c      	adds	r7, #12
 800da8e:	46bd      	mov	sp, r7
 800da90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da94:	4770      	bx	lr
 800da96:	bf00      	nop
 800da98:	200011a0 	.word	0x200011a0

0800da9c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800da9c:	b480      	push	{r7}
 800da9e:	b083      	sub	sp, #12
 800daa0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800daa2:	4b0b      	ldr	r3, [pc, #44]	@ (800dad0 <xTaskGetSchedulerState+0x34>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d102      	bne.n	800dab0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800daaa:	2301      	movs	r3, #1
 800daac:	607b      	str	r3, [r7, #4]
 800daae:	e008      	b.n	800dac2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dab0:	4b08      	ldr	r3, [pc, #32]	@ (800dad4 <xTaskGetSchedulerState+0x38>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d102      	bne.n	800dabe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dab8:	2302      	movs	r3, #2
 800daba:	607b      	str	r3, [r7, #4]
 800dabc:	e001      	b.n	800dac2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800dabe:	2300      	movs	r3, #0
 800dac0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dac2:	687b      	ldr	r3, [r7, #4]
	}
 800dac4:	4618      	mov	r0, r3
 800dac6:	370c      	adds	r7, #12
 800dac8:	46bd      	mov	sp, r7
 800daca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dace:	4770      	bx	lr
 800dad0:	20001680 	.word	0x20001680
 800dad4:	2000169c 	.word	0x2000169c

0800dad8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800dae4:	2300      	movs	r3, #0
 800dae6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	2b00      	cmp	r3, #0
 800daec:	d051      	beq.n	800db92 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800daf2:	4b2a      	ldr	r3, [pc, #168]	@ (800db9c <xTaskPriorityInherit+0xc4>)
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800daf8:	429a      	cmp	r2, r3
 800dafa:	d241      	bcs.n	800db80 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dafc:	68bb      	ldr	r3, [r7, #8]
 800dafe:	699b      	ldr	r3, [r3, #24]
 800db00:	2b00      	cmp	r3, #0
 800db02:	db06      	blt.n	800db12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db04:	4b25      	ldr	r3, [pc, #148]	@ (800db9c <xTaskPriorityInherit+0xc4>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800db0e:	68bb      	ldr	r3, [r7, #8]
 800db10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800db12:	68bb      	ldr	r3, [r7, #8]
 800db14:	6959      	ldr	r1, [r3, #20]
 800db16:	68bb      	ldr	r3, [r7, #8]
 800db18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db1a:	4613      	mov	r3, r2
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	4413      	add	r3, r2
 800db20:	009b      	lsls	r3, r3, #2
 800db22:	4a1f      	ldr	r2, [pc, #124]	@ (800dba0 <xTaskPriorityInherit+0xc8>)
 800db24:	4413      	add	r3, r2
 800db26:	4299      	cmp	r1, r3
 800db28:	d122      	bne.n	800db70 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db2a:	68bb      	ldr	r3, [r7, #8]
 800db2c:	3304      	adds	r3, #4
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fd ffca 	bl	800bac8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db34:	4b19      	ldr	r3, [pc, #100]	@ (800db9c <xTaskPriorityInherit+0xc4>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800db3e:	68bb      	ldr	r3, [r7, #8]
 800db40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db42:	4b18      	ldr	r3, [pc, #96]	@ (800dba4 <xTaskPriorityInherit+0xcc>)
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	429a      	cmp	r2, r3
 800db48:	d903      	bls.n	800db52 <xTaskPriorityInherit+0x7a>
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db4e:	4a15      	ldr	r2, [pc, #84]	@ (800dba4 <xTaskPriorityInherit+0xcc>)
 800db50:	6013      	str	r3, [r2, #0]
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db56:	4613      	mov	r3, r2
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	4413      	add	r3, r2
 800db5c:	009b      	lsls	r3, r3, #2
 800db5e:	4a10      	ldr	r2, [pc, #64]	@ (800dba0 <xTaskPriorityInherit+0xc8>)
 800db60:	441a      	add	r2, r3
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	3304      	adds	r3, #4
 800db66:	4619      	mov	r1, r3
 800db68:	4610      	mov	r0, r2
 800db6a:	f7fd ff50 	bl	800ba0e <vListInsertEnd>
 800db6e:	e004      	b.n	800db7a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800db70:	4b0a      	ldr	r3, [pc, #40]	@ (800db9c <xTaskPriorityInherit+0xc4>)
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db76:	68bb      	ldr	r3, [r7, #8]
 800db78:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800db7a:	2301      	movs	r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]
 800db7e:	e008      	b.n	800db92 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800db84:	4b05      	ldr	r3, [pc, #20]	@ (800db9c <xTaskPriorityInherit+0xc4>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d201      	bcs.n	800db92 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800db8e:	2301      	movs	r3, #1
 800db90:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800db92:	68fb      	ldr	r3, [r7, #12]
	}
 800db94:	4618      	mov	r0, r3
 800db96:	3710      	adds	r7, #16
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	200011a0 	.word	0x200011a0
 800dba0:	200011a4 	.word	0x200011a4
 800dba4:	2000167c 	.word	0x2000167c

0800dba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b086      	sub	sp, #24
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d058      	beq.n	800dc70 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dbbe:	4b2f      	ldr	r3, [pc, #188]	@ (800dc7c <xTaskPriorityDisinherit+0xd4>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	693a      	ldr	r2, [r7, #16]
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	d00b      	beq.n	800dbe0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dbc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbcc:	f383 8811 	msr	BASEPRI, r3
 800dbd0:	f3bf 8f6f 	isb	sy
 800dbd4:	f3bf 8f4f 	dsb	sy
 800dbd8:	60fb      	str	r3, [r7, #12]
}
 800dbda:	bf00      	nop
 800dbdc:	bf00      	nop
 800dbde:	e7fd      	b.n	800dbdc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dbe0:	693b      	ldr	r3, [r7, #16]
 800dbe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10b      	bne.n	800dc00 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dbe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbec:	f383 8811 	msr	BASEPRI, r3
 800dbf0:	f3bf 8f6f 	isb	sy
 800dbf4:	f3bf 8f4f 	dsb	sy
 800dbf8:	60bb      	str	r3, [r7, #8]
}
 800dbfa:	bf00      	nop
 800dbfc:	bf00      	nop
 800dbfe:	e7fd      	b.n	800dbfc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc04:	1e5a      	subs	r2, r3, #1
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d02c      	beq.n	800dc70 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d128      	bne.n	800dc70 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	3304      	adds	r3, #4
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd ff50 	bl	800bac8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800dc2c:	693b      	ldr	r3, [r7, #16]
 800dc2e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dc38:	693b      	ldr	r3, [r7, #16]
 800dc3a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc40:	4b0f      	ldr	r3, [pc, #60]	@ (800dc80 <xTaskPriorityDisinherit+0xd8>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d903      	bls.n	800dc50 <xTaskPriorityDisinherit+0xa8>
 800dc48:	693b      	ldr	r3, [r7, #16]
 800dc4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc4c:	4a0c      	ldr	r2, [pc, #48]	@ (800dc80 <xTaskPriorityDisinherit+0xd8>)
 800dc4e:	6013      	str	r3, [r2, #0]
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dc54:	4613      	mov	r3, r2
 800dc56:	009b      	lsls	r3, r3, #2
 800dc58:	4413      	add	r3, r2
 800dc5a:	009b      	lsls	r3, r3, #2
 800dc5c:	4a09      	ldr	r2, [pc, #36]	@ (800dc84 <xTaskPriorityDisinherit+0xdc>)
 800dc5e:	441a      	add	r2, r3
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	3304      	adds	r3, #4
 800dc64:	4619      	mov	r1, r3
 800dc66:	4610      	mov	r0, r2
 800dc68:	f7fd fed1 	bl	800ba0e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dc6c:	2301      	movs	r3, #1
 800dc6e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dc70:	697b      	ldr	r3, [r7, #20]
	}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3718      	adds	r7, #24
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	200011a0 	.word	0x200011a0
 800dc80:	2000167c 	.word	0x2000167c
 800dc84:	200011a4 	.word	0x200011a4

0800dc88 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b088      	sub	sp, #32
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800dc96:	2301      	movs	r3, #1
 800dc98:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d06c      	beq.n	800dd7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d10b      	bne.n	800dcc0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800dca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcac:	f383 8811 	msr	BASEPRI, r3
 800dcb0:	f3bf 8f6f 	isb	sy
 800dcb4:	f3bf 8f4f 	dsb	sy
 800dcb8:	60fb      	str	r3, [r7, #12]
}
 800dcba:	bf00      	nop
 800dcbc:	bf00      	nop
 800dcbe:	e7fd      	b.n	800dcbc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcc4:	683a      	ldr	r2, [r7, #0]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d902      	bls.n	800dcd0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	61fb      	str	r3, [r7, #28]
 800dcce:	e002      	b.n	800dcd6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800dcd0:	69bb      	ldr	r3, [r7, #24]
 800dcd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dcd4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dcd6:	69bb      	ldr	r3, [r7, #24]
 800dcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcda:	69fa      	ldr	r2, [r7, #28]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d04c      	beq.n	800dd7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dce0:	69bb      	ldr	r3, [r7, #24]
 800dce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dce4:	697a      	ldr	r2, [r7, #20]
 800dce6:	429a      	cmp	r2, r3
 800dce8:	d147      	bne.n	800dd7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800dcea:	4b26      	ldr	r3, [pc, #152]	@ (800dd84 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	69ba      	ldr	r2, [r7, #24]
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d10b      	bne.n	800dd0c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800dcf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcf8:	f383 8811 	msr	BASEPRI, r3
 800dcfc:	f3bf 8f6f 	isb	sy
 800dd00:	f3bf 8f4f 	dsb	sy
 800dd04:	60bb      	str	r3, [r7, #8]
}
 800dd06:	bf00      	nop
 800dd08:	bf00      	nop
 800dd0a:	e7fd      	b.n	800dd08 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800dd0c:	69bb      	ldr	r3, [r7, #24]
 800dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd10:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800dd12:	69bb      	ldr	r3, [r7, #24]
 800dd14:	69fa      	ldr	r2, [r7, #28]
 800dd16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	699b      	ldr	r3, [r3, #24]
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	db04      	blt.n	800dd2a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800dd26:	69bb      	ldr	r3, [r7, #24]
 800dd28:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dd2a:	69bb      	ldr	r3, [r7, #24]
 800dd2c:	6959      	ldr	r1, [r3, #20]
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	4613      	mov	r3, r2
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	4413      	add	r3, r2
 800dd36:	009b      	lsls	r3, r3, #2
 800dd38:	4a13      	ldr	r2, [pc, #76]	@ (800dd88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd3a:	4413      	add	r3, r2
 800dd3c:	4299      	cmp	r1, r3
 800dd3e:	d11c      	bne.n	800dd7a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	3304      	adds	r3, #4
 800dd44:	4618      	mov	r0, r3
 800dd46:	f7fd febf 	bl	800bac8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800dd4a:	69bb      	ldr	r3, [r7, #24]
 800dd4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd4e:	4b0f      	ldr	r3, [pc, #60]	@ (800dd8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d903      	bls.n	800dd5e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd5a:	4a0c      	ldr	r2, [pc, #48]	@ (800dd8c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800dd5c:	6013      	str	r3, [r2, #0]
 800dd5e:	69bb      	ldr	r3, [r7, #24]
 800dd60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd62:	4613      	mov	r3, r2
 800dd64:	009b      	lsls	r3, r3, #2
 800dd66:	4413      	add	r3, r2
 800dd68:	009b      	lsls	r3, r3, #2
 800dd6a:	4a07      	ldr	r2, [pc, #28]	@ (800dd88 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800dd6c:	441a      	add	r2, r3
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	3304      	adds	r3, #4
 800dd72:	4619      	mov	r1, r3
 800dd74:	4610      	mov	r0, r2
 800dd76:	f7fd fe4a 	bl	800ba0e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dd7a:	bf00      	nop
 800dd7c:	3720      	adds	r7, #32
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
 800dd82:	bf00      	nop
 800dd84:	200011a0 	.word	0x200011a0
 800dd88:	200011a4 	.word	0x200011a4
 800dd8c:	2000167c 	.word	0x2000167c

0800dd90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800dd90:	b480      	push	{r7}
 800dd92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800dd94:	4b07      	ldr	r3, [pc, #28]	@ (800ddb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d004      	beq.n	800dda6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800dd9c:	4b05      	ldr	r3, [pc, #20]	@ (800ddb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dda2:	3201      	adds	r2, #1
 800dda4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800dda6:	4b03      	ldr	r3, [pc, #12]	@ (800ddb4 <pvTaskIncrementMutexHeldCount+0x24>)
 800dda8:	681b      	ldr	r3, [r3, #0]
	}
 800ddaa:	4618      	mov	r0, r3
 800ddac:	46bd      	mov	sp, r7
 800ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb2:	4770      	bx	lr
 800ddb4:	200011a0 	.word	0x200011a0

0800ddb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddb8:	b580      	push	{r7, lr}
 800ddba:	b084      	sub	sp, #16
 800ddbc:	af00      	add	r7, sp, #0
 800ddbe:	6078      	str	r0, [r7, #4]
 800ddc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddc2:	4b21      	ldr	r3, [pc, #132]	@ (800de48 <prvAddCurrentTaskToDelayedList+0x90>)
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc8:	4b20      	ldr	r3, [pc, #128]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x94>)
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	3304      	adds	r3, #4
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7fd fe7a 	bl	800bac8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddda:	d10a      	bne.n	800ddf2 <prvAddCurrentTaskToDelayedList+0x3a>
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d007      	beq.n	800ddf2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde2:	4b1a      	ldr	r3, [pc, #104]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x94>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	3304      	adds	r3, #4
 800dde8:	4619      	mov	r1, r3
 800ddea:	4819      	ldr	r0, [pc, #100]	@ (800de50 <prvAddCurrentTaskToDelayedList+0x98>)
 800ddec:	f7fd fe0f 	bl	800ba0e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddf0:	e026      	b.n	800de40 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ddf2:	68fa      	ldr	r2, [r7, #12]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ddfa:	4b14      	ldr	r3, [pc, #80]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x94>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800de02:	68ba      	ldr	r2, [r7, #8]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	429a      	cmp	r2, r3
 800de08:	d209      	bcs.n	800de1e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de0a:	4b12      	ldr	r3, [pc, #72]	@ (800de54 <prvAddCurrentTaskToDelayedList+0x9c>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	4b0f      	ldr	r3, [pc, #60]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x94>)
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	3304      	adds	r3, #4
 800de14:	4619      	mov	r1, r3
 800de16:	4610      	mov	r0, r2
 800de18:	f7fd fe1d 	bl	800ba56 <vListInsert>
}
 800de1c:	e010      	b.n	800de40 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800de1e:	4b0e      	ldr	r3, [pc, #56]	@ (800de58 <prvAddCurrentTaskToDelayedList+0xa0>)
 800de20:	681a      	ldr	r2, [r3, #0]
 800de22:	4b0a      	ldr	r3, [pc, #40]	@ (800de4c <prvAddCurrentTaskToDelayedList+0x94>)
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	3304      	adds	r3, #4
 800de28:	4619      	mov	r1, r3
 800de2a:	4610      	mov	r0, r2
 800de2c:	f7fd fe13 	bl	800ba56 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de30:	4b0a      	ldr	r3, [pc, #40]	@ (800de5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68ba      	ldr	r2, [r7, #8]
 800de36:	429a      	cmp	r2, r3
 800de38:	d202      	bcs.n	800de40 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800de3a:	4a08      	ldr	r2, [pc, #32]	@ (800de5c <prvAddCurrentTaskToDelayedList+0xa4>)
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	6013      	str	r3, [r2, #0]
}
 800de40:	bf00      	nop
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}
 800de48:	20001678 	.word	0x20001678
 800de4c:	200011a0 	.word	0x200011a0
 800de50:	20001660 	.word	0x20001660
 800de54:	20001630 	.word	0x20001630
 800de58:	2000162c 	.word	0x2000162c
 800de5c:	20001694 	.word	0x20001694

0800de60 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b08a      	sub	sp, #40	@ 0x28
 800de64:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800de66:	2300      	movs	r3, #0
 800de68:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800de6a:	f000 fb13 	bl	800e494 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800de6e:	4b1d      	ldr	r3, [pc, #116]	@ (800dee4 <xTimerCreateTimerTask+0x84>)
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d021      	beq.n	800deba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800de76:	2300      	movs	r3, #0
 800de78:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800de7a:	2300      	movs	r3, #0
 800de7c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800de7e:	1d3a      	adds	r2, r7, #4
 800de80:	f107 0108 	add.w	r1, r7, #8
 800de84:	f107 030c 	add.w	r3, r7, #12
 800de88:	4618      	mov	r0, r3
 800de8a:	f7fd fd79 	bl	800b980 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	68fa      	ldr	r2, [r7, #12]
 800de94:	9202      	str	r2, [sp, #8]
 800de96:	9301      	str	r3, [sp, #4]
 800de98:	2302      	movs	r3, #2
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	2300      	movs	r3, #0
 800de9e:	460a      	mov	r2, r1
 800dea0:	4911      	ldr	r1, [pc, #68]	@ (800dee8 <xTimerCreateTimerTask+0x88>)
 800dea2:	4812      	ldr	r0, [pc, #72]	@ (800deec <xTimerCreateTimerTask+0x8c>)
 800dea4:	f7fe ff1e 	bl	800cce4 <xTaskCreateStatic>
 800dea8:	4603      	mov	r3, r0
 800deaa:	4a11      	ldr	r2, [pc, #68]	@ (800def0 <xTimerCreateTimerTask+0x90>)
 800deac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800deae:	4b10      	ldr	r3, [pc, #64]	@ (800def0 <xTimerCreateTimerTask+0x90>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800deb6:	2301      	movs	r3, #1
 800deb8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d10b      	bne.n	800ded8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dec4:	f383 8811 	msr	BASEPRI, r3
 800dec8:	f3bf 8f6f 	isb	sy
 800decc:	f3bf 8f4f 	dsb	sy
 800ded0:	613b      	str	r3, [r7, #16]
}
 800ded2:	bf00      	nop
 800ded4:	bf00      	nop
 800ded6:	e7fd      	b.n	800ded4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800ded8:	697b      	ldr	r3, [r7, #20]
}
 800deda:	4618      	mov	r0, r3
 800dedc:	3718      	adds	r7, #24
 800dede:	46bd      	mov	sp, r7
 800dee0:	bd80      	pop	{r7, pc}
 800dee2:	bf00      	nop
 800dee4:	200016d0 	.word	0x200016d0
 800dee8:	08012210 	.word	0x08012210
 800deec:	0800e02d 	.word	0x0800e02d
 800def0:	200016d4 	.word	0x200016d4

0800def4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b08a      	sub	sp, #40	@ 0x28
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
 800df00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800df02:	2300      	movs	r3, #0
 800df04:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d10b      	bne.n	800df24 <xTimerGenericCommand+0x30>
	__asm volatile
 800df0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df10:	f383 8811 	msr	BASEPRI, r3
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	f3bf 8f4f 	dsb	sy
 800df1c:	623b      	str	r3, [r7, #32]
}
 800df1e:	bf00      	nop
 800df20:	bf00      	nop
 800df22:	e7fd      	b.n	800df20 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800df24:	4b19      	ldr	r3, [pc, #100]	@ (800df8c <xTimerGenericCommand+0x98>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d02a      	beq.n	800df82 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800df38:	68bb      	ldr	r3, [r7, #8]
 800df3a:	2b05      	cmp	r3, #5
 800df3c:	dc18      	bgt.n	800df70 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800df3e:	f7ff fdad 	bl	800da9c <xTaskGetSchedulerState>
 800df42:	4603      	mov	r3, r0
 800df44:	2b02      	cmp	r3, #2
 800df46:	d109      	bne.n	800df5c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800df48:	4b10      	ldr	r3, [pc, #64]	@ (800df8c <xTimerGenericCommand+0x98>)
 800df4a:	6818      	ldr	r0, [r3, #0]
 800df4c:	f107 0110 	add.w	r1, r7, #16
 800df50:	2300      	movs	r3, #0
 800df52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df54:	f7fe f84e 	bl	800bff4 <xQueueGenericSend>
 800df58:	6278      	str	r0, [r7, #36]	@ 0x24
 800df5a:	e012      	b.n	800df82 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800df5c:	4b0b      	ldr	r3, [pc, #44]	@ (800df8c <xTimerGenericCommand+0x98>)
 800df5e:	6818      	ldr	r0, [r3, #0]
 800df60:	f107 0110 	add.w	r1, r7, #16
 800df64:	2300      	movs	r3, #0
 800df66:	2200      	movs	r2, #0
 800df68:	f7fe f844 	bl	800bff4 <xQueueGenericSend>
 800df6c:	6278      	str	r0, [r7, #36]	@ 0x24
 800df6e:	e008      	b.n	800df82 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800df70:	4b06      	ldr	r3, [pc, #24]	@ (800df8c <xTimerGenericCommand+0x98>)
 800df72:	6818      	ldr	r0, [r3, #0]
 800df74:	f107 0110 	add.w	r1, r7, #16
 800df78:	2300      	movs	r3, #0
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	f7fe f93c 	bl	800c1f8 <xQueueGenericSendFromISR>
 800df80:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800df82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800df84:	4618      	mov	r0, r3
 800df86:	3728      	adds	r7, #40	@ 0x28
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	200016d0 	.word	0x200016d0

0800df90 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b088      	sub	sp, #32
 800df94:	af02      	add	r7, sp, #8
 800df96:	6078      	str	r0, [r7, #4]
 800df98:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df9a:	4b23      	ldr	r3, [pc, #140]	@ (800e028 <prvProcessExpiredTimer+0x98>)
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	68db      	ldr	r3, [r3, #12]
 800dfa0:	68db      	ldr	r3, [r3, #12]
 800dfa2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7fd fd8d 	bl	800bac8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfae:	697b      	ldr	r3, [r7, #20]
 800dfb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfb4:	f003 0304 	and.w	r3, r3, #4
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d023      	beq.n	800e004 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	699a      	ldr	r2, [r3, #24]
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	18d1      	adds	r1, r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	6978      	ldr	r0, [r7, #20]
 800dfca:	f000 f8d5 	bl	800e178 <prvInsertTimerInActiveList>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d020      	beq.n	800e016 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9300      	str	r3, [sp, #0]
 800dfd8:	2300      	movs	r3, #0
 800dfda:	687a      	ldr	r2, [r7, #4]
 800dfdc:	2100      	movs	r1, #0
 800dfde:	6978      	ldr	r0, [r7, #20]
 800dfe0:	f7ff ff88 	bl	800def4 <xTimerGenericCommand>
 800dfe4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d114      	bne.n	800e016 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dfec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff0:	f383 8811 	msr	BASEPRI, r3
 800dff4:	f3bf 8f6f 	isb	sy
 800dff8:	f3bf 8f4f 	dsb	sy
 800dffc:	60fb      	str	r3, [r7, #12]
}
 800dffe:	bf00      	nop
 800e000:	bf00      	nop
 800e002:	e7fd      	b.n	800e000 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e00a:	f023 0301 	bic.w	r3, r3, #1
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e016:	697b      	ldr	r3, [r7, #20]
 800e018:	6a1b      	ldr	r3, [r3, #32]
 800e01a:	6978      	ldr	r0, [r7, #20]
 800e01c:	4798      	blx	r3
}
 800e01e:	bf00      	nop
 800e020:	3718      	adds	r7, #24
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	200016c8 	.word	0x200016c8

0800e02c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b084      	sub	sp, #16
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e034:	f107 0308 	add.w	r3, r7, #8
 800e038:	4618      	mov	r0, r3
 800e03a:	f000 f859 	bl	800e0f0 <prvGetNextExpireTime>
 800e03e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	4619      	mov	r1, r3
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f000 f805 	bl	800e054 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e04a:	f000 f8d7 	bl	800e1fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e04e:	bf00      	nop
 800e050:	e7f0      	b.n	800e034 <prvTimerTask+0x8>
	...

0800e054 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b084      	sub	sp, #16
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e05e:	f7ff f919 	bl	800d294 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e062:	f107 0308 	add.w	r3, r7, #8
 800e066:	4618      	mov	r0, r3
 800e068:	f000 f866 	bl	800e138 <prvSampleTimeNow>
 800e06c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d130      	bne.n	800e0d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d10a      	bne.n	800e090 <prvProcessTimerOrBlockTask+0x3c>
 800e07a:	687a      	ldr	r2, [r7, #4]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	429a      	cmp	r2, r3
 800e080:	d806      	bhi.n	800e090 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e082:	f7ff f915 	bl	800d2b0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e086:	68f9      	ldr	r1, [r7, #12]
 800e088:	6878      	ldr	r0, [r7, #4]
 800e08a:	f7ff ff81 	bl	800df90 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e08e:	e024      	b.n	800e0da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e090:	683b      	ldr	r3, [r7, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d008      	beq.n	800e0a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e096:	4b13      	ldr	r3, [pc, #76]	@ (800e0e4 <prvProcessTimerOrBlockTask+0x90>)
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d101      	bne.n	800e0a4 <prvProcessTimerOrBlockTask+0x50>
 800e0a0:	2301      	movs	r3, #1
 800e0a2:	e000      	b.n	800e0a6 <prvProcessTimerOrBlockTask+0x52>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e0a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e0e8 <prvProcessTimerOrBlockTask+0x94>)
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	1ad3      	subs	r3, r2, r3
 800e0b2:	683a      	ldr	r2, [r7, #0]
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	f7fe fde1 	bl	800cc7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e0ba:	f7ff f8f9 	bl	800d2b0 <xTaskResumeAll>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d10a      	bne.n	800e0da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e0c4:	4b09      	ldr	r3, [pc, #36]	@ (800e0ec <prvProcessTimerOrBlockTask+0x98>)
 800e0c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0ca:	601a      	str	r2, [r3, #0]
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	f3bf 8f6f 	isb	sy
}
 800e0d4:	e001      	b.n	800e0da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e0d6:	f7ff f8eb 	bl	800d2b0 <xTaskResumeAll>
}
 800e0da:	bf00      	nop
 800e0dc:	3710      	adds	r7, #16
 800e0de:	46bd      	mov	sp, r7
 800e0e0:	bd80      	pop	{r7, pc}
 800e0e2:	bf00      	nop
 800e0e4:	200016cc 	.word	0x200016cc
 800e0e8:	200016d0 	.word	0x200016d0
 800e0ec:	e000ed04 	.word	0xe000ed04

0800e0f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b085      	sub	sp, #20
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800e134 <prvGetNextExpireTime+0x44>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <prvGetNextExpireTime+0x16>
 800e102:	2201      	movs	r2, #1
 800e104:	e000      	b.n	800e108 <prvGetNextExpireTime+0x18>
 800e106:	2200      	movs	r2, #0
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d105      	bne.n	800e120 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e114:	4b07      	ldr	r3, [pc, #28]	@ (800e134 <prvGetNextExpireTime+0x44>)
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	68db      	ldr	r3, [r3, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	60fb      	str	r3, [r7, #12]
 800e11e:	e001      	b.n	800e124 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e120:	2300      	movs	r3, #0
 800e122:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e124:	68fb      	ldr	r3, [r7, #12]
}
 800e126:	4618      	mov	r0, r3
 800e128:	3714      	adds	r7, #20
 800e12a:	46bd      	mov	sp, r7
 800e12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e130:	4770      	bx	lr
 800e132:	bf00      	nop
 800e134:	200016c8 	.word	0x200016c8

0800e138 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b084      	sub	sp, #16
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e140:	f7ff f954 	bl	800d3ec <xTaskGetTickCount>
 800e144:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e146:	4b0b      	ldr	r3, [pc, #44]	@ (800e174 <prvSampleTimeNow+0x3c>)
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	68fa      	ldr	r2, [r7, #12]
 800e14c:	429a      	cmp	r2, r3
 800e14e:	d205      	bcs.n	800e15c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e150:	f000 f93a 	bl	800e3c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	e002      	b.n	800e162 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e162:	4a04      	ldr	r2, [pc, #16]	@ (800e174 <prvSampleTimeNow+0x3c>)
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e168:	68fb      	ldr	r3, [r7, #12]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	200016d8 	.word	0x200016d8

0800e178 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
 800e184:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e186:	2300      	movs	r3, #0
 800e188:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	68ba      	ldr	r2, [r7, #8]
 800e18e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	68fa      	ldr	r2, [r7, #12]
 800e194:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e196:	68ba      	ldr	r2, [r7, #8]
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	429a      	cmp	r2, r3
 800e19c:	d812      	bhi.n	800e1c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e19e:	687a      	ldr	r2, [r7, #4]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	1ad2      	subs	r2, r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	699b      	ldr	r3, [r3, #24]
 800e1a8:	429a      	cmp	r2, r3
 800e1aa:	d302      	bcc.n	800e1b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	617b      	str	r3, [r7, #20]
 800e1b0:	e01b      	b.n	800e1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e1b2:	4b10      	ldr	r3, [pc, #64]	@ (800e1f4 <prvInsertTimerInActiveList+0x7c>)
 800e1b4:	681a      	ldr	r2, [r3, #0]
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	3304      	adds	r3, #4
 800e1ba:	4619      	mov	r1, r3
 800e1bc:	4610      	mov	r0, r2
 800e1be:	f7fd fc4a 	bl	800ba56 <vListInsert>
 800e1c2:	e012      	b.n	800e1ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e1c4:	687a      	ldr	r2, [r7, #4]
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	d206      	bcs.n	800e1da <prvInsertTimerInActiveList+0x62>
 800e1cc:	68ba      	ldr	r2, [r7, #8]
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	429a      	cmp	r2, r3
 800e1d2:	d302      	bcc.n	800e1da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	617b      	str	r3, [r7, #20]
 800e1d8:	e007      	b.n	800e1ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e1da:	4b07      	ldr	r3, [pc, #28]	@ (800e1f8 <prvInsertTimerInActiveList+0x80>)
 800e1dc:	681a      	ldr	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	3304      	adds	r3, #4
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	4610      	mov	r0, r2
 800e1e6:	f7fd fc36 	bl	800ba56 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e1ea:	697b      	ldr	r3, [r7, #20]
}
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	3718      	adds	r7, #24
 800e1f0:	46bd      	mov	sp, r7
 800e1f2:	bd80      	pop	{r7, pc}
 800e1f4:	200016cc 	.word	0x200016cc
 800e1f8:	200016c8 	.word	0x200016c8

0800e1fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b08e      	sub	sp, #56	@ 0x38
 800e200:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e202:	e0ce      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	2b00      	cmp	r3, #0
 800e208:	da19      	bge.n	800e23e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e20a:	1d3b      	adds	r3, r7, #4
 800e20c:	3304      	adds	r3, #4
 800e20e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10b      	bne.n	800e22e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	61fb      	str	r3, [r7, #28]
}
 800e228:	bf00      	nop
 800e22a:	bf00      	nop
 800e22c:	e7fd      	b.n	800e22a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e234:	6850      	ldr	r0, [r2, #4]
 800e236:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e238:	6892      	ldr	r2, [r2, #8]
 800e23a:	4611      	mov	r1, r2
 800e23c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	f2c0 80ae 	blt.w	800e3a2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e24a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e24c:	695b      	ldr	r3, [r3, #20]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d004      	beq.n	800e25c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e254:	3304      	adds	r3, #4
 800e256:	4618      	mov	r0, r3
 800e258:	f7fd fc36 	bl	800bac8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e25c:	463b      	mov	r3, r7
 800e25e:	4618      	mov	r0, r3
 800e260:	f7ff ff6a 	bl	800e138 <prvSampleTimeNow>
 800e264:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2b09      	cmp	r3, #9
 800e26a:	f200 8097 	bhi.w	800e39c <prvProcessReceivedCommands+0x1a0>
 800e26e:	a201      	add	r2, pc, #4	@ (adr r2, 800e274 <prvProcessReceivedCommands+0x78>)
 800e270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e274:	0800e29d 	.word	0x0800e29d
 800e278:	0800e29d 	.word	0x0800e29d
 800e27c:	0800e29d 	.word	0x0800e29d
 800e280:	0800e313 	.word	0x0800e313
 800e284:	0800e327 	.word	0x0800e327
 800e288:	0800e373 	.word	0x0800e373
 800e28c:	0800e29d 	.word	0x0800e29d
 800e290:	0800e29d 	.word	0x0800e29d
 800e294:	0800e313 	.word	0x0800e313
 800e298:	0800e327 	.word	0x0800e327
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e29e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2a2:	f043 0301 	orr.w	r3, r3, #1
 800e2a6:	b2da      	uxtb	r2, r3
 800e2a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e2ae:	68ba      	ldr	r2, [r7, #8]
 800e2b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2b2:	699b      	ldr	r3, [r3, #24]
 800e2b4:	18d1      	adds	r1, r2, r3
 800e2b6:	68bb      	ldr	r3, [r7, #8]
 800e2b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e2ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2bc:	f7ff ff5c 	bl	800e178 <prvInsertTimerInActiveList>
 800e2c0:	4603      	mov	r3, r0
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d06c      	beq.n	800e3a0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e2c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2c8:	6a1b      	ldr	r3, [r3, #32]
 800e2ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e2d4:	f003 0304 	and.w	r3, r3, #4
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d061      	beq.n	800e3a0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e2dc:	68ba      	ldr	r2, [r7, #8]
 800e2de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	441a      	add	r2, r3
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	9300      	str	r3, [sp, #0]
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e2ee:	f7ff fe01 	bl	800def4 <xTimerGenericCommand>
 800e2f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d152      	bne.n	800e3a0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e2fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2fe:	f383 8811 	msr	BASEPRI, r3
 800e302:	f3bf 8f6f 	isb	sy
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	61bb      	str	r3, [r7, #24]
}
 800e30c:	bf00      	nop
 800e30e:	bf00      	nop
 800e310:	e7fd      	b.n	800e30e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e318:	f023 0301 	bic.w	r3, r3, #1
 800e31c:	b2da      	uxtb	r2, r3
 800e31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e320:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e324:	e03d      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e32c:	f043 0301 	orr.w	r3, r3, #1
 800e330:	b2da      	uxtb	r2, r3
 800e332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e334:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e338:	68ba      	ldr	r2, [r7, #8]
 800e33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e33c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e33e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e340:	699b      	ldr	r3, [r3, #24]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d10b      	bne.n	800e35e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e34a:	f383 8811 	msr	BASEPRI, r3
 800e34e:	f3bf 8f6f 	isb	sy
 800e352:	f3bf 8f4f 	dsb	sy
 800e356:	617b      	str	r3, [r7, #20]
}
 800e358:	bf00      	nop
 800e35a:	bf00      	nop
 800e35c:	e7fd      	b.n	800e35a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e35e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e360:	699a      	ldr	r2, [r3, #24]
 800e362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e364:	18d1      	adds	r1, r2, r3
 800e366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e36a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e36c:	f7ff ff04 	bl	800e178 <prvInsertTimerInActiveList>
					break;
 800e370:	e017      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e374:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e378:	f003 0302 	and.w	r3, r3, #2
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d103      	bne.n	800e388 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e380:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e382:	f000 fbe9 	bl	800eb58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e386:	e00c      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e38a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e38e:	f023 0301 	bic.w	r3, r3, #1
 800e392:	b2da      	uxtb	r2, r3
 800e394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e396:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e39a:	e002      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e39c:	bf00      	nop
 800e39e:	e000      	b.n	800e3a2 <prvProcessReceivedCommands+0x1a6>
					break;
 800e3a0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e3a2:	4b08      	ldr	r3, [pc, #32]	@ (800e3c4 <prvProcessReceivedCommands+0x1c8>)
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	1d39      	adds	r1, r7, #4
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f7fe f852 	bl	800c454 <xQueueReceive>
 800e3b0:	4603      	mov	r3, r0
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f47f af26 	bne.w	800e204 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	3730      	adds	r7, #48	@ 0x30
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200016d0 	.word	0x200016d0

0800e3c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	b088      	sub	sp, #32
 800e3cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e3ce:	e049      	b.n	800e464 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e3d0:	4b2e      	ldr	r3, [pc, #184]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3da:	4b2c      	ldr	r3, [pc, #176]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	68db      	ldr	r3, [r3, #12]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	3304      	adds	r3, #4
 800e3e8:	4618      	mov	r0, r3
 800e3ea:	f7fd fb6d 	bl	800bac8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3fc:	f003 0304 	and.w	r3, r3, #4
 800e400:	2b00      	cmp	r3, #0
 800e402:	d02f      	beq.n	800e464 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	699b      	ldr	r3, [r3, #24]
 800e408:	693a      	ldr	r2, [r7, #16]
 800e40a:	4413      	add	r3, r2
 800e40c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e40e:	68ba      	ldr	r2, [r7, #8]
 800e410:	693b      	ldr	r3, [r7, #16]
 800e412:	429a      	cmp	r2, r3
 800e414:	d90e      	bls.n	800e434 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	68ba      	ldr	r2, [r7, #8]
 800e41a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	68fa      	ldr	r2, [r7, #12]
 800e420:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e422:	4b1a      	ldr	r3, [pc, #104]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	3304      	adds	r3, #4
 800e42a:	4619      	mov	r1, r3
 800e42c:	4610      	mov	r0, r2
 800e42e:	f7fd fb12 	bl	800ba56 <vListInsert>
 800e432:	e017      	b.n	800e464 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e434:	2300      	movs	r3, #0
 800e436:	9300      	str	r3, [sp, #0]
 800e438:	2300      	movs	r3, #0
 800e43a:	693a      	ldr	r2, [r7, #16]
 800e43c:	2100      	movs	r1, #0
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7ff fd58 	bl	800def4 <xTimerGenericCommand>
 800e444:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d10b      	bne.n	800e464 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e450:	f383 8811 	msr	BASEPRI, r3
 800e454:	f3bf 8f6f 	isb	sy
 800e458:	f3bf 8f4f 	dsb	sy
 800e45c:	603b      	str	r3, [r7, #0]
}
 800e45e:	bf00      	nop
 800e460:	bf00      	nop
 800e462:	e7fd      	b.n	800e460 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e464:	4b09      	ldr	r3, [pc, #36]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	681b      	ldr	r3, [r3, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d1b0      	bne.n	800e3d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e46e:	4b07      	ldr	r3, [pc, #28]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e474:	4b06      	ldr	r3, [pc, #24]	@ (800e490 <prvSwitchTimerLists+0xc8>)
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a04      	ldr	r2, [pc, #16]	@ (800e48c <prvSwitchTimerLists+0xc4>)
 800e47a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e47c:	4a04      	ldr	r2, [pc, #16]	@ (800e490 <prvSwitchTimerLists+0xc8>)
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	6013      	str	r3, [r2, #0]
}
 800e482:	bf00      	nop
 800e484:	3718      	adds	r7, #24
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	200016c8 	.word	0x200016c8
 800e490:	200016cc 	.word	0x200016cc

0800e494 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b082      	sub	sp, #8
 800e498:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e49a:	f000 f96d 	bl	800e778 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e49e:	4b15      	ldr	r3, [pc, #84]	@ (800e4f4 <prvCheckForValidListAndQueue+0x60>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d120      	bne.n	800e4e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e4a6:	4814      	ldr	r0, [pc, #80]	@ (800e4f8 <prvCheckForValidListAndQueue+0x64>)
 800e4a8:	f7fd fa84 	bl	800b9b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e4ac:	4813      	ldr	r0, [pc, #76]	@ (800e4fc <prvCheckForValidListAndQueue+0x68>)
 800e4ae:	f7fd fa81 	bl	800b9b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e4b2:	4b13      	ldr	r3, [pc, #76]	@ (800e500 <prvCheckForValidListAndQueue+0x6c>)
 800e4b4:	4a10      	ldr	r2, [pc, #64]	@ (800e4f8 <prvCheckForValidListAndQueue+0x64>)
 800e4b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e4b8:	4b12      	ldr	r3, [pc, #72]	@ (800e504 <prvCheckForValidListAndQueue+0x70>)
 800e4ba:	4a10      	ldr	r2, [pc, #64]	@ (800e4fc <prvCheckForValidListAndQueue+0x68>)
 800e4bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e4be:	2300      	movs	r3, #0
 800e4c0:	9300      	str	r3, [sp, #0]
 800e4c2:	4b11      	ldr	r3, [pc, #68]	@ (800e508 <prvCheckForValidListAndQueue+0x74>)
 800e4c4:	4a11      	ldr	r2, [pc, #68]	@ (800e50c <prvCheckForValidListAndQueue+0x78>)
 800e4c6:	2110      	movs	r1, #16
 800e4c8:	200a      	movs	r0, #10
 800e4ca:	f7fd fb91 	bl	800bbf0 <xQueueGenericCreateStatic>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	4a08      	ldr	r2, [pc, #32]	@ (800e4f4 <prvCheckForValidListAndQueue+0x60>)
 800e4d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e4d4:	4b07      	ldr	r3, [pc, #28]	@ (800e4f4 <prvCheckForValidListAndQueue+0x60>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d005      	beq.n	800e4e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e4dc:	4b05      	ldr	r3, [pc, #20]	@ (800e4f4 <prvCheckForValidListAndQueue+0x60>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	490b      	ldr	r1, [pc, #44]	@ (800e510 <prvCheckForValidListAndQueue+0x7c>)
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	f7fe fb76 	bl	800cbd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4e8:	f000 f978 	bl	800e7dc <vPortExitCritical>
}
 800e4ec:	bf00      	nop
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	bd80      	pop	{r7, pc}
 800e4f2:	bf00      	nop
 800e4f4:	200016d0 	.word	0x200016d0
 800e4f8:	200016a0 	.word	0x200016a0
 800e4fc:	200016b4 	.word	0x200016b4
 800e500:	200016c8 	.word	0x200016c8
 800e504:	200016cc 	.word	0x200016cc
 800e508:	2000177c 	.word	0x2000177c
 800e50c:	200016dc 	.word	0x200016dc
 800e510:	08012218 	.word	0x08012218

0800e514 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e514:	b480      	push	{r7}
 800e516:	b085      	sub	sp, #20
 800e518:	af00      	add	r7, sp, #0
 800e51a:	60f8      	str	r0, [r7, #12]
 800e51c:	60b9      	str	r1, [r7, #8]
 800e51e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	3b04      	subs	r3, #4
 800e524:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e52c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3b04      	subs	r3, #4
 800e532:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	f023 0201 	bic.w	r2, r3, #1
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	3b04      	subs	r3, #4
 800e542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e544:	4a0c      	ldr	r2, [pc, #48]	@ (800e578 <pxPortInitialiseStack+0x64>)
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	3b14      	subs	r3, #20
 800e54e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e550:	687a      	ldr	r2, [r7, #4]
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	3b04      	subs	r3, #4
 800e55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	f06f 0202 	mvn.w	r2, #2
 800e562:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	3b20      	subs	r3, #32
 800e568:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e56a:	68fb      	ldr	r3, [r7, #12]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3714      	adds	r7, #20
 800e570:	46bd      	mov	sp, r7
 800e572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e576:	4770      	bx	lr
 800e578:	0800e57d 	.word	0x0800e57d

0800e57c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e57c:	b480      	push	{r7}
 800e57e:	b085      	sub	sp, #20
 800e580:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e586:	4b13      	ldr	r3, [pc, #76]	@ (800e5d4 <prvTaskExitError+0x58>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e58e:	d00b      	beq.n	800e5a8 <prvTaskExitError+0x2c>
	__asm volatile
 800e590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e594:	f383 8811 	msr	BASEPRI, r3
 800e598:	f3bf 8f6f 	isb	sy
 800e59c:	f3bf 8f4f 	dsb	sy
 800e5a0:	60fb      	str	r3, [r7, #12]
}
 800e5a2:	bf00      	nop
 800e5a4:	bf00      	nop
 800e5a6:	e7fd      	b.n	800e5a4 <prvTaskExitError+0x28>
	__asm volatile
 800e5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e5ac:	f383 8811 	msr	BASEPRI, r3
 800e5b0:	f3bf 8f6f 	isb	sy
 800e5b4:	f3bf 8f4f 	dsb	sy
 800e5b8:	60bb      	str	r3, [r7, #8]
}
 800e5ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e5bc:	bf00      	nop
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d0fc      	beq.n	800e5be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e5c4:	bf00      	nop
 800e5c6:	bf00      	nop
 800e5c8:	3714      	adds	r7, #20
 800e5ca:	46bd      	mov	sp, r7
 800e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d0:	4770      	bx	lr
 800e5d2:	bf00      	nop
 800e5d4:	20000014 	.word	0x20000014
	...

0800e5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e5e0:	4b07      	ldr	r3, [pc, #28]	@ (800e600 <pxCurrentTCBConst2>)
 800e5e2:	6819      	ldr	r1, [r3, #0]
 800e5e4:	6808      	ldr	r0, [r1, #0]
 800e5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ea:	f380 8809 	msr	PSP, r0
 800e5ee:	f3bf 8f6f 	isb	sy
 800e5f2:	f04f 0000 	mov.w	r0, #0
 800e5f6:	f380 8811 	msr	BASEPRI, r0
 800e5fa:	4770      	bx	lr
 800e5fc:	f3af 8000 	nop.w

0800e600 <pxCurrentTCBConst2>:
 800e600:	200011a0 	.word	0x200011a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e604:	bf00      	nop
 800e606:	bf00      	nop

0800e608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e608:	4808      	ldr	r0, [pc, #32]	@ (800e62c <prvPortStartFirstTask+0x24>)
 800e60a:	6800      	ldr	r0, [r0, #0]
 800e60c:	6800      	ldr	r0, [r0, #0]
 800e60e:	f380 8808 	msr	MSP, r0
 800e612:	f04f 0000 	mov.w	r0, #0
 800e616:	f380 8814 	msr	CONTROL, r0
 800e61a:	b662      	cpsie	i
 800e61c:	b661      	cpsie	f
 800e61e:	f3bf 8f4f 	dsb	sy
 800e622:	f3bf 8f6f 	isb	sy
 800e626:	df00      	svc	0
 800e628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e62a:	bf00      	nop
 800e62c:	e000ed08 	.word	0xe000ed08

0800e630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b086      	sub	sp, #24
 800e634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e636:	4b47      	ldr	r3, [pc, #284]	@ (800e754 <xPortStartScheduler+0x124>)
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	4a47      	ldr	r2, [pc, #284]	@ (800e758 <xPortStartScheduler+0x128>)
 800e63c:	4293      	cmp	r3, r2
 800e63e:	d10b      	bne.n	800e658 <xPortStartScheduler+0x28>
	__asm volatile
 800e640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e644:	f383 8811 	msr	BASEPRI, r3
 800e648:	f3bf 8f6f 	isb	sy
 800e64c:	f3bf 8f4f 	dsb	sy
 800e650:	60fb      	str	r3, [r7, #12]
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	e7fd      	b.n	800e654 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e658:	4b3e      	ldr	r3, [pc, #248]	@ (800e754 <xPortStartScheduler+0x124>)
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a3f      	ldr	r2, [pc, #252]	@ (800e75c <xPortStartScheduler+0x12c>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d10b      	bne.n	800e67a <xPortStartScheduler+0x4a>
	__asm volatile
 800e662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e666:	f383 8811 	msr	BASEPRI, r3
 800e66a:	f3bf 8f6f 	isb	sy
 800e66e:	f3bf 8f4f 	dsb	sy
 800e672:	613b      	str	r3, [r7, #16]
}
 800e674:	bf00      	nop
 800e676:	bf00      	nop
 800e678:	e7fd      	b.n	800e676 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e67a:	4b39      	ldr	r3, [pc, #228]	@ (800e760 <xPortStartScheduler+0x130>)
 800e67c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	781b      	ldrb	r3, [r3, #0]
 800e682:	b2db      	uxtb	r3, r3
 800e684:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e686:	697b      	ldr	r3, [r7, #20]
 800e688:	22ff      	movs	r2, #255	@ 0xff
 800e68a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e68c:	697b      	ldr	r3, [r7, #20]
 800e68e:	781b      	ldrb	r3, [r3, #0]
 800e690:	b2db      	uxtb	r3, r3
 800e692:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e694:	78fb      	ldrb	r3, [r7, #3]
 800e696:	b2db      	uxtb	r3, r3
 800e698:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e69c:	b2da      	uxtb	r2, r3
 800e69e:	4b31      	ldr	r3, [pc, #196]	@ (800e764 <xPortStartScheduler+0x134>)
 800e6a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e6a2:	4b31      	ldr	r3, [pc, #196]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6a4:	2207      	movs	r2, #7
 800e6a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6a8:	e009      	b.n	800e6be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e6aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6ac:	681b      	ldr	r3, [r3, #0]
 800e6ae:	3b01      	subs	r3, #1
 800e6b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e6b4:	78fb      	ldrb	r3, [r7, #3]
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	b2db      	uxtb	r3, r3
 800e6bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e6be:	78fb      	ldrb	r3, [r7, #3]
 800e6c0:	b2db      	uxtb	r3, r3
 800e6c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e6c6:	2b80      	cmp	r3, #128	@ 0x80
 800e6c8:	d0ef      	beq.n	800e6aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e6ca:	4b27      	ldr	r3, [pc, #156]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	f1c3 0307 	rsb	r3, r3, #7
 800e6d2:	2b04      	cmp	r3, #4
 800e6d4:	d00b      	beq.n	800e6ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e6d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	60bb      	str	r3, [r7, #8]
}
 800e6e8:	bf00      	nop
 800e6ea:	bf00      	nop
 800e6ec:	e7fd      	b.n	800e6ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e6ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	021b      	lsls	r3, r3, #8
 800e6f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e6f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e768 <xPortStartScheduler+0x138>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e700:	4a19      	ldr	r2, [pc, #100]	@ (800e768 <xPortStartScheduler+0x138>)
 800e702:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	b2da      	uxtb	r2, r3
 800e708:	697b      	ldr	r3, [r7, #20]
 800e70a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e70c:	4b17      	ldr	r3, [pc, #92]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a16      	ldr	r2, [pc, #88]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e712:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e716:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e718:	4b14      	ldr	r3, [pc, #80]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	4a13      	ldr	r2, [pc, #76]	@ (800e76c <xPortStartScheduler+0x13c>)
 800e71e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e722:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e724:	f000 f8da 	bl	800e8dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e728:	4b11      	ldr	r3, [pc, #68]	@ (800e770 <xPortStartScheduler+0x140>)
 800e72a:	2200      	movs	r2, #0
 800e72c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e72e:	f000 f8f9 	bl	800e924 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e732:	4b10      	ldr	r3, [pc, #64]	@ (800e774 <xPortStartScheduler+0x144>)
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	4a0f      	ldr	r2, [pc, #60]	@ (800e774 <xPortStartScheduler+0x144>)
 800e738:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e73c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e73e:	f7ff ff63 	bl	800e608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e742:	f7fe ff1d 	bl	800d580 <vTaskSwitchContext>
	prvTaskExitError();
 800e746:	f7ff ff19 	bl	800e57c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	e000ed00 	.word	0xe000ed00
 800e758:	410fc271 	.word	0x410fc271
 800e75c:	410fc270 	.word	0x410fc270
 800e760:	e000e400 	.word	0xe000e400
 800e764:	200017cc 	.word	0x200017cc
 800e768:	200017d0 	.word	0x200017d0
 800e76c:	e000ed20 	.word	0xe000ed20
 800e770:	20000014 	.word	0x20000014
 800e774:	e000ef34 	.word	0xe000ef34

0800e778 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
	__asm volatile
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	607b      	str	r3, [r7, #4]
}
 800e790:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e792:	4b10      	ldr	r3, [pc, #64]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	3301      	adds	r3, #1
 800e798:	4a0e      	ldr	r2, [pc, #56]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e79a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e79c:	4b0d      	ldr	r3, [pc, #52]	@ (800e7d4 <vPortEnterCritical+0x5c>)
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d110      	bne.n	800e7c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e7d8 <vPortEnterCritical+0x60>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	b2db      	uxtb	r3, r3
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00b      	beq.n	800e7c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e7ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	603b      	str	r3, [r7, #0]
}
 800e7c0:	bf00      	nop
 800e7c2:	bf00      	nop
 800e7c4:	e7fd      	b.n	800e7c2 <vPortEnterCritical+0x4a>
	}
}
 800e7c6:	bf00      	nop
 800e7c8:	370c      	adds	r7, #12
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d0:	4770      	bx	lr
 800e7d2:	bf00      	nop
 800e7d4:	20000014 	.word	0x20000014
 800e7d8:	e000ed04 	.word	0xe000ed04

0800e7dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e7dc:	b480      	push	{r7}
 800e7de:	b083      	sub	sp, #12
 800e7e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e7e2:	4b12      	ldr	r3, [pc, #72]	@ (800e82c <vPortExitCritical+0x50>)
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d10b      	bne.n	800e802 <vPortExitCritical+0x26>
	__asm volatile
 800e7ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ee:	f383 8811 	msr	BASEPRI, r3
 800e7f2:	f3bf 8f6f 	isb	sy
 800e7f6:	f3bf 8f4f 	dsb	sy
 800e7fa:	607b      	str	r3, [r7, #4]
}
 800e7fc:	bf00      	nop
 800e7fe:	bf00      	nop
 800e800:	e7fd      	b.n	800e7fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e802:	4b0a      	ldr	r3, [pc, #40]	@ (800e82c <vPortExitCritical+0x50>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	3b01      	subs	r3, #1
 800e808:	4a08      	ldr	r2, [pc, #32]	@ (800e82c <vPortExitCritical+0x50>)
 800e80a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e80c:	4b07      	ldr	r3, [pc, #28]	@ (800e82c <vPortExitCritical+0x50>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d105      	bne.n	800e820 <vPortExitCritical+0x44>
 800e814:	2300      	movs	r3, #0
 800e816:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	f383 8811 	msr	BASEPRI, r3
}
 800e81e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e820:	bf00      	nop
 800e822:	370c      	adds	r7, #12
 800e824:	46bd      	mov	sp, r7
 800e826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e82a:	4770      	bx	lr
 800e82c:	20000014 	.word	0x20000014

0800e830 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e830:	f3ef 8009 	mrs	r0, PSP
 800e834:	f3bf 8f6f 	isb	sy
 800e838:	4b15      	ldr	r3, [pc, #84]	@ (800e890 <pxCurrentTCBConst>)
 800e83a:	681a      	ldr	r2, [r3, #0]
 800e83c:	f01e 0f10 	tst.w	lr, #16
 800e840:	bf08      	it	eq
 800e842:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e846:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84a:	6010      	str	r0, [r2, #0]
 800e84c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e850:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e854:	f380 8811 	msr	BASEPRI, r0
 800e858:	f3bf 8f4f 	dsb	sy
 800e85c:	f3bf 8f6f 	isb	sy
 800e860:	f7fe fe8e 	bl	800d580 <vTaskSwitchContext>
 800e864:	f04f 0000 	mov.w	r0, #0
 800e868:	f380 8811 	msr	BASEPRI, r0
 800e86c:	bc09      	pop	{r0, r3}
 800e86e:	6819      	ldr	r1, [r3, #0]
 800e870:	6808      	ldr	r0, [r1, #0]
 800e872:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e876:	f01e 0f10 	tst.w	lr, #16
 800e87a:	bf08      	it	eq
 800e87c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e880:	f380 8809 	msr	PSP, r0
 800e884:	f3bf 8f6f 	isb	sy
 800e888:	4770      	bx	lr
 800e88a:	bf00      	nop
 800e88c:	f3af 8000 	nop.w

0800e890 <pxCurrentTCBConst>:
 800e890:	200011a0 	.word	0x200011a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e894:	bf00      	nop
 800e896:	bf00      	nop

0800e898 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
	__asm volatile
 800e89e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8a2:	f383 8811 	msr	BASEPRI, r3
 800e8a6:	f3bf 8f6f 	isb	sy
 800e8aa:	f3bf 8f4f 	dsb	sy
 800e8ae:	607b      	str	r3, [r7, #4]
}
 800e8b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e8b2:	f7fe fdab 	bl	800d40c <xTaskIncrementTick>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e8bc:	4b06      	ldr	r3, [pc, #24]	@ (800e8d8 <xPortSysTickHandler+0x40>)
 800e8be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8c2:	601a      	str	r2, [r3, #0]
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	f383 8811 	msr	BASEPRI, r3
}
 800e8ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e8d0:	bf00      	nop
 800e8d2:	3708      	adds	r7, #8
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd80      	pop	{r7, pc}
 800e8d8:	e000ed04 	.word	0xe000ed04

0800e8dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800e910 <vPortSetupTimerInterrupt+0x34>)
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e8e6:	4b0b      	ldr	r3, [pc, #44]	@ (800e914 <vPortSetupTimerInterrupt+0x38>)
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e8ec:	4b0a      	ldr	r3, [pc, #40]	@ (800e918 <vPortSetupTimerInterrupt+0x3c>)
 800e8ee:	681b      	ldr	r3, [r3, #0]
 800e8f0:	4a0a      	ldr	r2, [pc, #40]	@ (800e91c <vPortSetupTimerInterrupt+0x40>)
 800e8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8f6:	099b      	lsrs	r3, r3, #6
 800e8f8:	4a09      	ldr	r2, [pc, #36]	@ (800e920 <vPortSetupTimerInterrupt+0x44>)
 800e8fa:	3b01      	subs	r3, #1
 800e8fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e8fe:	4b04      	ldr	r3, [pc, #16]	@ (800e910 <vPortSetupTimerInterrupt+0x34>)
 800e900:	2207      	movs	r2, #7
 800e902:	601a      	str	r2, [r3, #0]
}
 800e904:	bf00      	nop
 800e906:	46bd      	mov	sp, r7
 800e908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e90c:	4770      	bx	lr
 800e90e:	bf00      	nop
 800e910:	e000e010 	.word	0xe000e010
 800e914:	e000e018 	.word	0xe000e018
 800e918:	20000008 	.word	0x20000008
 800e91c:	10624dd3 	.word	0x10624dd3
 800e920:	e000e014 	.word	0xe000e014

0800e924 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e924:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800e934 <vPortEnableVFP+0x10>
 800e928:	6801      	ldr	r1, [r0, #0]
 800e92a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800e92e:	6001      	str	r1, [r0, #0]
 800e930:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e932:	bf00      	nop
 800e934:	e000ed88 	.word	0xe000ed88

0800e938 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e938:	b480      	push	{r7}
 800e93a:	b085      	sub	sp, #20
 800e93c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e93e:	f3ef 8305 	mrs	r3, IPSR
 800e942:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b0f      	cmp	r3, #15
 800e948:	d915      	bls.n	800e976 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e94a:	4a18      	ldr	r2, [pc, #96]	@ (800e9ac <vPortValidateInterruptPriority+0x74>)
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	4413      	add	r3, r2
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e954:	4b16      	ldr	r3, [pc, #88]	@ (800e9b0 <vPortValidateInterruptPriority+0x78>)
 800e956:	781b      	ldrb	r3, [r3, #0]
 800e958:	7afa      	ldrb	r2, [r7, #11]
 800e95a:	429a      	cmp	r2, r3
 800e95c:	d20b      	bcs.n	800e976 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	607b      	str	r3, [r7, #4]
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	e7fd      	b.n	800e972 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e976:	4b0f      	ldr	r3, [pc, #60]	@ (800e9b4 <vPortValidateInterruptPriority+0x7c>)
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800e97e:	4b0e      	ldr	r3, [pc, #56]	@ (800e9b8 <vPortValidateInterruptPriority+0x80>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	d90b      	bls.n	800e99e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800e986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e98a:	f383 8811 	msr	BASEPRI, r3
 800e98e:	f3bf 8f6f 	isb	sy
 800e992:	f3bf 8f4f 	dsb	sy
 800e996:	603b      	str	r3, [r7, #0]
}
 800e998:	bf00      	nop
 800e99a:	bf00      	nop
 800e99c:	e7fd      	b.n	800e99a <vPortValidateInterruptPriority+0x62>
	}
 800e99e:	bf00      	nop
 800e9a0:	3714      	adds	r7, #20
 800e9a2:	46bd      	mov	sp, r7
 800e9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a8:	4770      	bx	lr
 800e9aa:	bf00      	nop
 800e9ac:	e000e3f0 	.word	0xe000e3f0
 800e9b0:	200017cc 	.word	0x200017cc
 800e9b4:	e000ed0c 	.word	0xe000ed0c
 800e9b8:	200017d0 	.word	0x200017d0

0800e9bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b08a      	sub	sp, #40	@ 0x28
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9c8:	f7fe fc64 	bl	800d294 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800eb40 <pvPortMalloc+0x184>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d101      	bne.n	800e9d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9d4:	f000 f924 	bl	800ec20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800eb44 <pvPortMalloc+0x188>)
 800e9da:	681a      	ldr	r2, [r3, #0]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4013      	ands	r3, r2
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f040 8095 	bne.w	800eb10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d01e      	beq.n	800ea2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800e9ec:	2208      	movs	r2, #8
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	4413      	add	r3, r2
 800e9f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	f003 0307 	and.w	r3, r3, #7
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d015      	beq.n	800ea2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	f023 0307 	bic.w	r3, r3, #7
 800ea04:	3308      	adds	r3, #8
 800ea06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f003 0307 	and.w	r3, r3, #7
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00b      	beq.n	800ea2a <pvPortMalloc+0x6e>
	__asm volatile
 800ea12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea16:	f383 8811 	msr	BASEPRI, r3
 800ea1a:	f3bf 8f6f 	isb	sy
 800ea1e:	f3bf 8f4f 	dsb	sy
 800ea22:	617b      	str	r3, [r7, #20]
}
 800ea24:	bf00      	nop
 800ea26:	bf00      	nop
 800ea28:	e7fd      	b.n	800ea26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d06f      	beq.n	800eb10 <pvPortMalloc+0x154>
 800ea30:	4b45      	ldr	r3, [pc, #276]	@ (800eb48 <pvPortMalloc+0x18c>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	687a      	ldr	r2, [r7, #4]
 800ea36:	429a      	cmp	r2, r3
 800ea38:	d86a      	bhi.n	800eb10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea3a:	4b44      	ldr	r3, [pc, #272]	@ (800eb4c <pvPortMalloc+0x190>)
 800ea3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea3e:	4b43      	ldr	r3, [pc, #268]	@ (800eb4c <pvPortMalloc+0x190>)
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea44:	e004      	b.n	800ea50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ea46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea52:	685b      	ldr	r3, [r3, #4]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d903      	bls.n	800ea62 <pvPortMalloc+0xa6>
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d1f1      	bne.n	800ea46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea62:	4b37      	ldr	r3, [pc, #220]	@ (800eb40 <pvPortMalloc+0x184>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d051      	beq.n	800eb10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea6c:	6a3b      	ldr	r3, [r7, #32]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	2208      	movs	r2, #8
 800ea72:	4413      	add	r3, r2
 800ea74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea78:	681a      	ldr	r2, [r3, #0]
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ea80:	685a      	ldr	r2, [r3, #4]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	1ad2      	subs	r2, r2, r3
 800ea86:	2308      	movs	r3, #8
 800ea88:	005b      	lsls	r3, r3, #1
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d920      	bls.n	800ead0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	4413      	add	r3, r2
 800ea94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea96:	69bb      	ldr	r3, [r7, #24]
 800ea98:	f003 0307 	and.w	r3, r3, #7
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d00b      	beq.n	800eab8 <pvPortMalloc+0xfc>
	__asm volatile
 800eaa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eaa4:	f383 8811 	msr	BASEPRI, r3
 800eaa8:	f3bf 8f6f 	isb	sy
 800eaac:	f3bf 8f4f 	dsb	sy
 800eab0:	613b      	str	r3, [r7, #16]
}
 800eab2:	bf00      	nop
 800eab4:	bf00      	nop
 800eab6:	e7fd      	b.n	800eab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaba:	685a      	ldr	r2, [r3, #4]
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	69bb      	ldr	r3, [r7, #24]
 800eac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac6:	687a      	ldr	r2, [r7, #4]
 800eac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eaca:	69b8      	ldr	r0, [r7, #24]
 800eacc:	f000 f90a 	bl	800ece4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ead0:	4b1d      	ldr	r3, [pc, #116]	@ (800eb48 <pvPortMalloc+0x18c>)
 800ead2:	681a      	ldr	r2, [r3, #0]
 800ead4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	1ad3      	subs	r3, r2, r3
 800eada:	4a1b      	ldr	r2, [pc, #108]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eadc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eade:	4b1a      	ldr	r3, [pc, #104]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eae0:	681a      	ldr	r2, [r3, #0]
 800eae2:	4b1b      	ldr	r3, [pc, #108]	@ (800eb50 <pvPortMalloc+0x194>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d203      	bcs.n	800eaf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaea:	4b17      	ldr	r3, [pc, #92]	@ (800eb48 <pvPortMalloc+0x18c>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	4a18      	ldr	r2, [pc, #96]	@ (800eb50 <pvPortMalloc+0x194>)
 800eaf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	685a      	ldr	r2, [r3, #4]
 800eaf6:	4b13      	ldr	r3, [pc, #76]	@ (800eb44 <pvPortMalloc+0x188>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	431a      	orrs	r2, r3
 800eafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb02:	2200      	movs	r2, #0
 800eb04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb06:	4b13      	ldr	r3, [pc, #76]	@ (800eb54 <pvPortMalloc+0x198>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	3301      	adds	r3, #1
 800eb0c:	4a11      	ldr	r2, [pc, #68]	@ (800eb54 <pvPortMalloc+0x198>)
 800eb0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb10:	f7fe fbce 	bl	800d2b0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	f003 0307 	and.w	r3, r3, #7
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d00b      	beq.n	800eb36 <pvPortMalloc+0x17a>
	__asm volatile
 800eb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb22:	f383 8811 	msr	BASEPRI, r3
 800eb26:	f3bf 8f6f 	isb	sy
 800eb2a:	f3bf 8f4f 	dsb	sy
 800eb2e:	60fb      	str	r3, [r7, #12]
}
 800eb30:	bf00      	nop
 800eb32:	bf00      	nop
 800eb34:	e7fd      	b.n	800eb32 <pvPortMalloc+0x176>
	return pvReturn;
 800eb36:	69fb      	ldr	r3, [r7, #28]
}
 800eb38:	4618      	mov	r0, r3
 800eb3a:	3728      	adds	r7, #40	@ 0x28
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	bd80      	pop	{r7, pc}
 800eb40:	200053dc 	.word	0x200053dc
 800eb44:	200053f0 	.word	0x200053f0
 800eb48:	200053e0 	.word	0x200053e0
 800eb4c:	200053d4 	.word	0x200053d4
 800eb50:	200053e4 	.word	0x200053e4
 800eb54:	200053e8 	.word	0x200053e8

0800eb58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b086      	sub	sp, #24
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d04f      	beq.n	800ec0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb6a:	2308      	movs	r3, #8
 800eb6c:	425b      	negs	r3, r3
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	4413      	add	r3, r2
 800eb72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	685a      	ldr	r2, [r3, #4]
 800eb7c:	4b25      	ldr	r3, [pc, #148]	@ (800ec14 <vPortFree+0xbc>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	4013      	ands	r3, r2
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d10b      	bne.n	800eb9e <vPortFree+0x46>
	__asm volatile
 800eb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb8a:	f383 8811 	msr	BASEPRI, r3
 800eb8e:	f3bf 8f6f 	isb	sy
 800eb92:	f3bf 8f4f 	dsb	sy
 800eb96:	60fb      	str	r3, [r7, #12]
}
 800eb98:	bf00      	nop
 800eb9a:	bf00      	nop
 800eb9c:	e7fd      	b.n	800eb9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eb9e:	693b      	ldr	r3, [r7, #16]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d00b      	beq.n	800ebbe <vPortFree+0x66>
	__asm volatile
 800eba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebaa:	f383 8811 	msr	BASEPRI, r3
 800ebae:	f3bf 8f6f 	isb	sy
 800ebb2:	f3bf 8f4f 	dsb	sy
 800ebb6:	60bb      	str	r3, [r7, #8]
}
 800ebb8:	bf00      	nop
 800ebba:	bf00      	nop
 800ebbc:	e7fd      	b.n	800ebba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	685a      	ldr	r2, [r3, #4]
 800ebc2:	4b14      	ldr	r3, [pc, #80]	@ (800ec14 <vPortFree+0xbc>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	4013      	ands	r3, r2
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d01e      	beq.n	800ec0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebcc:	693b      	ldr	r3, [r7, #16]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d11a      	bne.n	800ec0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	685a      	ldr	r2, [r3, #4]
 800ebd8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec14 <vPortFree+0xbc>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	43db      	mvns	r3, r3
 800ebde:	401a      	ands	r2, r3
 800ebe0:	693b      	ldr	r3, [r7, #16]
 800ebe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebe4:	f7fe fb56 	bl	800d294 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	685a      	ldr	r2, [r3, #4]
 800ebec:	4b0a      	ldr	r3, [pc, #40]	@ (800ec18 <vPortFree+0xc0>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4413      	add	r3, r2
 800ebf2:	4a09      	ldr	r2, [pc, #36]	@ (800ec18 <vPortFree+0xc0>)
 800ebf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebf6:	6938      	ldr	r0, [r7, #16]
 800ebf8:	f000 f874 	bl	800ece4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ebfc:	4b07      	ldr	r3, [pc, #28]	@ (800ec1c <vPortFree+0xc4>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	3301      	adds	r3, #1
 800ec02:	4a06      	ldr	r2, [pc, #24]	@ (800ec1c <vPortFree+0xc4>)
 800ec04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec06:	f7fe fb53 	bl	800d2b0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec0a:	bf00      	nop
 800ec0c:	3718      	adds	r7, #24
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}
 800ec12:	bf00      	nop
 800ec14:	200053f0 	.word	0x200053f0
 800ec18:	200053e0 	.word	0x200053e0
 800ec1c:	200053ec 	.word	0x200053ec

0800ec20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec20:	b480      	push	{r7}
 800ec22:	b085      	sub	sp, #20
 800ec24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ec2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec2c:	4b27      	ldr	r3, [pc, #156]	@ (800eccc <prvHeapInit+0xac>)
 800ec2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	f003 0307 	and.w	r3, r3, #7
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d00c      	beq.n	800ec54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	3307      	adds	r3, #7
 800ec3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	f023 0307 	bic.w	r3, r3, #7
 800ec46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec48:	68ba      	ldr	r2, [r7, #8]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	1ad3      	subs	r3, r2, r3
 800ec4e:	4a1f      	ldr	r2, [pc, #124]	@ (800eccc <prvHeapInit+0xac>)
 800ec50:	4413      	add	r3, r2
 800ec52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec58:	4a1d      	ldr	r2, [pc, #116]	@ (800ecd0 <prvHeapInit+0xb0>)
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec5e:	4b1c      	ldr	r3, [pc, #112]	@ (800ecd0 <prvHeapInit+0xb0>)
 800ec60:	2200      	movs	r2, #0
 800ec62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	68ba      	ldr	r2, [r7, #8]
 800ec68:	4413      	add	r3, r2
 800ec6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec6c:	2208      	movs	r2, #8
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	1a9b      	subs	r3, r3, r2
 800ec72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	f023 0307 	bic.w	r3, r3, #7
 800ec7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	4a15      	ldr	r2, [pc, #84]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec82:	4b14      	ldr	r3, [pc, #80]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2200      	movs	r2, #0
 800ec88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec8a:	4b12      	ldr	r3, [pc, #72]	@ (800ecd4 <prvHeapInit+0xb4>)
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2200      	movs	r2, #0
 800ec90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	68fa      	ldr	r2, [r7, #12]
 800ec9a:	1ad2      	subs	r2, r2, r3
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eca0:	4b0c      	ldr	r3, [pc, #48]	@ (800ecd4 <prvHeapInit+0xb4>)
 800eca2:	681a      	ldr	r2, [r3, #0]
 800eca4:	683b      	ldr	r3, [r7, #0]
 800eca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	685b      	ldr	r3, [r3, #4]
 800ecac:	4a0a      	ldr	r2, [pc, #40]	@ (800ecd8 <prvHeapInit+0xb8>)
 800ecae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecb0:	683b      	ldr	r3, [r7, #0]
 800ecb2:	685b      	ldr	r3, [r3, #4]
 800ecb4:	4a09      	ldr	r2, [pc, #36]	@ (800ecdc <prvHeapInit+0xbc>)
 800ecb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecb8:	4b09      	ldr	r3, [pc, #36]	@ (800ece0 <prvHeapInit+0xc0>)
 800ecba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ecbe:	601a      	str	r2, [r3, #0]
}
 800ecc0:	bf00      	nop
 800ecc2:	3714      	adds	r7, #20
 800ecc4:	46bd      	mov	sp, r7
 800ecc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecca:	4770      	bx	lr
 800eccc:	200017d4 	.word	0x200017d4
 800ecd0:	200053d4 	.word	0x200053d4
 800ecd4:	200053dc 	.word	0x200053dc
 800ecd8:	200053e4 	.word	0x200053e4
 800ecdc:	200053e0 	.word	0x200053e0
 800ece0:	200053f0 	.word	0x200053f0

0800ece4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ece4:	b480      	push	{r7}
 800ece6:	b085      	sub	sp, #20
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecec:	4b28      	ldr	r3, [pc, #160]	@ (800ed90 <prvInsertBlockIntoFreeList+0xac>)
 800ecee:	60fb      	str	r3, [r7, #12]
 800ecf0:	e002      	b.n	800ecf8 <prvInsertBlockIntoFreeList+0x14>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	60fb      	str	r3, [r7, #12]
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	429a      	cmp	r2, r3
 800ed00:	d8f7      	bhi.n	800ecf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	685b      	ldr	r3, [r3, #4]
 800ed0a:	68ba      	ldr	r2, [r7, #8]
 800ed0c:	4413      	add	r3, r2
 800ed0e:	687a      	ldr	r2, [r7, #4]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d108      	bne.n	800ed26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	685a      	ldr	r2, [r3, #4]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	685b      	ldr	r3, [r3, #4]
 800ed1c:	441a      	add	r2, r3
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	441a      	add	r2, r3
 800ed32:	68fb      	ldr	r3, [r7, #12]
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	429a      	cmp	r2, r3
 800ed38:	d118      	bne.n	800ed6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681a      	ldr	r2, [r3, #0]
 800ed3e:	4b15      	ldr	r3, [pc, #84]	@ (800ed94 <prvInsertBlockIntoFreeList+0xb0>)
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	429a      	cmp	r2, r3
 800ed44:	d00d      	beq.n	800ed62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	685a      	ldr	r2, [r3, #4]
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	685b      	ldr	r3, [r3, #4]
 800ed50:	441a      	add	r2, r3
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	681a      	ldr	r2, [r3, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	601a      	str	r2, [r3, #0]
 800ed60:	e008      	b.n	800ed74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed62:	4b0c      	ldr	r3, [pc, #48]	@ (800ed94 <prvInsertBlockIntoFreeList+0xb0>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	601a      	str	r2, [r3, #0]
 800ed6a:	e003      	b.n	800ed74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed74:	68fa      	ldr	r2, [r7, #12]
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d002      	beq.n	800ed82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	687a      	ldr	r2, [r7, #4]
 800ed80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed82:	bf00      	nop
 800ed84:	3714      	adds	r7, #20
 800ed86:	46bd      	mov	sp, r7
 800ed88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8c:	4770      	bx	lr
 800ed8e:	bf00      	nop
 800ed90:	200053d4 	.word	0x200053d4
 800ed94:	200053dc 	.word	0x200053dc

0800ed98 <__cvt>:
 800ed98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed9c:	ec57 6b10 	vmov	r6, r7, d0
 800eda0:	2f00      	cmp	r7, #0
 800eda2:	460c      	mov	r4, r1
 800eda4:	4619      	mov	r1, r3
 800eda6:	463b      	mov	r3, r7
 800eda8:	bfbb      	ittet	lt
 800edaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800edae:	461f      	movlt	r7, r3
 800edb0:	2300      	movge	r3, #0
 800edb2:	232d      	movlt	r3, #45	@ 0x2d
 800edb4:	700b      	strb	r3, [r1, #0]
 800edb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800edb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800edbc:	4691      	mov	r9, r2
 800edbe:	f023 0820 	bic.w	r8, r3, #32
 800edc2:	bfbc      	itt	lt
 800edc4:	4632      	movlt	r2, r6
 800edc6:	4616      	movlt	r6, r2
 800edc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800edcc:	d005      	beq.n	800edda <__cvt+0x42>
 800edce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800edd2:	d100      	bne.n	800edd6 <__cvt+0x3e>
 800edd4:	3401      	adds	r4, #1
 800edd6:	2102      	movs	r1, #2
 800edd8:	e000      	b.n	800eddc <__cvt+0x44>
 800edda:	2103      	movs	r1, #3
 800eddc:	ab03      	add	r3, sp, #12
 800edde:	9301      	str	r3, [sp, #4]
 800ede0:	ab02      	add	r3, sp, #8
 800ede2:	9300      	str	r3, [sp, #0]
 800ede4:	ec47 6b10 	vmov	d0, r6, r7
 800ede8:	4653      	mov	r3, sl
 800edea:	4622      	mov	r2, r4
 800edec:	f001 f838 	bl	800fe60 <_dtoa_r>
 800edf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800edf4:	4605      	mov	r5, r0
 800edf6:	d119      	bne.n	800ee2c <__cvt+0x94>
 800edf8:	f019 0f01 	tst.w	r9, #1
 800edfc:	d00e      	beq.n	800ee1c <__cvt+0x84>
 800edfe:	eb00 0904 	add.w	r9, r0, r4
 800ee02:	2200      	movs	r2, #0
 800ee04:	2300      	movs	r3, #0
 800ee06:	4630      	mov	r0, r6
 800ee08:	4639      	mov	r1, r7
 800ee0a:	f7f1 fe65 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee0e:	b108      	cbz	r0, 800ee14 <__cvt+0x7c>
 800ee10:	f8cd 900c 	str.w	r9, [sp, #12]
 800ee14:	2230      	movs	r2, #48	@ 0x30
 800ee16:	9b03      	ldr	r3, [sp, #12]
 800ee18:	454b      	cmp	r3, r9
 800ee1a:	d31e      	bcc.n	800ee5a <__cvt+0xc2>
 800ee1c:	9b03      	ldr	r3, [sp, #12]
 800ee1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ee20:	1b5b      	subs	r3, r3, r5
 800ee22:	4628      	mov	r0, r5
 800ee24:	6013      	str	r3, [r2, #0]
 800ee26:	b004      	add	sp, #16
 800ee28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ee30:	eb00 0904 	add.w	r9, r0, r4
 800ee34:	d1e5      	bne.n	800ee02 <__cvt+0x6a>
 800ee36:	7803      	ldrb	r3, [r0, #0]
 800ee38:	2b30      	cmp	r3, #48	@ 0x30
 800ee3a:	d10a      	bne.n	800ee52 <__cvt+0xba>
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	2300      	movs	r3, #0
 800ee40:	4630      	mov	r0, r6
 800ee42:	4639      	mov	r1, r7
 800ee44:	f7f1 fe48 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee48:	b918      	cbnz	r0, 800ee52 <__cvt+0xba>
 800ee4a:	f1c4 0401 	rsb	r4, r4, #1
 800ee4e:	f8ca 4000 	str.w	r4, [sl]
 800ee52:	f8da 3000 	ldr.w	r3, [sl]
 800ee56:	4499      	add	r9, r3
 800ee58:	e7d3      	b.n	800ee02 <__cvt+0x6a>
 800ee5a:	1c59      	adds	r1, r3, #1
 800ee5c:	9103      	str	r1, [sp, #12]
 800ee5e:	701a      	strb	r2, [r3, #0]
 800ee60:	e7d9      	b.n	800ee16 <__cvt+0x7e>

0800ee62 <__exponent>:
 800ee62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee64:	2900      	cmp	r1, #0
 800ee66:	bfba      	itte	lt
 800ee68:	4249      	neglt	r1, r1
 800ee6a:	232d      	movlt	r3, #45	@ 0x2d
 800ee6c:	232b      	movge	r3, #43	@ 0x2b
 800ee6e:	2909      	cmp	r1, #9
 800ee70:	7002      	strb	r2, [r0, #0]
 800ee72:	7043      	strb	r3, [r0, #1]
 800ee74:	dd29      	ble.n	800eeca <__exponent+0x68>
 800ee76:	f10d 0307 	add.w	r3, sp, #7
 800ee7a:	461d      	mov	r5, r3
 800ee7c:	270a      	movs	r7, #10
 800ee7e:	461a      	mov	r2, r3
 800ee80:	fbb1 f6f7 	udiv	r6, r1, r7
 800ee84:	fb07 1416 	mls	r4, r7, r6, r1
 800ee88:	3430      	adds	r4, #48	@ 0x30
 800ee8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ee8e:	460c      	mov	r4, r1
 800ee90:	2c63      	cmp	r4, #99	@ 0x63
 800ee92:	f103 33ff 	add.w	r3, r3, #4294967295
 800ee96:	4631      	mov	r1, r6
 800ee98:	dcf1      	bgt.n	800ee7e <__exponent+0x1c>
 800ee9a:	3130      	adds	r1, #48	@ 0x30
 800ee9c:	1e94      	subs	r4, r2, #2
 800ee9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800eea2:	1c41      	adds	r1, r0, #1
 800eea4:	4623      	mov	r3, r4
 800eea6:	42ab      	cmp	r3, r5
 800eea8:	d30a      	bcc.n	800eec0 <__exponent+0x5e>
 800eeaa:	f10d 0309 	add.w	r3, sp, #9
 800eeae:	1a9b      	subs	r3, r3, r2
 800eeb0:	42ac      	cmp	r4, r5
 800eeb2:	bf88      	it	hi
 800eeb4:	2300      	movhi	r3, #0
 800eeb6:	3302      	adds	r3, #2
 800eeb8:	4403      	add	r3, r0
 800eeba:	1a18      	subs	r0, r3, r0
 800eebc:	b003      	add	sp, #12
 800eebe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eec0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800eec4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800eec8:	e7ed      	b.n	800eea6 <__exponent+0x44>
 800eeca:	2330      	movs	r3, #48	@ 0x30
 800eecc:	3130      	adds	r1, #48	@ 0x30
 800eece:	7083      	strb	r3, [r0, #2]
 800eed0:	70c1      	strb	r1, [r0, #3]
 800eed2:	1d03      	adds	r3, r0, #4
 800eed4:	e7f1      	b.n	800eeba <__exponent+0x58>
	...

0800eed8 <_printf_float>:
 800eed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eedc:	b08d      	sub	sp, #52	@ 0x34
 800eede:	460c      	mov	r4, r1
 800eee0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800eee4:	4616      	mov	r6, r2
 800eee6:	461f      	mov	r7, r3
 800eee8:	4605      	mov	r5, r0
 800eeea:	f000 fe2f 	bl	800fb4c <_localeconv_r>
 800eeee:	6803      	ldr	r3, [r0, #0]
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7f1 f9c4 	bl	8000280 <strlen>
 800eef8:	2300      	movs	r3, #0
 800eefa:	930a      	str	r3, [sp, #40]	@ 0x28
 800eefc:	f8d8 3000 	ldr.w	r3, [r8]
 800ef00:	9005      	str	r0, [sp, #20]
 800ef02:	3307      	adds	r3, #7
 800ef04:	f023 0307 	bic.w	r3, r3, #7
 800ef08:	f103 0208 	add.w	r2, r3, #8
 800ef0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ef10:	f8d4 b000 	ldr.w	fp, [r4]
 800ef14:	f8c8 2000 	str.w	r2, [r8]
 800ef18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ef1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ef20:	9307      	str	r3, [sp, #28]
 800ef22:	f8cd 8018 	str.w	r8, [sp, #24]
 800ef26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ef2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef2e:	4b9c      	ldr	r3, [pc, #624]	@ (800f1a0 <_printf_float+0x2c8>)
 800ef30:	f04f 32ff 	mov.w	r2, #4294967295
 800ef34:	f7f1 fe02 	bl	8000b3c <__aeabi_dcmpun>
 800ef38:	bb70      	cbnz	r0, 800ef98 <_printf_float+0xc0>
 800ef3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ef3e:	4b98      	ldr	r3, [pc, #608]	@ (800f1a0 <_printf_float+0x2c8>)
 800ef40:	f04f 32ff 	mov.w	r2, #4294967295
 800ef44:	f7f1 fddc 	bl	8000b00 <__aeabi_dcmple>
 800ef48:	bb30      	cbnz	r0, 800ef98 <_printf_float+0xc0>
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	4640      	mov	r0, r8
 800ef50:	4649      	mov	r1, r9
 800ef52:	f7f1 fdcb 	bl	8000aec <__aeabi_dcmplt>
 800ef56:	b110      	cbz	r0, 800ef5e <_printf_float+0x86>
 800ef58:	232d      	movs	r3, #45	@ 0x2d
 800ef5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ef5e:	4a91      	ldr	r2, [pc, #580]	@ (800f1a4 <_printf_float+0x2cc>)
 800ef60:	4b91      	ldr	r3, [pc, #580]	@ (800f1a8 <_printf_float+0x2d0>)
 800ef62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef66:	bf8c      	ite	hi
 800ef68:	4690      	movhi	r8, r2
 800ef6a:	4698      	movls	r8, r3
 800ef6c:	2303      	movs	r3, #3
 800ef6e:	6123      	str	r3, [r4, #16]
 800ef70:	f02b 0304 	bic.w	r3, fp, #4
 800ef74:	6023      	str	r3, [r4, #0]
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	9700      	str	r7, [sp, #0]
 800ef7c:	4633      	mov	r3, r6
 800ef7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ef80:	4621      	mov	r1, r4
 800ef82:	4628      	mov	r0, r5
 800ef84:	f000 f9d2 	bl	800f32c <_printf_common>
 800ef88:	3001      	adds	r0, #1
 800ef8a:	f040 808d 	bne.w	800f0a8 <_printf_float+0x1d0>
 800ef8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ef92:	b00d      	add	sp, #52	@ 0x34
 800ef94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef98:	4642      	mov	r2, r8
 800ef9a:	464b      	mov	r3, r9
 800ef9c:	4640      	mov	r0, r8
 800ef9e:	4649      	mov	r1, r9
 800efa0:	f7f1 fdcc 	bl	8000b3c <__aeabi_dcmpun>
 800efa4:	b140      	cbz	r0, 800efb8 <_printf_float+0xe0>
 800efa6:	464b      	mov	r3, r9
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	bfbc      	itt	lt
 800efac:	232d      	movlt	r3, #45	@ 0x2d
 800efae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800efb2:	4a7e      	ldr	r2, [pc, #504]	@ (800f1ac <_printf_float+0x2d4>)
 800efb4:	4b7e      	ldr	r3, [pc, #504]	@ (800f1b0 <_printf_float+0x2d8>)
 800efb6:	e7d4      	b.n	800ef62 <_printf_float+0x8a>
 800efb8:	6863      	ldr	r3, [r4, #4]
 800efba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800efbe:	9206      	str	r2, [sp, #24]
 800efc0:	1c5a      	adds	r2, r3, #1
 800efc2:	d13b      	bne.n	800f03c <_printf_float+0x164>
 800efc4:	2306      	movs	r3, #6
 800efc6:	6063      	str	r3, [r4, #4]
 800efc8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800efcc:	2300      	movs	r3, #0
 800efce:	6022      	str	r2, [r4, #0]
 800efd0:	9303      	str	r3, [sp, #12]
 800efd2:	ab0a      	add	r3, sp, #40	@ 0x28
 800efd4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800efd8:	ab09      	add	r3, sp, #36	@ 0x24
 800efda:	9300      	str	r3, [sp, #0]
 800efdc:	6861      	ldr	r1, [r4, #4]
 800efde:	ec49 8b10 	vmov	d0, r8, r9
 800efe2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800efe6:	4628      	mov	r0, r5
 800efe8:	f7ff fed6 	bl	800ed98 <__cvt>
 800efec:	9b06      	ldr	r3, [sp, #24]
 800efee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eff0:	2b47      	cmp	r3, #71	@ 0x47
 800eff2:	4680      	mov	r8, r0
 800eff4:	d129      	bne.n	800f04a <_printf_float+0x172>
 800eff6:	1cc8      	adds	r0, r1, #3
 800eff8:	db02      	blt.n	800f000 <_printf_float+0x128>
 800effa:	6863      	ldr	r3, [r4, #4]
 800effc:	4299      	cmp	r1, r3
 800effe:	dd41      	ble.n	800f084 <_printf_float+0x1ac>
 800f000:	f1aa 0a02 	sub.w	sl, sl, #2
 800f004:	fa5f fa8a 	uxtb.w	sl, sl
 800f008:	3901      	subs	r1, #1
 800f00a:	4652      	mov	r2, sl
 800f00c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f010:	9109      	str	r1, [sp, #36]	@ 0x24
 800f012:	f7ff ff26 	bl	800ee62 <__exponent>
 800f016:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f018:	1813      	adds	r3, r2, r0
 800f01a:	2a01      	cmp	r2, #1
 800f01c:	4681      	mov	r9, r0
 800f01e:	6123      	str	r3, [r4, #16]
 800f020:	dc02      	bgt.n	800f028 <_printf_float+0x150>
 800f022:	6822      	ldr	r2, [r4, #0]
 800f024:	07d2      	lsls	r2, r2, #31
 800f026:	d501      	bpl.n	800f02c <_printf_float+0x154>
 800f028:	3301      	adds	r3, #1
 800f02a:	6123      	str	r3, [r4, #16]
 800f02c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f030:	2b00      	cmp	r3, #0
 800f032:	d0a2      	beq.n	800ef7a <_printf_float+0xa2>
 800f034:	232d      	movs	r3, #45	@ 0x2d
 800f036:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f03a:	e79e      	b.n	800ef7a <_printf_float+0xa2>
 800f03c:	9a06      	ldr	r2, [sp, #24]
 800f03e:	2a47      	cmp	r2, #71	@ 0x47
 800f040:	d1c2      	bne.n	800efc8 <_printf_float+0xf0>
 800f042:	2b00      	cmp	r3, #0
 800f044:	d1c0      	bne.n	800efc8 <_printf_float+0xf0>
 800f046:	2301      	movs	r3, #1
 800f048:	e7bd      	b.n	800efc6 <_printf_float+0xee>
 800f04a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f04e:	d9db      	bls.n	800f008 <_printf_float+0x130>
 800f050:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800f054:	d118      	bne.n	800f088 <_printf_float+0x1b0>
 800f056:	2900      	cmp	r1, #0
 800f058:	6863      	ldr	r3, [r4, #4]
 800f05a:	dd0b      	ble.n	800f074 <_printf_float+0x19c>
 800f05c:	6121      	str	r1, [r4, #16]
 800f05e:	b913      	cbnz	r3, 800f066 <_printf_float+0x18e>
 800f060:	6822      	ldr	r2, [r4, #0]
 800f062:	07d0      	lsls	r0, r2, #31
 800f064:	d502      	bpl.n	800f06c <_printf_float+0x194>
 800f066:	3301      	adds	r3, #1
 800f068:	440b      	add	r3, r1
 800f06a:	6123      	str	r3, [r4, #16]
 800f06c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f06e:	f04f 0900 	mov.w	r9, #0
 800f072:	e7db      	b.n	800f02c <_printf_float+0x154>
 800f074:	b913      	cbnz	r3, 800f07c <_printf_float+0x1a4>
 800f076:	6822      	ldr	r2, [r4, #0]
 800f078:	07d2      	lsls	r2, r2, #31
 800f07a:	d501      	bpl.n	800f080 <_printf_float+0x1a8>
 800f07c:	3302      	adds	r3, #2
 800f07e:	e7f4      	b.n	800f06a <_printf_float+0x192>
 800f080:	2301      	movs	r3, #1
 800f082:	e7f2      	b.n	800f06a <_printf_float+0x192>
 800f084:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800f088:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f08a:	4299      	cmp	r1, r3
 800f08c:	db05      	blt.n	800f09a <_printf_float+0x1c2>
 800f08e:	6823      	ldr	r3, [r4, #0]
 800f090:	6121      	str	r1, [r4, #16]
 800f092:	07d8      	lsls	r0, r3, #31
 800f094:	d5ea      	bpl.n	800f06c <_printf_float+0x194>
 800f096:	1c4b      	adds	r3, r1, #1
 800f098:	e7e7      	b.n	800f06a <_printf_float+0x192>
 800f09a:	2900      	cmp	r1, #0
 800f09c:	bfd4      	ite	le
 800f09e:	f1c1 0202 	rsble	r2, r1, #2
 800f0a2:	2201      	movgt	r2, #1
 800f0a4:	4413      	add	r3, r2
 800f0a6:	e7e0      	b.n	800f06a <_printf_float+0x192>
 800f0a8:	6823      	ldr	r3, [r4, #0]
 800f0aa:	055a      	lsls	r2, r3, #21
 800f0ac:	d407      	bmi.n	800f0be <_printf_float+0x1e6>
 800f0ae:	6923      	ldr	r3, [r4, #16]
 800f0b0:	4642      	mov	r2, r8
 800f0b2:	4631      	mov	r1, r6
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b8      	blx	r7
 800f0b8:	3001      	adds	r0, #1
 800f0ba:	d12b      	bne.n	800f114 <_printf_float+0x23c>
 800f0bc:	e767      	b.n	800ef8e <_printf_float+0xb6>
 800f0be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800f0c2:	f240 80dd 	bls.w	800f280 <_printf_float+0x3a8>
 800f0c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f0ca:	2200      	movs	r2, #0
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	f7f1 fd03 	bl	8000ad8 <__aeabi_dcmpeq>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d033      	beq.n	800f13e <_printf_float+0x266>
 800f0d6:	4a37      	ldr	r2, [pc, #220]	@ (800f1b4 <_printf_float+0x2dc>)
 800f0d8:	2301      	movs	r3, #1
 800f0da:	4631      	mov	r1, r6
 800f0dc:	4628      	mov	r0, r5
 800f0de:	47b8      	blx	r7
 800f0e0:	3001      	adds	r0, #1
 800f0e2:	f43f af54 	beq.w	800ef8e <_printf_float+0xb6>
 800f0e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f0ea:	4543      	cmp	r3, r8
 800f0ec:	db02      	blt.n	800f0f4 <_printf_float+0x21c>
 800f0ee:	6823      	ldr	r3, [r4, #0]
 800f0f0:	07d8      	lsls	r0, r3, #31
 800f0f2:	d50f      	bpl.n	800f114 <_printf_float+0x23c>
 800f0f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	f43f af45 	beq.w	800ef8e <_printf_float+0xb6>
 800f104:	f04f 0900 	mov.w	r9, #0
 800f108:	f108 38ff 	add.w	r8, r8, #4294967295
 800f10c:	f104 0a1a 	add.w	sl, r4, #26
 800f110:	45c8      	cmp	r8, r9
 800f112:	dc09      	bgt.n	800f128 <_printf_float+0x250>
 800f114:	6823      	ldr	r3, [r4, #0]
 800f116:	079b      	lsls	r3, r3, #30
 800f118:	f100 8103 	bmi.w	800f322 <_printf_float+0x44a>
 800f11c:	68e0      	ldr	r0, [r4, #12]
 800f11e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f120:	4298      	cmp	r0, r3
 800f122:	bfb8      	it	lt
 800f124:	4618      	movlt	r0, r3
 800f126:	e734      	b.n	800ef92 <_printf_float+0xba>
 800f128:	2301      	movs	r3, #1
 800f12a:	4652      	mov	r2, sl
 800f12c:	4631      	mov	r1, r6
 800f12e:	4628      	mov	r0, r5
 800f130:	47b8      	blx	r7
 800f132:	3001      	adds	r0, #1
 800f134:	f43f af2b 	beq.w	800ef8e <_printf_float+0xb6>
 800f138:	f109 0901 	add.w	r9, r9, #1
 800f13c:	e7e8      	b.n	800f110 <_printf_float+0x238>
 800f13e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f140:	2b00      	cmp	r3, #0
 800f142:	dc39      	bgt.n	800f1b8 <_printf_float+0x2e0>
 800f144:	4a1b      	ldr	r2, [pc, #108]	@ (800f1b4 <_printf_float+0x2dc>)
 800f146:	2301      	movs	r3, #1
 800f148:	4631      	mov	r1, r6
 800f14a:	4628      	mov	r0, r5
 800f14c:	47b8      	blx	r7
 800f14e:	3001      	adds	r0, #1
 800f150:	f43f af1d 	beq.w	800ef8e <_printf_float+0xb6>
 800f154:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f158:	ea59 0303 	orrs.w	r3, r9, r3
 800f15c:	d102      	bne.n	800f164 <_printf_float+0x28c>
 800f15e:	6823      	ldr	r3, [r4, #0]
 800f160:	07d9      	lsls	r1, r3, #31
 800f162:	d5d7      	bpl.n	800f114 <_printf_float+0x23c>
 800f164:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f168:	4631      	mov	r1, r6
 800f16a:	4628      	mov	r0, r5
 800f16c:	47b8      	blx	r7
 800f16e:	3001      	adds	r0, #1
 800f170:	f43f af0d 	beq.w	800ef8e <_printf_float+0xb6>
 800f174:	f04f 0a00 	mov.w	sl, #0
 800f178:	f104 0b1a 	add.w	fp, r4, #26
 800f17c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f17e:	425b      	negs	r3, r3
 800f180:	4553      	cmp	r3, sl
 800f182:	dc01      	bgt.n	800f188 <_printf_float+0x2b0>
 800f184:	464b      	mov	r3, r9
 800f186:	e793      	b.n	800f0b0 <_printf_float+0x1d8>
 800f188:	2301      	movs	r3, #1
 800f18a:	465a      	mov	r2, fp
 800f18c:	4631      	mov	r1, r6
 800f18e:	4628      	mov	r0, r5
 800f190:	47b8      	blx	r7
 800f192:	3001      	adds	r0, #1
 800f194:	f43f aefb 	beq.w	800ef8e <_printf_float+0xb6>
 800f198:	f10a 0a01 	add.w	sl, sl, #1
 800f19c:	e7ee      	b.n	800f17c <_printf_float+0x2a4>
 800f19e:	bf00      	nop
 800f1a0:	7fefffff 	.word	0x7fefffff
 800f1a4:	08013059 	.word	0x08013059
 800f1a8:	08013055 	.word	0x08013055
 800f1ac:	08013061 	.word	0x08013061
 800f1b0:	0801305d 	.word	0x0801305d
 800f1b4:	08013065 	.word	0x08013065
 800f1b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f1be:	4553      	cmp	r3, sl
 800f1c0:	bfa8      	it	ge
 800f1c2:	4653      	movge	r3, sl
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	4699      	mov	r9, r3
 800f1c8:	dc36      	bgt.n	800f238 <_printf_float+0x360>
 800f1ca:	f04f 0b00 	mov.w	fp, #0
 800f1ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1d2:	f104 021a 	add.w	r2, r4, #26
 800f1d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f1d8:	9306      	str	r3, [sp, #24]
 800f1da:	eba3 0309 	sub.w	r3, r3, r9
 800f1de:	455b      	cmp	r3, fp
 800f1e0:	dc31      	bgt.n	800f246 <_printf_float+0x36e>
 800f1e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1e4:	459a      	cmp	sl, r3
 800f1e6:	dc3a      	bgt.n	800f25e <_printf_float+0x386>
 800f1e8:	6823      	ldr	r3, [r4, #0]
 800f1ea:	07da      	lsls	r2, r3, #31
 800f1ec:	d437      	bmi.n	800f25e <_printf_float+0x386>
 800f1ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f1f0:	ebaa 0903 	sub.w	r9, sl, r3
 800f1f4:	9b06      	ldr	r3, [sp, #24]
 800f1f6:	ebaa 0303 	sub.w	r3, sl, r3
 800f1fa:	4599      	cmp	r9, r3
 800f1fc:	bfa8      	it	ge
 800f1fe:	4699      	movge	r9, r3
 800f200:	f1b9 0f00 	cmp.w	r9, #0
 800f204:	dc33      	bgt.n	800f26e <_printf_float+0x396>
 800f206:	f04f 0800 	mov.w	r8, #0
 800f20a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f20e:	f104 0b1a 	add.w	fp, r4, #26
 800f212:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f214:	ebaa 0303 	sub.w	r3, sl, r3
 800f218:	eba3 0309 	sub.w	r3, r3, r9
 800f21c:	4543      	cmp	r3, r8
 800f21e:	f77f af79 	ble.w	800f114 <_printf_float+0x23c>
 800f222:	2301      	movs	r3, #1
 800f224:	465a      	mov	r2, fp
 800f226:	4631      	mov	r1, r6
 800f228:	4628      	mov	r0, r5
 800f22a:	47b8      	blx	r7
 800f22c:	3001      	adds	r0, #1
 800f22e:	f43f aeae 	beq.w	800ef8e <_printf_float+0xb6>
 800f232:	f108 0801 	add.w	r8, r8, #1
 800f236:	e7ec      	b.n	800f212 <_printf_float+0x33a>
 800f238:	4642      	mov	r2, r8
 800f23a:	4631      	mov	r1, r6
 800f23c:	4628      	mov	r0, r5
 800f23e:	47b8      	blx	r7
 800f240:	3001      	adds	r0, #1
 800f242:	d1c2      	bne.n	800f1ca <_printf_float+0x2f2>
 800f244:	e6a3      	b.n	800ef8e <_printf_float+0xb6>
 800f246:	2301      	movs	r3, #1
 800f248:	4631      	mov	r1, r6
 800f24a:	4628      	mov	r0, r5
 800f24c:	9206      	str	r2, [sp, #24]
 800f24e:	47b8      	blx	r7
 800f250:	3001      	adds	r0, #1
 800f252:	f43f ae9c 	beq.w	800ef8e <_printf_float+0xb6>
 800f256:	9a06      	ldr	r2, [sp, #24]
 800f258:	f10b 0b01 	add.w	fp, fp, #1
 800f25c:	e7bb      	b.n	800f1d6 <_printf_float+0x2fe>
 800f25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f262:	4631      	mov	r1, r6
 800f264:	4628      	mov	r0, r5
 800f266:	47b8      	blx	r7
 800f268:	3001      	adds	r0, #1
 800f26a:	d1c0      	bne.n	800f1ee <_printf_float+0x316>
 800f26c:	e68f      	b.n	800ef8e <_printf_float+0xb6>
 800f26e:	9a06      	ldr	r2, [sp, #24]
 800f270:	464b      	mov	r3, r9
 800f272:	4442      	add	r2, r8
 800f274:	4631      	mov	r1, r6
 800f276:	4628      	mov	r0, r5
 800f278:	47b8      	blx	r7
 800f27a:	3001      	adds	r0, #1
 800f27c:	d1c3      	bne.n	800f206 <_printf_float+0x32e>
 800f27e:	e686      	b.n	800ef8e <_printf_float+0xb6>
 800f280:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f284:	f1ba 0f01 	cmp.w	sl, #1
 800f288:	dc01      	bgt.n	800f28e <_printf_float+0x3b6>
 800f28a:	07db      	lsls	r3, r3, #31
 800f28c:	d536      	bpl.n	800f2fc <_printf_float+0x424>
 800f28e:	2301      	movs	r3, #1
 800f290:	4642      	mov	r2, r8
 800f292:	4631      	mov	r1, r6
 800f294:	4628      	mov	r0, r5
 800f296:	47b8      	blx	r7
 800f298:	3001      	adds	r0, #1
 800f29a:	f43f ae78 	beq.w	800ef8e <_printf_float+0xb6>
 800f29e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f2a2:	4631      	mov	r1, r6
 800f2a4:	4628      	mov	r0, r5
 800f2a6:	47b8      	blx	r7
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	f43f ae70 	beq.w	800ef8e <_printf_float+0xb6>
 800f2ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f2ba:	f7f1 fc0d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f2be:	b9c0      	cbnz	r0, 800f2f2 <_printf_float+0x41a>
 800f2c0:	4653      	mov	r3, sl
 800f2c2:	f108 0201 	add.w	r2, r8, #1
 800f2c6:	4631      	mov	r1, r6
 800f2c8:	4628      	mov	r0, r5
 800f2ca:	47b8      	blx	r7
 800f2cc:	3001      	adds	r0, #1
 800f2ce:	d10c      	bne.n	800f2ea <_printf_float+0x412>
 800f2d0:	e65d      	b.n	800ef8e <_printf_float+0xb6>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	465a      	mov	r2, fp
 800f2d6:	4631      	mov	r1, r6
 800f2d8:	4628      	mov	r0, r5
 800f2da:	47b8      	blx	r7
 800f2dc:	3001      	adds	r0, #1
 800f2de:	f43f ae56 	beq.w	800ef8e <_printf_float+0xb6>
 800f2e2:	f108 0801 	add.w	r8, r8, #1
 800f2e6:	45d0      	cmp	r8, sl
 800f2e8:	dbf3      	blt.n	800f2d2 <_printf_float+0x3fa>
 800f2ea:	464b      	mov	r3, r9
 800f2ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f2f0:	e6df      	b.n	800f0b2 <_printf_float+0x1da>
 800f2f2:	f04f 0800 	mov.w	r8, #0
 800f2f6:	f104 0b1a 	add.w	fp, r4, #26
 800f2fa:	e7f4      	b.n	800f2e6 <_printf_float+0x40e>
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	4642      	mov	r2, r8
 800f300:	e7e1      	b.n	800f2c6 <_printf_float+0x3ee>
 800f302:	2301      	movs	r3, #1
 800f304:	464a      	mov	r2, r9
 800f306:	4631      	mov	r1, r6
 800f308:	4628      	mov	r0, r5
 800f30a:	47b8      	blx	r7
 800f30c:	3001      	adds	r0, #1
 800f30e:	f43f ae3e 	beq.w	800ef8e <_printf_float+0xb6>
 800f312:	f108 0801 	add.w	r8, r8, #1
 800f316:	68e3      	ldr	r3, [r4, #12]
 800f318:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f31a:	1a5b      	subs	r3, r3, r1
 800f31c:	4543      	cmp	r3, r8
 800f31e:	dcf0      	bgt.n	800f302 <_printf_float+0x42a>
 800f320:	e6fc      	b.n	800f11c <_printf_float+0x244>
 800f322:	f04f 0800 	mov.w	r8, #0
 800f326:	f104 0919 	add.w	r9, r4, #25
 800f32a:	e7f4      	b.n	800f316 <_printf_float+0x43e>

0800f32c <_printf_common>:
 800f32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f330:	4616      	mov	r6, r2
 800f332:	4698      	mov	r8, r3
 800f334:	688a      	ldr	r2, [r1, #8]
 800f336:	690b      	ldr	r3, [r1, #16]
 800f338:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f33c:	4293      	cmp	r3, r2
 800f33e:	bfb8      	it	lt
 800f340:	4613      	movlt	r3, r2
 800f342:	6033      	str	r3, [r6, #0]
 800f344:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f348:	4607      	mov	r7, r0
 800f34a:	460c      	mov	r4, r1
 800f34c:	b10a      	cbz	r2, 800f352 <_printf_common+0x26>
 800f34e:	3301      	adds	r3, #1
 800f350:	6033      	str	r3, [r6, #0]
 800f352:	6823      	ldr	r3, [r4, #0]
 800f354:	0699      	lsls	r1, r3, #26
 800f356:	bf42      	ittt	mi
 800f358:	6833      	ldrmi	r3, [r6, #0]
 800f35a:	3302      	addmi	r3, #2
 800f35c:	6033      	strmi	r3, [r6, #0]
 800f35e:	6825      	ldr	r5, [r4, #0]
 800f360:	f015 0506 	ands.w	r5, r5, #6
 800f364:	d106      	bne.n	800f374 <_printf_common+0x48>
 800f366:	f104 0a19 	add.w	sl, r4, #25
 800f36a:	68e3      	ldr	r3, [r4, #12]
 800f36c:	6832      	ldr	r2, [r6, #0]
 800f36e:	1a9b      	subs	r3, r3, r2
 800f370:	42ab      	cmp	r3, r5
 800f372:	dc26      	bgt.n	800f3c2 <_printf_common+0x96>
 800f374:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f378:	6822      	ldr	r2, [r4, #0]
 800f37a:	3b00      	subs	r3, #0
 800f37c:	bf18      	it	ne
 800f37e:	2301      	movne	r3, #1
 800f380:	0692      	lsls	r2, r2, #26
 800f382:	d42b      	bmi.n	800f3dc <_printf_common+0xb0>
 800f384:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f388:	4641      	mov	r1, r8
 800f38a:	4638      	mov	r0, r7
 800f38c:	47c8      	blx	r9
 800f38e:	3001      	adds	r0, #1
 800f390:	d01e      	beq.n	800f3d0 <_printf_common+0xa4>
 800f392:	6823      	ldr	r3, [r4, #0]
 800f394:	6922      	ldr	r2, [r4, #16]
 800f396:	f003 0306 	and.w	r3, r3, #6
 800f39a:	2b04      	cmp	r3, #4
 800f39c:	bf02      	ittt	eq
 800f39e:	68e5      	ldreq	r5, [r4, #12]
 800f3a0:	6833      	ldreq	r3, [r6, #0]
 800f3a2:	1aed      	subeq	r5, r5, r3
 800f3a4:	68a3      	ldr	r3, [r4, #8]
 800f3a6:	bf0c      	ite	eq
 800f3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3ac:	2500      	movne	r5, #0
 800f3ae:	4293      	cmp	r3, r2
 800f3b0:	bfc4      	itt	gt
 800f3b2:	1a9b      	subgt	r3, r3, r2
 800f3b4:	18ed      	addgt	r5, r5, r3
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	341a      	adds	r4, #26
 800f3ba:	42b5      	cmp	r5, r6
 800f3bc:	d11a      	bne.n	800f3f4 <_printf_common+0xc8>
 800f3be:	2000      	movs	r0, #0
 800f3c0:	e008      	b.n	800f3d4 <_printf_common+0xa8>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	4652      	mov	r2, sl
 800f3c6:	4641      	mov	r1, r8
 800f3c8:	4638      	mov	r0, r7
 800f3ca:	47c8      	blx	r9
 800f3cc:	3001      	adds	r0, #1
 800f3ce:	d103      	bne.n	800f3d8 <_printf_common+0xac>
 800f3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3d8:	3501      	adds	r5, #1
 800f3da:	e7c6      	b.n	800f36a <_printf_common+0x3e>
 800f3dc:	18e1      	adds	r1, r4, r3
 800f3de:	1c5a      	adds	r2, r3, #1
 800f3e0:	2030      	movs	r0, #48	@ 0x30
 800f3e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3e6:	4422      	add	r2, r4
 800f3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f3f0:	3302      	adds	r3, #2
 800f3f2:	e7c7      	b.n	800f384 <_printf_common+0x58>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	4622      	mov	r2, r4
 800f3f8:	4641      	mov	r1, r8
 800f3fa:	4638      	mov	r0, r7
 800f3fc:	47c8      	blx	r9
 800f3fe:	3001      	adds	r0, #1
 800f400:	d0e6      	beq.n	800f3d0 <_printf_common+0xa4>
 800f402:	3601      	adds	r6, #1
 800f404:	e7d9      	b.n	800f3ba <_printf_common+0x8e>
	...

0800f408 <_printf_i>:
 800f408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f40c:	7e0f      	ldrb	r7, [r1, #24]
 800f40e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f410:	2f78      	cmp	r7, #120	@ 0x78
 800f412:	4691      	mov	r9, r2
 800f414:	4680      	mov	r8, r0
 800f416:	460c      	mov	r4, r1
 800f418:	469a      	mov	sl, r3
 800f41a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f41e:	d807      	bhi.n	800f430 <_printf_i+0x28>
 800f420:	2f62      	cmp	r7, #98	@ 0x62
 800f422:	d80a      	bhi.n	800f43a <_printf_i+0x32>
 800f424:	2f00      	cmp	r7, #0
 800f426:	f000 80d1 	beq.w	800f5cc <_printf_i+0x1c4>
 800f42a:	2f58      	cmp	r7, #88	@ 0x58
 800f42c:	f000 80b8 	beq.w	800f5a0 <_printf_i+0x198>
 800f430:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f434:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f438:	e03a      	b.n	800f4b0 <_printf_i+0xa8>
 800f43a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f43e:	2b15      	cmp	r3, #21
 800f440:	d8f6      	bhi.n	800f430 <_printf_i+0x28>
 800f442:	a101      	add	r1, pc, #4	@ (adr r1, 800f448 <_printf_i+0x40>)
 800f444:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f448:	0800f4a1 	.word	0x0800f4a1
 800f44c:	0800f4b5 	.word	0x0800f4b5
 800f450:	0800f431 	.word	0x0800f431
 800f454:	0800f431 	.word	0x0800f431
 800f458:	0800f431 	.word	0x0800f431
 800f45c:	0800f431 	.word	0x0800f431
 800f460:	0800f4b5 	.word	0x0800f4b5
 800f464:	0800f431 	.word	0x0800f431
 800f468:	0800f431 	.word	0x0800f431
 800f46c:	0800f431 	.word	0x0800f431
 800f470:	0800f431 	.word	0x0800f431
 800f474:	0800f5b3 	.word	0x0800f5b3
 800f478:	0800f4df 	.word	0x0800f4df
 800f47c:	0800f56d 	.word	0x0800f56d
 800f480:	0800f431 	.word	0x0800f431
 800f484:	0800f431 	.word	0x0800f431
 800f488:	0800f5d5 	.word	0x0800f5d5
 800f48c:	0800f431 	.word	0x0800f431
 800f490:	0800f4df 	.word	0x0800f4df
 800f494:	0800f431 	.word	0x0800f431
 800f498:	0800f431 	.word	0x0800f431
 800f49c:	0800f575 	.word	0x0800f575
 800f4a0:	6833      	ldr	r3, [r6, #0]
 800f4a2:	1d1a      	adds	r2, r3, #4
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	6032      	str	r2, [r6, #0]
 800f4a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	e09c      	b.n	800f5ee <_printf_i+0x1e6>
 800f4b4:	6833      	ldr	r3, [r6, #0]
 800f4b6:	6820      	ldr	r0, [r4, #0]
 800f4b8:	1d19      	adds	r1, r3, #4
 800f4ba:	6031      	str	r1, [r6, #0]
 800f4bc:	0606      	lsls	r6, r0, #24
 800f4be:	d501      	bpl.n	800f4c4 <_printf_i+0xbc>
 800f4c0:	681d      	ldr	r5, [r3, #0]
 800f4c2:	e003      	b.n	800f4cc <_printf_i+0xc4>
 800f4c4:	0645      	lsls	r5, r0, #25
 800f4c6:	d5fb      	bpl.n	800f4c0 <_printf_i+0xb8>
 800f4c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4cc:	2d00      	cmp	r5, #0
 800f4ce:	da03      	bge.n	800f4d8 <_printf_i+0xd0>
 800f4d0:	232d      	movs	r3, #45	@ 0x2d
 800f4d2:	426d      	negs	r5, r5
 800f4d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4d8:	4858      	ldr	r0, [pc, #352]	@ (800f63c <_printf_i+0x234>)
 800f4da:	230a      	movs	r3, #10
 800f4dc:	e011      	b.n	800f502 <_printf_i+0xfa>
 800f4de:	6821      	ldr	r1, [r4, #0]
 800f4e0:	6833      	ldr	r3, [r6, #0]
 800f4e2:	0608      	lsls	r0, r1, #24
 800f4e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4e8:	d402      	bmi.n	800f4f0 <_printf_i+0xe8>
 800f4ea:	0649      	lsls	r1, r1, #25
 800f4ec:	bf48      	it	mi
 800f4ee:	b2ad      	uxthmi	r5, r5
 800f4f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f4f2:	4852      	ldr	r0, [pc, #328]	@ (800f63c <_printf_i+0x234>)
 800f4f4:	6033      	str	r3, [r6, #0]
 800f4f6:	bf14      	ite	ne
 800f4f8:	230a      	movne	r3, #10
 800f4fa:	2308      	moveq	r3, #8
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f502:	6866      	ldr	r6, [r4, #4]
 800f504:	60a6      	str	r6, [r4, #8]
 800f506:	2e00      	cmp	r6, #0
 800f508:	db05      	blt.n	800f516 <_printf_i+0x10e>
 800f50a:	6821      	ldr	r1, [r4, #0]
 800f50c:	432e      	orrs	r6, r5
 800f50e:	f021 0104 	bic.w	r1, r1, #4
 800f512:	6021      	str	r1, [r4, #0]
 800f514:	d04b      	beq.n	800f5ae <_printf_i+0x1a6>
 800f516:	4616      	mov	r6, r2
 800f518:	fbb5 f1f3 	udiv	r1, r5, r3
 800f51c:	fb03 5711 	mls	r7, r3, r1, r5
 800f520:	5dc7      	ldrb	r7, [r0, r7]
 800f522:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f526:	462f      	mov	r7, r5
 800f528:	42bb      	cmp	r3, r7
 800f52a:	460d      	mov	r5, r1
 800f52c:	d9f4      	bls.n	800f518 <_printf_i+0x110>
 800f52e:	2b08      	cmp	r3, #8
 800f530:	d10b      	bne.n	800f54a <_printf_i+0x142>
 800f532:	6823      	ldr	r3, [r4, #0]
 800f534:	07df      	lsls	r7, r3, #31
 800f536:	d508      	bpl.n	800f54a <_printf_i+0x142>
 800f538:	6923      	ldr	r3, [r4, #16]
 800f53a:	6861      	ldr	r1, [r4, #4]
 800f53c:	4299      	cmp	r1, r3
 800f53e:	bfde      	ittt	le
 800f540:	2330      	movle	r3, #48	@ 0x30
 800f542:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f546:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f54a:	1b92      	subs	r2, r2, r6
 800f54c:	6122      	str	r2, [r4, #16]
 800f54e:	f8cd a000 	str.w	sl, [sp]
 800f552:	464b      	mov	r3, r9
 800f554:	aa03      	add	r2, sp, #12
 800f556:	4621      	mov	r1, r4
 800f558:	4640      	mov	r0, r8
 800f55a:	f7ff fee7 	bl	800f32c <_printf_common>
 800f55e:	3001      	adds	r0, #1
 800f560:	d14a      	bne.n	800f5f8 <_printf_i+0x1f0>
 800f562:	f04f 30ff 	mov.w	r0, #4294967295
 800f566:	b004      	add	sp, #16
 800f568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f56c:	6823      	ldr	r3, [r4, #0]
 800f56e:	f043 0320 	orr.w	r3, r3, #32
 800f572:	6023      	str	r3, [r4, #0]
 800f574:	4832      	ldr	r0, [pc, #200]	@ (800f640 <_printf_i+0x238>)
 800f576:	2778      	movs	r7, #120	@ 0x78
 800f578:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f57c:	6823      	ldr	r3, [r4, #0]
 800f57e:	6831      	ldr	r1, [r6, #0]
 800f580:	061f      	lsls	r7, r3, #24
 800f582:	f851 5b04 	ldr.w	r5, [r1], #4
 800f586:	d402      	bmi.n	800f58e <_printf_i+0x186>
 800f588:	065f      	lsls	r7, r3, #25
 800f58a:	bf48      	it	mi
 800f58c:	b2ad      	uxthmi	r5, r5
 800f58e:	6031      	str	r1, [r6, #0]
 800f590:	07d9      	lsls	r1, r3, #31
 800f592:	bf44      	itt	mi
 800f594:	f043 0320 	orrmi.w	r3, r3, #32
 800f598:	6023      	strmi	r3, [r4, #0]
 800f59a:	b11d      	cbz	r5, 800f5a4 <_printf_i+0x19c>
 800f59c:	2310      	movs	r3, #16
 800f59e:	e7ad      	b.n	800f4fc <_printf_i+0xf4>
 800f5a0:	4826      	ldr	r0, [pc, #152]	@ (800f63c <_printf_i+0x234>)
 800f5a2:	e7e9      	b.n	800f578 <_printf_i+0x170>
 800f5a4:	6823      	ldr	r3, [r4, #0]
 800f5a6:	f023 0320 	bic.w	r3, r3, #32
 800f5aa:	6023      	str	r3, [r4, #0]
 800f5ac:	e7f6      	b.n	800f59c <_printf_i+0x194>
 800f5ae:	4616      	mov	r6, r2
 800f5b0:	e7bd      	b.n	800f52e <_printf_i+0x126>
 800f5b2:	6833      	ldr	r3, [r6, #0]
 800f5b4:	6825      	ldr	r5, [r4, #0]
 800f5b6:	6961      	ldr	r1, [r4, #20]
 800f5b8:	1d18      	adds	r0, r3, #4
 800f5ba:	6030      	str	r0, [r6, #0]
 800f5bc:	062e      	lsls	r6, r5, #24
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	d501      	bpl.n	800f5c6 <_printf_i+0x1be>
 800f5c2:	6019      	str	r1, [r3, #0]
 800f5c4:	e002      	b.n	800f5cc <_printf_i+0x1c4>
 800f5c6:	0668      	lsls	r0, r5, #25
 800f5c8:	d5fb      	bpl.n	800f5c2 <_printf_i+0x1ba>
 800f5ca:	8019      	strh	r1, [r3, #0]
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	6123      	str	r3, [r4, #16]
 800f5d0:	4616      	mov	r6, r2
 800f5d2:	e7bc      	b.n	800f54e <_printf_i+0x146>
 800f5d4:	6833      	ldr	r3, [r6, #0]
 800f5d6:	1d1a      	adds	r2, r3, #4
 800f5d8:	6032      	str	r2, [r6, #0]
 800f5da:	681e      	ldr	r6, [r3, #0]
 800f5dc:	6862      	ldr	r2, [r4, #4]
 800f5de:	2100      	movs	r1, #0
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	f7f0 fdfd 	bl	80001e0 <memchr>
 800f5e6:	b108      	cbz	r0, 800f5ec <_printf_i+0x1e4>
 800f5e8:	1b80      	subs	r0, r0, r6
 800f5ea:	6060      	str	r0, [r4, #4]
 800f5ec:	6863      	ldr	r3, [r4, #4]
 800f5ee:	6123      	str	r3, [r4, #16]
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5f6:	e7aa      	b.n	800f54e <_printf_i+0x146>
 800f5f8:	6923      	ldr	r3, [r4, #16]
 800f5fa:	4632      	mov	r2, r6
 800f5fc:	4649      	mov	r1, r9
 800f5fe:	4640      	mov	r0, r8
 800f600:	47d0      	blx	sl
 800f602:	3001      	adds	r0, #1
 800f604:	d0ad      	beq.n	800f562 <_printf_i+0x15a>
 800f606:	6823      	ldr	r3, [r4, #0]
 800f608:	079b      	lsls	r3, r3, #30
 800f60a:	d413      	bmi.n	800f634 <_printf_i+0x22c>
 800f60c:	68e0      	ldr	r0, [r4, #12]
 800f60e:	9b03      	ldr	r3, [sp, #12]
 800f610:	4298      	cmp	r0, r3
 800f612:	bfb8      	it	lt
 800f614:	4618      	movlt	r0, r3
 800f616:	e7a6      	b.n	800f566 <_printf_i+0x15e>
 800f618:	2301      	movs	r3, #1
 800f61a:	4632      	mov	r2, r6
 800f61c:	4649      	mov	r1, r9
 800f61e:	4640      	mov	r0, r8
 800f620:	47d0      	blx	sl
 800f622:	3001      	adds	r0, #1
 800f624:	d09d      	beq.n	800f562 <_printf_i+0x15a>
 800f626:	3501      	adds	r5, #1
 800f628:	68e3      	ldr	r3, [r4, #12]
 800f62a:	9903      	ldr	r1, [sp, #12]
 800f62c:	1a5b      	subs	r3, r3, r1
 800f62e:	42ab      	cmp	r3, r5
 800f630:	dcf2      	bgt.n	800f618 <_printf_i+0x210>
 800f632:	e7eb      	b.n	800f60c <_printf_i+0x204>
 800f634:	2500      	movs	r5, #0
 800f636:	f104 0619 	add.w	r6, r4, #25
 800f63a:	e7f5      	b.n	800f628 <_printf_i+0x220>
 800f63c:	08013067 	.word	0x08013067
 800f640:	08013078 	.word	0x08013078

0800f644 <std>:
 800f644:	2300      	movs	r3, #0
 800f646:	b510      	push	{r4, lr}
 800f648:	4604      	mov	r4, r0
 800f64a:	e9c0 3300 	strd	r3, r3, [r0]
 800f64e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f652:	6083      	str	r3, [r0, #8]
 800f654:	8181      	strh	r1, [r0, #12]
 800f656:	6643      	str	r3, [r0, #100]	@ 0x64
 800f658:	81c2      	strh	r2, [r0, #14]
 800f65a:	6183      	str	r3, [r0, #24]
 800f65c:	4619      	mov	r1, r3
 800f65e:	2208      	movs	r2, #8
 800f660:	305c      	adds	r0, #92	@ 0x5c
 800f662:	f000 fa6b 	bl	800fb3c <memset>
 800f666:	4b0d      	ldr	r3, [pc, #52]	@ (800f69c <std+0x58>)
 800f668:	6263      	str	r3, [r4, #36]	@ 0x24
 800f66a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a0 <std+0x5c>)
 800f66c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f66e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a4 <std+0x60>)
 800f670:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f672:	4b0d      	ldr	r3, [pc, #52]	@ (800f6a8 <std+0x64>)
 800f674:	6323      	str	r3, [r4, #48]	@ 0x30
 800f676:	4b0d      	ldr	r3, [pc, #52]	@ (800f6ac <std+0x68>)
 800f678:	6224      	str	r4, [r4, #32]
 800f67a:	429c      	cmp	r4, r3
 800f67c:	d006      	beq.n	800f68c <std+0x48>
 800f67e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f682:	4294      	cmp	r4, r2
 800f684:	d002      	beq.n	800f68c <std+0x48>
 800f686:	33d0      	adds	r3, #208	@ 0xd0
 800f688:	429c      	cmp	r4, r3
 800f68a:	d105      	bne.n	800f698 <std+0x54>
 800f68c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f694:	f000 bb2c 	b.w	800fcf0 <__retarget_lock_init_recursive>
 800f698:	bd10      	pop	{r4, pc}
 800f69a:	bf00      	nop
 800f69c:	0800f915 	.word	0x0800f915
 800f6a0:	0800f937 	.word	0x0800f937
 800f6a4:	0800f96f 	.word	0x0800f96f
 800f6a8:	0800f993 	.word	0x0800f993
 800f6ac:	200053f4 	.word	0x200053f4

0800f6b0 <stdio_exit_handler>:
 800f6b0:	4a02      	ldr	r2, [pc, #8]	@ (800f6bc <stdio_exit_handler+0xc>)
 800f6b2:	4903      	ldr	r1, [pc, #12]	@ (800f6c0 <stdio_exit_handler+0x10>)
 800f6b4:	4803      	ldr	r0, [pc, #12]	@ (800f6c4 <stdio_exit_handler+0x14>)
 800f6b6:	f000 b869 	b.w	800f78c <_fwalk_sglue>
 800f6ba:	bf00      	nop
 800f6bc:	20000018 	.word	0x20000018
 800f6c0:	08011931 	.word	0x08011931
 800f6c4:	20000028 	.word	0x20000028

0800f6c8 <cleanup_stdio>:
 800f6c8:	6841      	ldr	r1, [r0, #4]
 800f6ca:	4b0c      	ldr	r3, [pc, #48]	@ (800f6fc <cleanup_stdio+0x34>)
 800f6cc:	4299      	cmp	r1, r3
 800f6ce:	b510      	push	{r4, lr}
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	d001      	beq.n	800f6d8 <cleanup_stdio+0x10>
 800f6d4:	f002 f92c 	bl	8011930 <_fflush_r>
 800f6d8:	68a1      	ldr	r1, [r4, #8]
 800f6da:	4b09      	ldr	r3, [pc, #36]	@ (800f700 <cleanup_stdio+0x38>)
 800f6dc:	4299      	cmp	r1, r3
 800f6de:	d002      	beq.n	800f6e6 <cleanup_stdio+0x1e>
 800f6e0:	4620      	mov	r0, r4
 800f6e2:	f002 f925 	bl	8011930 <_fflush_r>
 800f6e6:	68e1      	ldr	r1, [r4, #12]
 800f6e8:	4b06      	ldr	r3, [pc, #24]	@ (800f704 <cleanup_stdio+0x3c>)
 800f6ea:	4299      	cmp	r1, r3
 800f6ec:	d004      	beq.n	800f6f8 <cleanup_stdio+0x30>
 800f6ee:	4620      	mov	r0, r4
 800f6f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f4:	f002 b91c 	b.w	8011930 <_fflush_r>
 800f6f8:	bd10      	pop	{r4, pc}
 800f6fa:	bf00      	nop
 800f6fc:	200053f4 	.word	0x200053f4
 800f700:	2000545c 	.word	0x2000545c
 800f704:	200054c4 	.word	0x200054c4

0800f708 <global_stdio_init.part.0>:
 800f708:	b510      	push	{r4, lr}
 800f70a:	4b0b      	ldr	r3, [pc, #44]	@ (800f738 <global_stdio_init.part.0+0x30>)
 800f70c:	4c0b      	ldr	r4, [pc, #44]	@ (800f73c <global_stdio_init.part.0+0x34>)
 800f70e:	4a0c      	ldr	r2, [pc, #48]	@ (800f740 <global_stdio_init.part.0+0x38>)
 800f710:	601a      	str	r2, [r3, #0]
 800f712:	4620      	mov	r0, r4
 800f714:	2200      	movs	r2, #0
 800f716:	2104      	movs	r1, #4
 800f718:	f7ff ff94 	bl	800f644 <std>
 800f71c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f720:	2201      	movs	r2, #1
 800f722:	2109      	movs	r1, #9
 800f724:	f7ff ff8e 	bl	800f644 <std>
 800f728:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f72c:	2202      	movs	r2, #2
 800f72e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f732:	2112      	movs	r1, #18
 800f734:	f7ff bf86 	b.w	800f644 <std>
 800f738:	2000552c 	.word	0x2000552c
 800f73c:	200053f4 	.word	0x200053f4
 800f740:	0800f6b1 	.word	0x0800f6b1

0800f744 <__sfp_lock_acquire>:
 800f744:	4801      	ldr	r0, [pc, #4]	@ (800f74c <__sfp_lock_acquire+0x8>)
 800f746:	f000 bad4 	b.w	800fcf2 <__retarget_lock_acquire_recursive>
 800f74a:	bf00      	nop
 800f74c:	20005535 	.word	0x20005535

0800f750 <__sfp_lock_release>:
 800f750:	4801      	ldr	r0, [pc, #4]	@ (800f758 <__sfp_lock_release+0x8>)
 800f752:	f000 bacf 	b.w	800fcf4 <__retarget_lock_release_recursive>
 800f756:	bf00      	nop
 800f758:	20005535 	.word	0x20005535

0800f75c <__sinit>:
 800f75c:	b510      	push	{r4, lr}
 800f75e:	4604      	mov	r4, r0
 800f760:	f7ff fff0 	bl	800f744 <__sfp_lock_acquire>
 800f764:	6a23      	ldr	r3, [r4, #32]
 800f766:	b11b      	cbz	r3, 800f770 <__sinit+0x14>
 800f768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f76c:	f7ff bff0 	b.w	800f750 <__sfp_lock_release>
 800f770:	4b04      	ldr	r3, [pc, #16]	@ (800f784 <__sinit+0x28>)
 800f772:	6223      	str	r3, [r4, #32]
 800f774:	4b04      	ldr	r3, [pc, #16]	@ (800f788 <__sinit+0x2c>)
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d1f5      	bne.n	800f768 <__sinit+0xc>
 800f77c:	f7ff ffc4 	bl	800f708 <global_stdio_init.part.0>
 800f780:	e7f2      	b.n	800f768 <__sinit+0xc>
 800f782:	bf00      	nop
 800f784:	0800f6c9 	.word	0x0800f6c9
 800f788:	2000552c 	.word	0x2000552c

0800f78c <_fwalk_sglue>:
 800f78c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f790:	4607      	mov	r7, r0
 800f792:	4688      	mov	r8, r1
 800f794:	4614      	mov	r4, r2
 800f796:	2600      	movs	r6, #0
 800f798:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f79c:	f1b9 0901 	subs.w	r9, r9, #1
 800f7a0:	d505      	bpl.n	800f7ae <_fwalk_sglue+0x22>
 800f7a2:	6824      	ldr	r4, [r4, #0]
 800f7a4:	2c00      	cmp	r4, #0
 800f7a6:	d1f7      	bne.n	800f798 <_fwalk_sglue+0xc>
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ae:	89ab      	ldrh	r3, [r5, #12]
 800f7b0:	2b01      	cmp	r3, #1
 800f7b2:	d907      	bls.n	800f7c4 <_fwalk_sglue+0x38>
 800f7b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	d003      	beq.n	800f7c4 <_fwalk_sglue+0x38>
 800f7bc:	4629      	mov	r1, r5
 800f7be:	4638      	mov	r0, r7
 800f7c0:	47c0      	blx	r8
 800f7c2:	4306      	orrs	r6, r0
 800f7c4:	3568      	adds	r5, #104	@ 0x68
 800f7c6:	e7e9      	b.n	800f79c <_fwalk_sglue+0x10>

0800f7c8 <iprintf>:
 800f7c8:	b40f      	push	{r0, r1, r2, r3}
 800f7ca:	b507      	push	{r0, r1, r2, lr}
 800f7cc:	4906      	ldr	r1, [pc, #24]	@ (800f7e8 <iprintf+0x20>)
 800f7ce:	ab04      	add	r3, sp, #16
 800f7d0:	6808      	ldr	r0, [r1, #0]
 800f7d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7d6:	6881      	ldr	r1, [r0, #8]
 800f7d8:	9301      	str	r3, [sp, #4]
 800f7da:	f001 ff0d 	bl	80115f8 <_vfiprintf_r>
 800f7de:	b003      	add	sp, #12
 800f7e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7e4:	b004      	add	sp, #16
 800f7e6:	4770      	bx	lr
 800f7e8:	20000024 	.word	0x20000024

0800f7ec <_puts_r>:
 800f7ec:	6a03      	ldr	r3, [r0, #32]
 800f7ee:	b570      	push	{r4, r5, r6, lr}
 800f7f0:	6884      	ldr	r4, [r0, #8]
 800f7f2:	4605      	mov	r5, r0
 800f7f4:	460e      	mov	r6, r1
 800f7f6:	b90b      	cbnz	r3, 800f7fc <_puts_r+0x10>
 800f7f8:	f7ff ffb0 	bl	800f75c <__sinit>
 800f7fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f7fe:	07db      	lsls	r3, r3, #31
 800f800:	d405      	bmi.n	800f80e <_puts_r+0x22>
 800f802:	89a3      	ldrh	r3, [r4, #12]
 800f804:	0598      	lsls	r0, r3, #22
 800f806:	d402      	bmi.n	800f80e <_puts_r+0x22>
 800f808:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f80a:	f000 fa72 	bl	800fcf2 <__retarget_lock_acquire_recursive>
 800f80e:	89a3      	ldrh	r3, [r4, #12]
 800f810:	0719      	lsls	r1, r3, #28
 800f812:	d502      	bpl.n	800f81a <_puts_r+0x2e>
 800f814:	6923      	ldr	r3, [r4, #16]
 800f816:	2b00      	cmp	r3, #0
 800f818:	d135      	bne.n	800f886 <_puts_r+0x9a>
 800f81a:	4621      	mov	r1, r4
 800f81c:	4628      	mov	r0, r5
 800f81e:	f000 f937 	bl	800fa90 <__swsetup_r>
 800f822:	b380      	cbz	r0, 800f886 <_puts_r+0x9a>
 800f824:	f04f 35ff 	mov.w	r5, #4294967295
 800f828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f82a:	07da      	lsls	r2, r3, #31
 800f82c:	d405      	bmi.n	800f83a <_puts_r+0x4e>
 800f82e:	89a3      	ldrh	r3, [r4, #12]
 800f830:	059b      	lsls	r3, r3, #22
 800f832:	d402      	bmi.n	800f83a <_puts_r+0x4e>
 800f834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f836:	f000 fa5d 	bl	800fcf4 <__retarget_lock_release_recursive>
 800f83a:	4628      	mov	r0, r5
 800f83c:	bd70      	pop	{r4, r5, r6, pc}
 800f83e:	2b00      	cmp	r3, #0
 800f840:	da04      	bge.n	800f84c <_puts_r+0x60>
 800f842:	69a2      	ldr	r2, [r4, #24]
 800f844:	429a      	cmp	r2, r3
 800f846:	dc17      	bgt.n	800f878 <_puts_r+0x8c>
 800f848:	290a      	cmp	r1, #10
 800f84a:	d015      	beq.n	800f878 <_puts_r+0x8c>
 800f84c:	6823      	ldr	r3, [r4, #0]
 800f84e:	1c5a      	adds	r2, r3, #1
 800f850:	6022      	str	r2, [r4, #0]
 800f852:	7019      	strb	r1, [r3, #0]
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f85a:	3b01      	subs	r3, #1
 800f85c:	60a3      	str	r3, [r4, #8]
 800f85e:	2900      	cmp	r1, #0
 800f860:	d1ed      	bne.n	800f83e <_puts_r+0x52>
 800f862:	2b00      	cmp	r3, #0
 800f864:	da11      	bge.n	800f88a <_puts_r+0x9e>
 800f866:	4622      	mov	r2, r4
 800f868:	210a      	movs	r1, #10
 800f86a:	4628      	mov	r0, r5
 800f86c:	f000 f8d2 	bl	800fa14 <__swbuf_r>
 800f870:	3001      	adds	r0, #1
 800f872:	d0d7      	beq.n	800f824 <_puts_r+0x38>
 800f874:	250a      	movs	r5, #10
 800f876:	e7d7      	b.n	800f828 <_puts_r+0x3c>
 800f878:	4622      	mov	r2, r4
 800f87a:	4628      	mov	r0, r5
 800f87c:	f000 f8ca 	bl	800fa14 <__swbuf_r>
 800f880:	3001      	adds	r0, #1
 800f882:	d1e7      	bne.n	800f854 <_puts_r+0x68>
 800f884:	e7ce      	b.n	800f824 <_puts_r+0x38>
 800f886:	3e01      	subs	r6, #1
 800f888:	e7e4      	b.n	800f854 <_puts_r+0x68>
 800f88a:	6823      	ldr	r3, [r4, #0]
 800f88c:	1c5a      	adds	r2, r3, #1
 800f88e:	6022      	str	r2, [r4, #0]
 800f890:	220a      	movs	r2, #10
 800f892:	701a      	strb	r2, [r3, #0]
 800f894:	e7ee      	b.n	800f874 <_puts_r+0x88>
	...

0800f898 <puts>:
 800f898:	4b02      	ldr	r3, [pc, #8]	@ (800f8a4 <puts+0xc>)
 800f89a:	4601      	mov	r1, r0
 800f89c:	6818      	ldr	r0, [r3, #0]
 800f89e:	f7ff bfa5 	b.w	800f7ec <_puts_r>
 800f8a2:	bf00      	nop
 800f8a4:	20000024 	.word	0x20000024

0800f8a8 <sniprintf>:
 800f8a8:	b40c      	push	{r2, r3}
 800f8aa:	b530      	push	{r4, r5, lr}
 800f8ac:	4b18      	ldr	r3, [pc, #96]	@ (800f910 <sniprintf+0x68>)
 800f8ae:	1e0c      	subs	r4, r1, #0
 800f8b0:	681d      	ldr	r5, [r3, #0]
 800f8b2:	b09d      	sub	sp, #116	@ 0x74
 800f8b4:	da08      	bge.n	800f8c8 <sniprintf+0x20>
 800f8b6:	238b      	movs	r3, #139	@ 0x8b
 800f8b8:	602b      	str	r3, [r5, #0]
 800f8ba:	f04f 30ff 	mov.w	r0, #4294967295
 800f8be:	b01d      	add	sp, #116	@ 0x74
 800f8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8c4:	b002      	add	sp, #8
 800f8c6:	4770      	bx	lr
 800f8c8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f8cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f8d0:	f04f 0300 	mov.w	r3, #0
 800f8d4:	931b      	str	r3, [sp, #108]	@ 0x6c
 800f8d6:	bf14      	ite	ne
 800f8d8:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f8dc:	4623      	moveq	r3, r4
 800f8de:	9304      	str	r3, [sp, #16]
 800f8e0:	9307      	str	r3, [sp, #28]
 800f8e2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f8e6:	9002      	str	r0, [sp, #8]
 800f8e8:	9006      	str	r0, [sp, #24]
 800f8ea:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f8ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f8f0:	ab21      	add	r3, sp, #132	@ 0x84
 800f8f2:	a902      	add	r1, sp, #8
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	9301      	str	r3, [sp, #4]
 800f8f8:	f001 fd58 	bl	80113ac <_svfiprintf_r>
 800f8fc:	1c43      	adds	r3, r0, #1
 800f8fe:	bfbc      	itt	lt
 800f900:	238b      	movlt	r3, #139	@ 0x8b
 800f902:	602b      	strlt	r3, [r5, #0]
 800f904:	2c00      	cmp	r4, #0
 800f906:	d0da      	beq.n	800f8be <sniprintf+0x16>
 800f908:	9b02      	ldr	r3, [sp, #8]
 800f90a:	2200      	movs	r2, #0
 800f90c:	701a      	strb	r2, [r3, #0]
 800f90e:	e7d6      	b.n	800f8be <sniprintf+0x16>
 800f910:	20000024 	.word	0x20000024

0800f914 <__sread>:
 800f914:	b510      	push	{r4, lr}
 800f916:	460c      	mov	r4, r1
 800f918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f91c:	f000 f99a 	bl	800fc54 <_read_r>
 800f920:	2800      	cmp	r0, #0
 800f922:	bfab      	itete	ge
 800f924:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f926:	89a3      	ldrhlt	r3, [r4, #12]
 800f928:	181b      	addge	r3, r3, r0
 800f92a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f92e:	bfac      	ite	ge
 800f930:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f932:	81a3      	strhlt	r3, [r4, #12]
 800f934:	bd10      	pop	{r4, pc}

0800f936 <__swrite>:
 800f936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93a:	461f      	mov	r7, r3
 800f93c:	898b      	ldrh	r3, [r1, #12]
 800f93e:	05db      	lsls	r3, r3, #23
 800f940:	4605      	mov	r5, r0
 800f942:	460c      	mov	r4, r1
 800f944:	4616      	mov	r6, r2
 800f946:	d505      	bpl.n	800f954 <__swrite+0x1e>
 800f948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f94c:	2302      	movs	r3, #2
 800f94e:	2200      	movs	r2, #0
 800f950:	f000 f96e 	bl	800fc30 <_lseek_r>
 800f954:	89a3      	ldrh	r3, [r4, #12]
 800f956:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f95a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f95e:	81a3      	strh	r3, [r4, #12]
 800f960:	4632      	mov	r2, r6
 800f962:	463b      	mov	r3, r7
 800f964:	4628      	mov	r0, r5
 800f966:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f96a:	f000 b985 	b.w	800fc78 <_write_r>

0800f96e <__sseek>:
 800f96e:	b510      	push	{r4, lr}
 800f970:	460c      	mov	r4, r1
 800f972:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f976:	f000 f95b 	bl	800fc30 <_lseek_r>
 800f97a:	1c43      	adds	r3, r0, #1
 800f97c:	89a3      	ldrh	r3, [r4, #12]
 800f97e:	bf15      	itete	ne
 800f980:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f982:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f986:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f98a:	81a3      	strheq	r3, [r4, #12]
 800f98c:	bf18      	it	ne
 800f98e:	81a3      	strhne	r3, [r4, #12]
 800f990:	bd10      	pop	{r4, pc}

0800f992 <__sclose>:
 800f992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f996:	f000 b8dd 	b.w	800fb54 <_close_r>

0800f99a <_vsniprintf_r>:
 800f99a:	b530      	push	{r4, r5, lr}
 800f99c:	4614      	mov	r4, r2
 800f99e:	2c00      	cmp	r4, #0
 800f9a0:	b09b      	sub	sp, #108	@ 0x6c
 800f9a2:	4605      	mov	r5, r0
 800f9a4:	461a      	mov	r2, r3
 800f9a6:	da05      	bge.n	800f9b4 <_vsniprintf_r+0x1a>
 800f9a8:	238b      	movs	r3, #139	@ 0x8b
 800f9aa:	6003      	str	r3, [r0, #0]
 800f9ac:	f04f 30ff 	mov.w	r0, #4294967295
 800f9b0:	b01b      	add	sp, #108	@ 0x6c
 800f9b2:	bd30      	pop	{r4, r5, pc}
 800f9b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f9b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f9bc:	f04f 0300 	mov.w	r3, #0
 800f9c0:	9319      	str	r3, [sp, #100]	@ 0x64
 800f9c2:	bf14      	ite	ne
 800f9c4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9c8:	4623      	moveq	r3, r4
 800f9ca:	9302      	str	r3, [sp, #8]
 800f9cc:	9305      	str	r3, [sp, #20]
 800f9ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9d2:	9100      	str	r1, [sp, #0]
 800f9d4:	9104      	str	r1, [sp, #16]
 800f9d6:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9da:	4669      	mov	r1, sp
 800f9dc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f9de:	f001 fce5 	bl	80113ac <_svfiprintf_r>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	bfbc      	itt	lt
 800f9e6:	238b      	movlt	r3, #139	@ 0x8b
 800f9e8:	602b      	strlt	r3, [r5, #0]
 800f9ea:	2c00      	cmp	r4, #0
 800f9ec:	d0e0      	beq.n	800f9b0 <_vsniprintf_r+0x16>
 800f9ee:	9b00      	ldr	r3, [sp, #0]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	701a      	strb	r2, [r3, #0]
 800f9f4:	e7dc      	b.n	800f9b0 <_vsniprintf_r+0x16>
	...

0800f9f8 <vsniprintf>:
 800f9f8:	b507      	push	{r0, r1, r2, lr}
 800f9fa:	9300      	str	r3, [sp, #0]
 800f9fc:	4613      	mov	r3, r2
 800f9fe:	460a      	mov	r2, r1
 800fa00:	4601      	mov	r1, r0
 800fa02:	4803      	ldr	r0, [pc, #12]	@ (800fa10 <vsniprintf+0x18>)
 800fa04:	6800      	ldr	r0, [r0, #0]
 800fa06:	f7ff ffc8 	bl	800f99a <_vsniprintf_r>
 800fa0a:	b003      	add	sp, #12
 800fa0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa10:	20000024 	.word	0x20000024

0800fa14 <__swbuf_r>:
 800fa14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa16:	460e      	mov	r6, r1
 800fa18:	4614      	mov	r4, r2
 800fa1a:	4605      	mov	r5, r0
 800fa1c:	b118      	cbz	r0, 800fa26 <__swbuf_r+0x12>
 800fa1e:	6a03      	ldr	r3, [r0, #32]
 800fa20:	b90b      	cbnz	r3, 800fa26 <__swbuf_r+0x12>
 800fa22:	f7ff fe9b 	bl	800f75c <__sinit>
 800fa26:	69a3      	ldr	r3, [r4, #24]
 800fa28:	60a3      	str	r3, [r4, #8]
 800fa2a:	89a3      	ldrh	r3, [r4, #12]
 800fa2c:	071a      	lsls	r2, r3, #28
 800fa2e:	d501      	bpl.n	800fa34 <__swbuf_r+0x20>
 800fa30:	6923      	ldr	r3, [r4, #16]
 800fa32:	b943      	cbnz	r3, 800fa46 <__swbuf_r+0x32>
 800fa34:	4621      	mov	r1, r4
 800fa36:	4628      	mov	r0, r5
 800fa38:	f000 f82a 	bl	800fa90 <__swsetup_r>
 800fa3c:	b118      	cbz	r0, 800fa46 <__swbuf_r+0x32>
 800fa3e:	f04f 37ff 	mov.w	r7, #4294967295
 800fa42:	4638      	mov	r0, r7
 800fa44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fa46:	6823      	ldr	r3, [r4, #0]
 800fa48:	6922      	ldr	r2, [r4, #16]
 800fa4a:	1a98      	subs	r0, r3, r2
 800fa4c:	6963      	ldr	r3, [r4, #20]
 800fa4e:	b2f6      	uxtb	r6, r6
 800fa50:	4283      	cmp	r3, r0
 800fa52:	4637      	mov	r7, r6
 800fa54:	dc05      	bgt.n	800fa62 <__swbuf_r+0x4e>
 800fa56:	4621      	mov	r1, r4
 800fa58:	4628      	mov	r0, r5
 800fa5a:	f001 ff69 	bl	8011930 <_fflush_r>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	d1ed      	bne.n	800fa3e <__swbuf_r+0x2a>
 800fa62:	68a3      	ldr	r3, [r4, #8]
 800fa64:	3b01      	subs	r3, #1
 800fa66:	60a3      	str	r3, [r4, #8]
 800fa68:	6823      	ldr	r3, [r4, #0]
 800fa6a:	1c5a      	adds	r2, r3, #1
 800fa6c:	6022      	str	r2, [r4, #0]
 800fa6e:	701e      	strb	r6, [r3, #0]
 800fa70:	6962      	ldr	r2, [r4, #20]
 800fa72:	1c43      	adds	r3, r0, #1
 800fa74:	429a      	cmp	r2, r3
 800fa76:	d004      	beq.n	800fa82 <__swbuf_r+0x6e>
 800fa78:	89a3      	ldrh	r3, [r4, #12]
 800fa7a:	07db      	lsls	r3, r3, #31
 800fa7c:	d5e1      	bpl.n	800fa42 <__swbuf_r+0x2e>
 800fa7e:	2e0a      	cmp	r6, #10
 800fa80:	d1df      	bne.n	800fa42 <__swbuf_r+0x2e>
 800fa82:	4621      	mov	r1, r4
 800fa84:	4628      	mov	r0, r5
 800fa86:	f001 ff53 	bl	8011930 <_fflush_r>
 800fa8a:	2800      	cmp	r0, #0
 800fa8c:	d0d9      	beq.n	800fa42 <__swbuf_r+0x2e>
 800fa8e:	e7d6      	b.n	800fa3e <__swbuf_r+0x2a>

0800fa90 <__swsetup_r>:
 800fa90:	b538      	push	{r3, r4, r5, lr}
 800fa92:	4b29      	ldr	r3, [pc, #164]	@ (800fb38 <__swsetup_r+0xa8>)
 800fa94:	4605      	mov	r5, r0
 800fa96:	6818      	ldr	r0, [r3, #0]
 800fa98:	460c      	mov	r4, r1
 800fa9a:	b118      	cbz	r0, 800faa4 <__swsetup_r+0x14>
 800fa9c:	6a03      	ldr	r3, [r0, #32]
 800fa9e:	b90b      	cbnz	r3, 800faa4 <__swsetup_r+0x14>
 800faa0:	f7ff fe5c 	bl	800f75c <__sinit>
 800faa4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800faa8:	0719      	lsls	r1, r3, #28
 800faaa:	d422      	bmi.n	800faf2 <__swsetup_r+0x62>
 800faac:	06da      	lsls	r2, r3, #27
 800faae:	d407      	bmi.n	800fac0 <__swsetup_r+0x30>
 800fab0:	2209      	movs	r2, #9
 800fab2:	602a      	str	r2, [r5, #0]
 800fab4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fab8:	81a3      	strh	r3, [r4, #12]
 800faba:	f04f 30ff 	mov.w	r0, #4294967295
 800fabe:	e033      	b.n	800fb28 <__swsetup_r+0x98>
 800fac0:	0758      	lsls	r0, r3, #29
 800fac2:	d512      	bpl.n	800faea <__swsetup_r+0x5a>
 800fac4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fac6:	b141      	cbz	r1, 800fada <__swsetup_r+0x4a>
 800fac8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800facc:	4299      	cmp	r1, r3
 800face:	d002      	beq.n	800fad6 <__swsetup_r+0x46>
 800fad0:	4628      	mov	r0, r5
 800fad2:	f000 ff95 	bl	8010a00 <_free_r>
 800fad6:	2300      	movs	r3, #0
 800fad8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fada:	89a3      	ldrh	r3, [r4, #12]
 800fadc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fae0:	81a3      	strh	r3, [r4, #12]
 800fae2:	2300      	movs	r3, #0
 800fae4:	6063      	str	r3, [r4, #4]
 800fae6:	6923      	ldr	r3, [r4, #16]
 800fae8:	6023      	str	r3, [r4, #0]
 800faea:	89a3      	ldrh	r3, [r4, #12]
 800faec:	f043 0308 	orr.w	r3, r3, #8
 800faf0:	81a3      	strh	r3, [r4, #12]
 800faf2:	6923      	ldr	r3, [r4, #16]
 800faf4:	b94b      	cbnz	r3, 800fb0a <__swsetup_r+0x7a>
 800faf6:	89a3      	ldrh	r3, [r4, #12]
 800faf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fafc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb00:	d003      	beq.n	800fb0a <__swsetup_r+0x7a>
 800fb02:	4621      	mov	r1, r4
 800fb04:	4628      	mov	r0, r5
 800fb06:	f001 ff73 	bl	80119f0 <__smakebuf_r>
 800fb0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb0e:	f013 0201 	ands.w	r2, r3, #1
 800fb12:	d00a      	beq.n	800fb2a <__swsetup_r+0x9a>
 800fb14:	2200      	movs	r2, #0
 800fb16:	60a2      	str	r2, [r4, #8]
 800fb18:	6962      	ldr	r2, [r4, #20]
 800fb1a:	4252      	negs	r2, r2
 800fb1c:	61a2      	str	r2, [r4, #24]
 800fb1e:	6922      	ldr	r2, [r4, #16]
 800fb20:	b942      	cbnz	r2, 800fb34 <__swsetup_r+0xa4>
 800fb22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb26:	d1c5      	bne.n	800fab4 <__swsetup_r+0x24>
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
 800fb2a:	0799      	lsls	r1, r3, #30
 800fb2c:	bf58      	it	pl
 800fb2e:	6962      	ldrpl	r2, [r4, #20]
 800fb30:	60a2      	str	r2, [r4, #8]
 800fb32:	e7f4      	b.n	800fb1e <__swsetup_r+0x8e>
 800fb34:	2000      	movs	r0, #0
 800fb36:	e7f7      	b.n	800fb28 <__swsetup_r+0x98>
 800fb38:	20000024 	.word	0x20000024

0800fb3c <memset>:
 800fb3c:	4402      	add	r2, r0
 800fb3e:	4603      	mov	r3, r0
 800fb40:	4293      	cmp	r3, r2
 800fb42:	d100      	bne.n	800fb46 <memset+0xa>
 800fb44:	4770      	bx	lr
 800fb46:	f803 1b01 	strb.w	r1, [r3], #1
 800fb4a:	e7f9      	b.n	800fb40 <memset+0x4>

0800fb4c <_localeconv_r>:
 800fb4c:	4800      	ldr	r0, [pc, #0]	@ (800fb50 <_localeconv_r+0x4>)
 800fb4e:	4770      	bx	lr
 800fb50:	20000164 	.word	0x20000164

0800fb54 <_close_r>:
 800fb54:	b538      	push	{r3, r4, r5, lr}
 800fb56:	4d06      	ldr	r5, [pc, #24]	@ (800fb70 <_close_r+0x1c>)
 800fb58:	2300      	movs	r3, #0
 800fb5a:	4604      	mov	r4, r0
 800fb5c:	4608      	mov	r0, r1
 800fb5e:	602b      	str	r3, [r5, #0]
 800fb60:	f7f3 fd82 	bl	8003668 <_close>
 800fb64:	1c43      	adds	r3, r0, #1
 800fb66:	d102      	bne.n	800fb6e <_close_r+0x1a>
 800fb68:	682b      	ldr	r3, [r5, #0]
 800fb6a:	b103      	cbz	r3, 800fb6e <_close_r+0x1a>
 800fb6c:	6023      	str	r3, [r4, #0]
 800fb6e:	bd38      	pop	{r3, r4, r5, pc}
 800fb70:	20005530 	.word	0x20005530

0800fb74 <_reclaim_reent>:
 800fb74:	4b2d      	ldr	r3, [pc, #180]	@ (800fc2c <_reclaim_reent+0xb8>)
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	4283      	cmp	r3, r0
 800fb7a:	b570      	push	{r4, r5, r6, lr}
 800fb7c:	4604      	mov	r4, r0
 800fb7e:	d053      	beq.n	800fc28 <_reclaim_reent+0xb4>
 800fb80:	69c3      	ldr	r3, [r0, #28]
 800fb82:	b31b      	cbz	r3, 800fbcc <_reclaim_reent+0x58>
 800fb84:	68db      	ldr	r3, [r3, #12]
 800fb86:	b163      	cbz	r3, 800fba2 <_reclaim_reent+0x2e>
 800fb88:	2500      	movs	r5, #0
 800fb8a:	69e3      	ldr	r3, [r4, #28]
 800fb8c:	68db      	ldr	r3, [r3, #12]
 800fb8e:	5959      	ldr	r1, [r3, r5]
 800fb90:	b9b1      	cbnz	r1, 800fbc0 <_reclaim_reent+0x4c>
 800fb92:	3504      	adds	r5, #4
 800fb94:	2d80      	cmp	r5, #128	@ 0x80
 800fb96:	d1f8      	bne.n	800fb8a <_reclaim_reent+0x16>
 800fb98:	69e3      	ldr	r3, [r4, #28]
 800fb9a:	4620      	mov	r0, r4
 800fb9c:	68d9      	ldr	r1, [r3, #12]
 800fb9e:	f000 ff2f 	bl	8010a00 <_free_r>
 800fba2:	69e3      	ldr	r3, [r4, #28]
 800fba4:	6819      	ldr	r1, [r3, #0]
 800fba6:	b111      	cbz	r1, 800fbae <_reclaim_reent+0x3a>
 800fba8:	4620      	mov	r0, r4
 800fbaa:	f000 ff29 	bl	8010a00 <_free_r>
 800fbae:	69e3      	ldr	r3, [r4, #28]
 800fbb0:	689d      	ldr	r5, [r3, #8]
 800fbb2:	b15d      	cbz	r5, 800fbcc <_reclaim_reent+0x58>
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	4620      	mov	r0, r4
 800fbb8:	682d      	ldr	r5, [r5, #0]
 800fbba:	f000 ff21 	bl	8010a00 <_free_r>
 800fbbe:	e7f8      	b.n	800fbb2 <_reclaim_reent+0x3e>
 800fbc0:	680e      	ldr	r6, [r1, #0]
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 ff1c 	bl	8010a00 <_free_r>
 800fbc8:	4631      	mov	r1, r6
 800fbca:	e7e1      	b.n	800fb90 <_reclaim_reent+0x1c>
 800fbcc:	6961      	ldr	r1, [r4, #20]
 800fbce:	b111      	cbz	r1, 800fbd6 <_reclaim_reent+0x62>
 800fbd0:	4620      	mov	r0, r4
 800fbd2:	f000 ff15 	bl	8010a00 <_free_r>
 800fbd6:	69e1      	ldr	r1, [r4, #28]
 800fbd8:	b111      	cbz	r1, 800fbe0 <_reclaim_reent+0x6c>
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 ff10 	bl	8010a00 <_free_r>
 800fbe0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fbe2:	b111      	cbz	r1, 800fbea <_reclaim_reent+0x76>
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 ff0b 	bl	8010a00 <_free_r>
 800fbea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbec:	b111      	cbz	r1, 800fbf4 <_reclaim_reent+0x80>
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f000 ff06 	bl	8010a00 <_free_r>
 800fbf4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fbf6:	b111      	cbz	r1, 800fbfe <_reclaim_reent+0x8a>
 800fbf8:	4620      	mov	r0, r4
 800fbfa:	f000 ff01 	bl	8010a00 <_free_r>
 800fbfe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fc00:	b111      	cbz	r1, 800fc08 <_reclaim_reent+0x94>
 800fc02:	4620      	mov	r0, r4
 800fc04:	f000 fefc 	bl	8010a00 <_free_r>
 800fc08:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fc0a:	b111      	cbz	r1, 800fc12 <_reclaim_reent+0x9e>
 800fc0c:	4620      	mov	r0, r4
 800fc0e:	f000 fef7 	bl	8010a00 <_free_r>
 800fc12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fc14:	b111      	cbz	r1, 800fc1c <_reclaim_reent+0xa8>
 800fc16:	4620      	mov	r0, r4
 800fc18:	f000 fef2 	bl	8010a00 <_free_r>
 800fc1c:	6a23      	ldr	r3, [r4, #32]
 800fc1e:	b11b      	cbz	r3, 800fc28 <_reclaim_reent+0xb4>
 800fc20:	4620      	mov	r0, r4
 800fc22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc26:	4718      	bx	r3
 800fc28:	bd70      	pop	{r4, r5, r6, pc}
 800fc2a:	bf00      	nop
 800fc2c:	20000024 	.word	0x20000024

0800fc30 <_lseek_r>:
 800fc30:	b538      	push	{r3, r4, r5, lr}
 800fc32:	4d07      	ldr	r5, [pc, #28]	@ (800fc50 <_lseek_r+0x20>)
 800fc34:	4604      	mov	r4, r0
 800fc36:	4608      	mov	r0, r1
 800fc38:	4611      	mov	r1, r2
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	602a      	str	r2, [r5, #0]
 800fc3e:	461a      	mov	r2, r3
 800fc40:	f7f3 fd39 	bl	80036b6 <_lseek>
 800fc44:	1c43      	adds	r3, r0, #1
 800fc46:	d102      	bne.n	800fc4e <_lseek_r+0x1e>
 800fc48:	682b      	ldr	r3, [r5, #0]
 800fc4a:	b103      	cbz	r3, 800fc4e <_lseek_r+0x1e>
 800fc4c:	6023      	str	r3, [r4, #0]
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	20005530 	.word	0x20005530

0800fc54 <_read_r>:
 800fc54:	b538      	push	{r3, r4, r5, lr}
 800fc56:	4d07      	ldr	r5, [pc, #28]	@ (800fc74 <_read_r+0x20>)
 800fc58:	4604      	mov	r4, r0
 800fc5a:	4608      	mov	r0, r1
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	2200      	movs	r2, #0
 800fc60:	602a      	str	r2, [r5, #0]
 800fc62:	461a      	mov	r2, r3
 800fc64:	f7f3 fcc7 	bl	80035f6 <_read>
 800fc68:	1c43      	adds	r3, r0, #1
 800fc6a:	d102      	bne.n	800fc72 <_read_r+0x1e>
 800fc6c:	682b      	ldr	r3, [r5, #0]
 800fc6e:	b103      	cbz	r3, 800fc72 <_read_r+0x1e>
 800fc70:	6023      	str	r3, [r4, #0]
 800fc72:	bd38      	pop	{r3, r4, r5, pc}
 800fc74:	20005530 	.word	0x20005530

0800fc78 <_write_r>:
 800fc78:	b538      	push	{r3, r4, r5, lr}
 800fc7a:	4d07      	ldr	r5, [pc, #28]	@ (800fc98 <_write_r+0x20>)
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	4608      	mov	r0, r1
 800fc80:	4611      	mov	r1, r2
 800fc82:	2200      	movs	r2, #0
 800fc84:	602a      	str	r2, [r5, #0]
 800fc86:	461a      	mov	r2, r3
 800fc88:	f7f3 fcd2 	bl	8003630 <_write>
 800fc8c:	1c43      	adds	r3, r0, #1
 800fc8e:	d102      	bne.n	800fc96 <_write_r+0x1e>
 800fc90:	682b      	ldr	r3, [r5, #0]
 800fc92:	b103      	cbz	r3, 800fc96 <_write_r+0x1e>
 800fc94:	6023      	str	r3, [r4, #0]
 800fc96:	bd38      	pop	{r3, r4, r5, pc}
 800fc98:	20005530 	.word	0x20005530

0800fc9c <__errno>:
 800fc9c:	4b01      	ldr	r3, [pc, #4]	@ (800fca4 <__errno+0x8>)
 800fc9e:	6818      	ldr	r0, [r3, #0]
 800fca0:	4770      	bx	lr
 800fca2:	bf00      	nop
 800fca4:	20000024 	.word	0x20000024

0800fca8 <__libc_init_array>:
 800fca8:	b570      	push	{r4, r5, r6, lr}
 800fcaa:	4d0d      	ldr	r5, [pc, #52]	@ (800fce0 <__libc_init_array+0x38>)
 800fcac:	4c0d      	ldr	r4, [pc, #52]	@ (800fce4 <__libc_init_array+0x3c>)
 800fcae:	1b64      	subs	r4, r4, r5
 800fcb0:	10a4      	asrs	r4, r4, #2
 800fcb2:	2600      	movs	r6, #0
 800fcb4:	42a6      	cmp	r6, r4
 800fcb6:	d109      	bne.n	800fccc <__libc_init_array+0x24>
 800fcb8:	4d0b      	ldr	r5, [pc, #44]	@ (800fce8 <__libc_init_array+0x40>)
 800fcba:	4c0c      	ldr	r4, [pc, #48]	@ (800fcec <__libc_init_array+0x44>)
 800fcbc:	f001 ffd4 	bl	8011c68 <_init>
 800fcc0:	1b64      	subs	r4, r4, r5
 800fcc2:	10a4      	asrs	r4, r4, #2
 800fcc4:	2600      	movs	r6, #0
 800fcc6:	42a6      	cmp	r6, r4
 800fcc8:	d105      	bne.n	800fcd6 <__libc_init_array+0x2e>
 800fcca:	bd70      	pop	{r4, r5, r6, pc}
 800fccc:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcd0:	4798      	blx	r3
 800fcd2:	3601      	adds	r6, #1
 800fcd4:	e7ee      	b.n	800fcb4 <__libc_init_array+0xc>
 800fcd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcda:	4798      	blx	r3
 800fcdc:	3601      	adds	r6, #1
 800fcde:	e7f2      	b.n	800fcc6 <__libc_init_array+0x1e>
 800fce0:	080132d0 	.word	0x080132d0
 800fce4:	080132d0 	.word	0x080132d0
 800fce8:	080132d0 	.word	0x080132d0
 800fcec:	080132d4 	.word	0x080132d4

0800fcf0 <__retarget_lock_init_recursive>:
 800fcf0:	4770      	bx	lr

0800fcf2 <__retarget_lock_acquire_recursive>:
 800fcf2:	4770      	bx	lr

0800fcf4 <__retarget_lock_release_recursive>:
 800fcf4:	4770      	bx	lr

0800fcf6 <memcpy>:
 800fcf6:	440a      	add	r2, r1
 800fcf8:	4291      	cmp	r1, r2
 800fcfa:	f100 33ff 	add.w	r3, r0, #4294967295
 800fcfe:	d100      	bne.n	800fd02 <memcpy+0xc>
 800fd00:	4770      	bx	lr
 800fd02:	b510      	push	{r4, lr}
 800fd04:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fd08:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fd0c:	4291      	cmp	r1, r2
 800fd0e:	d1f9      	bne.n	800fd04 <memcpy+0xe>
 800fd10:	bd10      	pop	{r4, pc}
	...

0800fd14 <__assert_func>:
 800fd14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd16:	4614      	mov	r4, r2
 800fd18:	461a      	mov	r2, r3
 800fd1a:	4b09      	ldr	r3, [pc, #36]	@ (800fd40 <__assert_func+0x2c>)
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	4605      	mov	r5, r0
 800fd20:	68d8      	ldr	r0, [r3, #12]
 800fd22:	b14c      	cbz	r4, 800fd38 <__assert_func+0x24>
 800fd24:	4b07      	ldr	r3, [pc, #28]	@ (800fd44 <__assert_func+0x30>)
 800fd26:	9100      	str	r1, [sp, #0]
 800fd28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd2c:	4906      	ldr	r1, [pc, #24]	@ (800fd48 <__assert_func+0x34>)
 800fd2e:	462b      	mov	r3, r5
 800fd30:	f001 fe26 	bl	8011980 <fiprintf>
 800fd34:	f001 fee4 	bl	8011b00 <abort>
 800fd38:	4b04      	ldr	r3, [pc, #16]	@ (800fd4c <__assert_func+0x38>)
 800fd3a:	461c      	mov	r4, r3
 800fd3c:	e7f3      	b.n	800fd26 <__assert_func+0x12>
 800fd3e:	bf00      	nop
 800fd40:	20000024 	.word	0x20000024
 800fd44:	08013089 	.word	0x08013089
 800fd48:	08013096 	.word	0x08013096
 800fd4c:	080130c4 	.word	0x080130c4

0800fd50 <quorem>:
 800fd50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	6903      	ldr	r3, [r0, #16]
 800fd56:	690c      	ldr	r4, [r1, #16]
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	4607      	mov	r7, r0
 800fd5c:	db7e      	blt.n	800fe5c <quorem+0x10c>
 800fd5e:	3c01      	subs	r4, #1
 800fd60:	f101 0814 	add.w	r8, r1, #20
 800fd64:	00a3      	lsls	r3, r4, #2
 800fd66:	f100 0514 	add.w	r5, r0, #20
 800fd6a:	9300      	str	r3, [sp, #0]
 800fd6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fd76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fd7a:	3301      	adds	r3, #1
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fd82:	fbb2 f6f3 	udiv	r6, r2, r3
 800fd86:	d32e      	bcc.n	800fde6 <quorem+0x96>
 800fd88:	f04f 0a00 	mov.w	sl, #0
 800fd8c:	46c4      	mov	ip, r8
 800fd8e:	46ae      	mov	lr, r5
 800fd90:	46d3      	mov	fp, sl
 800fd92:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fd96:	b298      	uxth	r0, r3
 800fd98:	fb06 a000 	mla	r0, r6, r0, sl
 800fd9c:	0c02      	lsrs	r2, r0, #16
 800fd9e:	0c1b      	lsrs	r3, r3, #16
 800fda0:	fb06 2303 	mla	r3, r6, r3, r2
 800fda4:	f8de 2000 	ldr.w	r2, [lr]
 800fda8:	b280      	uxth	r0, r0
 800fdaa:	b292      	uxth	r2, r2
 800fdac:	1a12      	subs	r2, r2, r0
 800fdae:	445a      	add	r2, fp
 800fdb0:	f8de 0000 	ldr.w	r0, [lr]
 800fdb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fdbe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fdc2:	b292      	uxth	r2, r2
 800fdc4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fdc8:	45e1      	cmp	r9, ip
 800fdca:	f84e 2b04 	str.w	r2, [lr], #4
 800fdce:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fdd2:	d2de      	bcs.n	800fd92 <quorem+0x42>
 800fdd4:	9b00      	ldr	r3, [sp, #0]
 800fdd6:	58eb      	ldr	r3, [r5, r3]
 800fdd8:	b92b      	cbnz	r3, 800fde6 <quorem+0x96>
 800fdda:	9b01      	ldr	r3, [sp, #4]
 800fddc:	3b04      	subs	r3, #4
 800fdde:	429d      	cmp	r5, r3
 800fde0:	461a      	mov	r2, r3
 800fde2:	d32f      	bcc.n	800fe44 <quorem+0xf4>
 800fde4:	613c      	str	r4, [r7, #16]
 800fde6:	4638      	mov	r0, r7
 800fde8:	f001 f97c 	bl	80110e4 <__mcmp>
 800fdec:	2800      	cmp	r0, #0
 800fdee:	db25      	blt.n	800fe3c <quorem+0xec>
 800fdf0:	4629      	mov	r1, r5
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	f858 2b04 	ldr.w	r2, [r8], #4
 800fdf8:	f8d1 c000 	ldr.w	ip, [r1]
 800fdfc:	fa1f fe82 	uxth.w	lr, r2
 800fe00:	fa1f f38c 	uxth.w	r3, ip
 800fe04:	eba3 030e 	sub.w	r3, r3, lr
 800fe08:	4403      	add	r3, r0
 800fe0a:	0c12      	lsrs	r2, r2, #16
 800fe0c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fe10:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fe1a:	45c1      	cmp	r9, r8
 800fe1c:	f841 3b04 	str.w	r3, [r1], #4
 800fe20:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fe24:	d2e6      	bcs.n	800fdf4 <quorem+0xa4>
 800fe26:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fe2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fe2e:	b922      	cbnz	r2, 800fe3a <quorem+0xea>
 800fe30:	3b04      	subs	r3, #4
 800fe32:	429d      	cmp	r5, r3
 800fe34:	461a      	mov	r2, r3
 800fe36:	d30b      	bcc.n	800fe50 <quorem+0x100>
 800fe38:	613c      	str	r4, [r7, #16]
 800fe3a:	3601      	adds	r6, #1
 800fe3c:	4630      	mov	r0, r6
 800fe3e:	b003      	add	sp, #12
 800fe40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe44:	6812      	ldr	r2, [r2, #0]
 800fe46:	3b04      	subs	r3, #4
 800fe48:	2a00      	cmp	r2, #0
 800fe4a:	d1cb      	bne.n	800fde4 <quorem+0x94>
 800fe4c:	3c01      	subs	r4, #1
 800fe4e:	e7c6      	b.n	800fdde <quorem+0x8e>
 800fe50:	6812      	ldr	r2, [r2, #0]
 800fe52:	3b04      	subs	r3, #4
 800fe54:	2a00      	cmp	r2, #0
 800fe56:	d1ef      	bne.n	800fe38 <quorem+0xe8>
 800fe58:	3c01      	subs	r4, #1
 800fe5a:	e7ea      	b.n	800fe32 <quorem+0xe2>
 800fe5c:	2000      	movs	r0, #0
 800fe5e:	e7ee      	b.n	800fe3e <quorem+0xee>

0800fe60 <_dtoa_r>:
 800fe60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe64:	69c7      	ldr	r7, [r0, #28]
 800fe66:	b097      	sub	sp, #92	@ 0x5c
 800fe68:	ed8d 0b04 	vstr	d0, [sp, #16]
 800fe6c:	ec55 4b10 	vmov	r4, r5, d0
 800fe70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800fe72:	9107      	str	r1, [sp, #28]
 800fe74:	4681      	mov	r9, r0
 800fe76:	920c      	str	r2, [sp, #48]	@ 0x30
 800fe78:	9311      	str	r3, [sp, #68]	@ 0x44
 800fe7a:	b97f      	cbnz	r7, 800fe9c <_dtoa_r+0x3c>
 800fe7c:	2010      	movs	r0, #16
 800fe7e:	f000 fe09 	bl	8010a94 <malloc>
 800fe82:	4602      	mov	r2, r0
 800fe84:	f8c9 001c 	str.w	r0, [r9, #28]
 800fe88:	b920      	cbnz	r0, 800fe94 <_dtoa_r+0x34>
 800fe8a:	4ba9      	ldr	r3, [pc, #676]	@ (8010130 <_dtoa_r+0x2d0>)
 800fe8c:	21ef      	movs	r1, #239	@ 0xef
 800fe8e:	48a9      	ldr	r0, [pc, #676]	@ (8010134 <_dtoa_r+0x2d4>)
 800fe90:	f7ff ff40 	bl	800fd14 <__assert_func>
 800fe94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fe98:	6007      	str	r7, [r0, #0]
 800fe9a:	60c7      	str	r7, [r0, #12]
 800fe9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fea0:	6819      	ldr	r1, [r3, #0]
 800fea2:	b159      	cbz	r1, 800febc <_dtoa_r+0x5c>
 800fea4:	685a      	ldr	r2, [r3, #4]
 800fea6:	604a      	str	r2, [r1, #4]
 800fea8:	2301      	movs	r3, #1
 800feaa:	4093      	lsls	r3, r2
 800feac:	608b      	str	r3, [r1, #8]
 800feae:	4648      	mov	r0, r9
 800feb0:	f000 fee6 	bl	8010c80 <_Bfree>
 800feb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800feb8:	2200      	movs	r2, #0
 800feba:	601a      	str	r2, [r3, #0]
 800febc:	1e2b      	subs	r3, r5, #0
 800febe:	bfb9      	ittee	lt
 800fec0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fec4:	9305      	strlt	r3, [sp, #20]
 800fec6:	2300      	movge	r3, #0
 800fec8:	6033      	strge	r3, [r6, #0]
 800feca:	9f05      	ldr	r7, [sp, #20]
 800fecc:	4b9a      	ldr	r3, [pc, #616]	@ (8010138 <_dtoa_r+0x2d8>)
 800fece:	bfbc      	itt	lt
 800fed0:	2201      	movlt	r2, #1
 800fed2:	6032      	strlt	r2, [r6, #0]
 800fed4:	43bb      	bics	r3, r7
 800fed6:	d112      	bne.n	800fefe <_dtoa_r+0x9e>
 800fed8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800feda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fede:	6013      	str	r3, [r2, #0]
 800fee0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fee4:	4323      	orrs	r3, r4
 800fee6:	f000 855a 	beq.w	801099e <_dtoa_r+0xb3e>
 800feea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800feec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801014c <_dtoa_r+0x2ec>
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	f000 855c 	beq.w	80109ae <_dtoa_r+0xb4e>
 800fef6:	f10a 0303 	add.w	r3, sl, #3
 800fefa:	f000 bd56 	b.w	80109aa <_dtoa_r+0xb4a>
 800fefe:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ff02:	2200      	movs	r2, #0
 800ff04:	ec51 0b17 	vmov	r0, r1, d7
 800ff08:	2300      	movs	r3, #0
 800ff0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800ff0e:	f7f0 fde3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ff12:	4680      	mov	r8, r0
 800ff14:	b158      	cbz	r0, 800ff2e <_dtoa_r+0xce>
 800ff16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800ff18:	2301      	movs	r3, #1
 800ff1a:	6013      	str	r3, [r2, #0]
 800ff1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ff1e:	b113      	cbz	r3, 800ff26 <_dtoa_r+0xc6>
 800ff20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ff22:	4b86      	ldr	r3, [pc, #536]	@ (801013c <_dtoa_r+0x2dc>)
 800ff24:	6013      	str	r3, [r2, #0]
 800ff26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8010150 <_dtoa_r+0x2f0>
 800ff2a:	f000 bd40 	b.w	80109ae <_dtoa_r+0xb4e>
 800ff2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ff32:	aa14      	add	r2, sp, #80	@ 0x50
 800ff34:	a915      	add	r1, sp, #84	@ 0x54
 800ff36:	4648      	mov	r0, r9
 800ff38:	f001 f984 	bl	8011244 <__d2b>
 800ff3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ff40:	9002      	str	r0, [sp, #8]
 800ff42:	2e00      	cmp	r6, #0
 800ff44:	d078      	beq.n	8010038 <_dtoa_r+0x1d8>
 800ff46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ff48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ff4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ff54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ff58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ff5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ff60:	4619      	mov	r1, r3
 800ff62:	2200      	movs	r2, #0
 800ff64:	4b76      	ldr	r3, [pc, #472]	@ (8010140 <_dtoa_r+0x2e0>)
 800ff66:	f7f0 f997 	bl	8000298 <__aeabi_dsub>
 800ff6a:	a36b      	add	r3, pc, #428	@ (adr r3, 8010118 <_dtoa_r+0x2b8>)
 800ff6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff70:	f7f0 fb4a 	bl	8000608 <__aeabi_dmul>
 800ff74:	a36a      	add	r3, pc, #424	@ (adr r3, 8010120 <_dtoa_r+0x2c0>)
 800ff76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff7a:	f7f0 f98f 	bl	800029c <__adddf3>
 800ff7e:	4604      	mov	r4, r0
 800ff80:	4630      	mov	r0, r6
 800ff82:	460d      	mov	r5, r1
 800ff84:	f7f0 fad6 	bl	8000534 <__aeabi_i2d>
 800ff88:	a367      	add	r3, pc, #412	@ (adr r3, 8010128 <_dtoa_r+0x2c8>)
 800ff8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff8e:	f7f0 fb3b 	bl	8000608 <__aeabi_dmul>
 800ff92:	4602      	mov	r2, r0
 800ff94:	460b      	mov	r3, r1
 800ff96:	4620      	mov	r0, r4
 800ff98:	4629      	mov	r1, r5
 800ff9a:	f7f0 f97f 	bl	800029c <__adddf3>
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	460d      	mov	r5, r1
 800ffa2:	f7f0 fde1 	bl	8000b68 <__aeabi_d2iz>
 800ffa6:	2200      	movs	r2, #0
 800ffa8:	4607      	mov	r7, r0
 800ffaa:	2300      	movs	r3, #0
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 fd9c 	bl	8000aec <__aeabi_dcmplt>
 800ffb4:	b140      	cbz	r0, 800ffc8 <_dtoa_r+0x168>
 800ffb6:	4638      	mov	r0, r7
 800ffb8:	f7f0 fabc 	bl	8000534 <__aeabi_i2d>
 800ffbc:	4622      	mov	r2, r4
 800ffbe:	462b      	mov	r3, r5
 800ffc0:	f7f0 fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ffc4:	b900      	cbnz	r0, 800ffc8 <_dtoa_r+0x168>
 800ffc6:	3f01      	subs	r7, #1
 800ffc8:	2f16      	cmp	r7, #22
 800ffca:	d852      	bhi.n	8010072 <_dtoa_r+0x212>
 800ffcc:	4b5d      	ldr	r3, [pc, #372]	@ (8010144 <_dtoa_r+0x2e4>)
 800ffce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ffd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ffda:	f7f0 fd87 	bl	8000aec <__aeabi_dcmplt>
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	d049      	beq.n	8010076 <_dtoa_r+0x216>
 800ffe2:	3f01      	subs	r7, #1
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	9310      	str	r3, [sp, #64]	@ 0x40
 800ffe8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ffea:	1b9b      	subs	r3, r3, r6
 800ffec:	1e5a      	subs	r2, r3, #1
 800ffee:	bf45      	ittet	mi
 800fff0:	f1c3 0301 	rsbmi	r3, r3, #1
 800fff4:	9300      	strmi	r3, [sp, #0]
 800fff6:	2300      	movpl	r3, #0
 800fff8:	2300      	movmi	r3, #0
 800fffa:	9206      	str	r2, [sp, #24]
 800fffc:	bf54      	ite	pl
 800fffe:	9300      	strpl	r3, [sp, #0]
 8010000:	9306      	strmi	r3, [sp, #24]
 8010002:	2f00      	cmp	r7, #0
 8010004:	db39      	blt.n	801007a <_dtoa_r+0x21a>
 8010006:	9b06      	ldr	r3, [sp, #24]
 8010008:	970d      	str	r7, [sp, #52]	@ 0x34
 801000a:	443b      	add	r3, r7
 801000c:	9306      	str	r3, [sp, #24]
 801000e:	2300      	movs	r3, #0
 8010010:	9308      	str	r3, [sp, #32]
 8010012:	9b07      	ldr	r3, [sp, #28]
 8010014:	2b09      	cmp	r3, #9
 8010016:	d863      	bhi.n	80100e0 <_dtoa_r+0x280>
 8010018:	2b05      	cmp	r3, #5
 801001a:	bfc4      	itt	gt
 801001c:	3b04      	subgt	r3, #4
 801001e:	9307      	strgt	r3, [sp, #28]
 8010020:	9b07      	ldr	r3, [sp, #28]
 8010022:	f1a3 0302 	sub.w	r3, r3, #2
 8010026:	bfcc      	ite	gt
 8010028:	2400      	movgt	r4, #0
 801002a:	2401      	movle	r4, #1
 801002c:	2b03      	cmp	r3, #3
 801002e:	d863      	bhi.n	80100f8 <_dtoa_r+0x298>
 8010030:	e8df f003 	tbb	[pc, r3]
 8010034:	2b375452 	.word	0x2b375452
 8010038:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801003c:	441e      	add	r6, r3
 801003e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8010042:	2b20      	cmp	r3, #32
 8010044:	bfc1      	itttt	gt
 8010046:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801004a:	409f      	lslgt	r7, r3
 801004c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8010050:	fa24 f303 	lsrgt.w	r3, r4, r3
 8010054:	bfd6      	itet	le
 8010056:	f1c3 0320 	rsble	r3, r3, #32
 801005a:	ea47 0003 	orrgt.w	r0, r7, r3
 801005e:	fa04 f003 	lslle.w	r0, r4, r3
 8010062:	f7f0 fa57 	bl	8000514 <__aeabi_ui2d>
 8010066:	2201      	movs	r2, #1
 8010068:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801006c:	3e01      	subs	r6, #1
 801006e:	9212      	str	r2, [sp, #72]	@ 0x48
 8010070:	e776      	b.n	800ff60 <_dtoa_r+0x100>
 8010072:	2301      	movs	r3, #1
 8010074:	e7b7      	b.n	800ffe6 <_dtoa_r+0x186>
 8010076:	9010      	str	r0, [sp, #64]	@ 0x40
 8010078:	e7b6      	b.n	800ffe8 <_dtoa_r+0x188>
 801007a:	9b00      	ldr	r3, [sp, #0]
 801007c:	1bdb      	subs	r3, r3, r7
 801007e:	9300      	str	r3, [sp, #0]
 8010080:	427b      	negs	r3, r7
 8010082:	9308      	str	r3, [sp, #32]
 8010084:	2300      	movs	r3, #0
 8010086:	930d      	str	r3, [sp, #52]	@ 0x34
 8010088:	e7c3      	b.n	8010012 <_dtoa_r+0x1b2>
 801008a:	2301      	movs	r3, #1
 801008c:	9309      	str	r3, [sp, #36]	@ 0x24
 801008e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010090:	eb07 0b03 	add.w	fp, r7, r3
 8010094:	f10b 0301 	add.w	r3, fp, #1
 8010098:	2b01      	cmp	r3, #1
 801009a:	9303      	str	r3, [sp, #12]
 801009c:	bfb8      	it	lt
 801009e:	2301      	movlt	r3, #1
 80100a0:	e006      	b.n	80100b0 <_dtoa_r+0x250>
 80100a2:	2301      	movs	r3, #1
 80100a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80100a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	dd28      	ble.n	80100fe <_dtoa_r+0x29e>
 80100ac:	469b      	mov	fp, r3
 80100ae:	9303      	str	r3, [sp, #12]
 80100b0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80100b4:	2100      	movs	r1, #0
 80100b6:	2204      	movs	r2, #4
 80100b8:	f102 0514 	add.w	r5, r2, #20
 80100bc:	429d      	cmp	r5, r3
 80100be:	d926      	bls.n	801010e <_dtoa_r+0x2ae>
 80100c0:	6041      	str	r1, [r0, #4]
 80100c2:	4648      	mov	r0, r9
 80100c4:	f000 fd9c 	bl	8010c00 <_Balloc>
 80100c8:	4682      	mov	sl, r0
 80100ca:	2800      	cmp	r0, #0
 80100cc:	d142      	bne.n	8010154 <_dtoa_r+0x2f4>
 80100ce:	4b1e      	ldr	r3, [pc, #120]	@ (8010148 <_dtoa_r+0x2e8>)
 80100d0:	4602      	mov	r2, r0
 80100d2:	f240 11af 	movw	r1, #431	@ 0x1af
 80100d6:	e6da      	b.n	800fe8e <_dtoa_r+0x2e>
 80100d8:	2300      	movs	r3, #0
 80100da:	e7e3      	b.n	80100a4 <_dtoa_r+0x244>
 80100dc:	2300      	movs	r3, #0
 80100de:	e7d5      	b.n	801008c <_dtoa_r+0x22c>
 80100e0:	2401      	movs	r4, #1
 80100e2:	2300      	movs	r3, #0
 80100e4:	9307      	str	r3, [sp, #28]
 80100e6:	9409      	str	r4, [sp, #36]	@ 0x24
 80100e8:	f04f 3bff 	mov.w	fp, #4294967295
 80100ec:	2200      	movs	r2, #0
 80100ee:	f8cd b00c 	str.w	fp, [sp, #12]
 80100f2:	2312      	movs	r3, #18
 80100f4:	920c      	str	r2, [sp, #48]	@ 0x30
 80100f6:	e7db      	b.n	80100b0 <_dtoa_r+0x250>
 80100f8:	2301      	movs	r3, #1
 80100fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80100fc:	e7f4      	b.n	80100e8 <_dtoa_r+0x288>
 80100fe:	f04f 0b01 	mov.w	fp, #1
 8010102:	f8cd b00c 	str.w	fp, [sp, #12]
 8010106:	465b      	mov	r3, fp
 8010108:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801010c:	e7d0      	b.n	80100b0 <_dtoa_r+0x250>
 801010e:	3101      	adds	r1, #1
 8010110:	0052      	lsls	r2, r2, #1
 8010112:	e7d1      	b.n	80100b8 <_dtoa_r+0x258>
 8010114:	f3af 8000 	nop.w
 8010118:	636f4361 	.word	0x636f4361
 801011c:	3fd287a7 	.word	0x3fd287a7
 8010120:	8b60c8b3 	.word	0x8b60c8b3
 8010124:	3fc68a28 	.word	0x3fc68a28
 8010128:	509f79fb 	.word	0x509f79fb
 801012c:	3fd34413 	.word	0x3fd34413
 8010130:	080130d2 	.word	0x080130d2
 8010134:	080130e9 	.word	0x080130e9
 8010138:	7ff00000 	.word	0x7ff00000
 801013c:	08013066 	.word	0x08013066
 8010140:	3ff80000 	.word	0x3ff80000
 8010144:	08013200 	.word	0x08013200
 8010148:	08013141 	.word	0x08013141
 801014c:	080130ce 	.word	0x080130ce
 8010150:	08013065 	.word	0x08013065
 8010154:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010158:	6018      	str	r0, [r3, #0]
 801015a:	9b03      	ldr	r3, [sp, #12]
 801015c:	2b0e      	cmp	r3, #14
 801015e:	f200 80a1 	bhi.w	80102a4 <_dtoa_r+0x444>
 8010162:	2c00      	cmp	r4, #0
 8010164:	f000 809e 	beq.w	80102a4 <_dtoa_r+0x444>
 8010168:	2f00      	cmp	r7, #0
 801016a:	dd33      	ble.n	80101d4 <_dtoa_r+0x374>
 801016c:	4b9c      	ldr	r3, [pc, #624]	@ (80103e0 <_dtoa_r+0x580>)
 801016e:	f007 020f 	and.w	r2, r7, #15
 8010172:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010176:	ed93 7b00 	vldr	d7, [r3]
 801017a:	05f8      	lsls	r0, r7, #23
 801017c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8010180:	ea4f 1427 	mov.w	r4, r7, asr #4
 8010184:	d516      	bpl.n	80101b4 <_dtoa_r+0x354>
 8010186:	4b97      	ldr	r3, [pc, #604]	@ (80103e4 <_dtoa_r+0x584>)
 8010188:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801018c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010190:	f7f0 fb64 	bl	800085c <__aeabi_ddiv>
 8010194:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010198:	f004 040f 	and.w	r4, r4, #15
 801019c:	2603      	movs	r6, #3
 801019e:	4d91      	ldr	r5, [pc, #580]	@ (80103e4 <_dtoa_r+0x584>)
 80101a0:	b954      	cbnz	r4, 80101b8 <_dtoa_r+0x358>
 80101a2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80101a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80101aa:	f7f0 fb57 	bl	800085c <__aeabi_ddiv>
 80101ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101b2:	e028      	b.n	8010206 <_dtoa_r+0x3a6>
 80101b4:	2602      	movs	r6, #2
 80101b6:	e7f2      	b.n	801019e <_dtoa_r+0x33e>
 80101b8:	07e1      	lsls	r1, r4, #31
 80101ba:	d508      	bpl.n	80101ce <_dtoa_r+0x36e>
 80101bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80101c0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101c4:	f7f0 fa20 	bl	8000608 <__aeabi_dmul>
 80101c8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80101cc:	3601      	adds	r6, #1
 80101ce:	1064      	asrs	r4, r4, #1
 80101d0:	3508      	adds	r5, #8
 80101d2:	e7e5      	b.n	80101a0 <_dtoa_r+0x340>
 80101d4:	f000 80af 	beq.w	8010336 <_dtoa_r+0x4d6>
 80101d8:	427c      	negs	r4, r7
 80101da:	4b81      	ldr	r3, [pc, #516]	@ (80103e0 <_dtoa_r+0x580>)
 80101dc:	4d81      	ldr	r5, [pc, #516]	@ (80103e4 <_dtoa_r+0x584>)
 80101de:	f004 020f 	and.w	r2, r4, #15
 80101e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80101ee:	f7f0 fa0b 	bl	8000608 <__aeabi_dmul>
 80101f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80101f6:	1124      	asrs	r4, r4, #4
 80101f8:	2300      	movs	r3, #0
 80101fa:	2602      	movs	r6, #2
 80101fc:	2c00      	cmp	r4, #0
 80101fe:	f040 808f 	bne.w	8010320 <_dtoa_r+0x4c0>
 8010202:	2b00      	cmp	r3, #0
 8010204:	d1d3      	bne.n	80101ae <_dtoa_r+0x34e>
 8010206:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010208:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801020c:	2b00      	cmp	r3, #0
 801020e:	f000 8094 	beq.w	801033a <_dtoa_r+0x4da>
 8010212:	4b75      	ldr	r3, [pc, #468]	@ (80103e8 <_dtoa_r+0x588>)
 8010214:	2200      	movs	r2, #0
 8010216:	4620      	mov	r0, r4
 8010218:	4629      	mov	r1, r5
 801021a:	f7f0 fc67 	bl	8000aec <__aeabi_dcmplt>
 801021e:	2800      	cmp	r0, #0
 8010220:	f000 808b 	beq.w	801033a <_dtoa_r+0x4da>
 8010224:	9b03      	ldr	r3, [sp, #12]
 8010226:	2b00      	cmp	r3, #0
 8010228:	f000 8087 	beq.w	801033a <_dtoa_r+0x4da>
 801022c:	f1bb 0f00 	cmp.w	fp, #0
 8010230:	dd34      	ble.n	801029c <_dtoa_r+0x43c>
 8010232:	4620      	mov	r0, r4
 8010234:	4b6d      	ldr	r3, [pc, #436]	@ (80103ec <_dtoa_r+0x58c>)
 8010236:	2200      	movs	r2, #0
 8010238:	4629      	mov	r1, r5
 801023a:	f7f0 f9e5 	bl	8000608 <__aeabi_dmul>
 801023e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010242:	f107 38ff 	add.w	r8, r7, #4294967295
 8010246:	3601      	adds	r6, #1
 8010248:	465c      	mov	r4, fp
 801024a:	4630      	mov	r0, r6
 801024c:	f7f0 f972 	bl	8000534 <__aeabi_i2d>
 8010250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8010254:	f7f0 f9d8 	bl	8000608 <__aeabi_dmul>
 8010258:	4b65      	ldr	r3, [pc, #404]	@ (80103f0 <_dtoa_r+0x590>)
 801025a:	2200      	movs	r2, #0
 801025c:	f7f0 f81e 	bl	800029c <__adddf3>
 8010260:	4605      	mov	r5, r0
 8010262:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8010266:	2c00      	cmp	r4, #0
 8010268:	d16a      	bne.n	8010340 <_dtoa_r+0x4e0>
 801026a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801026e:	4b61      	ldr	r3, [pc, #388]	@ (80103f4 <_dtoa_r+0x594>)
 8010270:	2200      	movs	r2, #0
 8010272:	f7f0 f811 	bl	8000298 <__aeabi_dsub>
 8010276:	4602      	mov	r2, r0
 8010278:	460b      	mov	r3, r1
 801027a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801027e:	462a      	mov	r2, r5
 8010280:	4633      	mov	r3, r6
 8010282:	f7f0 fc51 	bl	8000b28 <__aeabi_dcmpgt>
 8010286:	2800      	cmp	r0, #0
 8010288:	f040 8298 	bne.w	80107bc <_dtoa_r+0x95c>
 801028c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010290:	462a      	mov	r2, r5
 8010292:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8010296:	f7f0 fc29 	bl	8000aec <__aeabi_dcmplt>
 801029a:	bb38      	cbnz	r0, 80102ec <_dtoa_r+0x48c>
 801029c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80102a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80102a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	f2c0 8157 	blt.w	801055a <_dtoa_r+0x6fa>
 80102ac:	2f0e      	cmp	r7, #14
 80102ae:	f300 8154 	bgt.w	801055a <_dtoa_r+0x6fa>
 80102b2:	4b4b      	ldr	r3, [pc, #300]	@ (80103e0 <_dtoa_r+0x580>)
 80102b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80102b8:	ed93 7b00 	vldr	d7, [r3]
 80102bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102be:	2b00      	cmp	r3, #0
 80102c0:	ed8d 7b00 	vstr	d7, [sp]
 80102c4:	f280 80e5 	bge.w	8010492 <_dtoa_r+0x632>
 80102c8:	9b03      	ldr	r3, [sp, #12]
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	f300 80e1 	bgt.w	8010492 <_dtoa_r+0x632>
 80102d0:	d10c      	bne.n	80102ec <_dtoa_r+0x48c>
 80102d2:	4b48      	ldr	r3, [pc, #288]	@ (80103f4 <_dtoa_r+0x594>)
 80102d4:	2200      	movs	r2, #0
 80102d6:	ec51 0b17 	vmov	r0, r1, d7
 80102da:	f7f0 f995 	bl	8000608 <__aeabi_dmul>
 80102de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80102e2:	f7f0 fc17 	bl	8000b14 <__aeabi_dcmpge>
 80102e6:	2800      	cmp	r0, #0
 80102e8:	f000 8266 	beq.w	80107b8 <_dtoa_r+0x958>
 80102ec:	2400      	movs	r4, #0
 80102ee:	4625      	mov	r5, r4
 80102f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102f2:	4656      	mov	r6, sl
 80102f4:	ea6f 0803 	mvn.w	r8, r3
 80102f8:	2700      	movs	r7, #0
 80102fa:	4621      	mov	r1, r4
 80102fc:	4648      	mov	r0, r9
 80102fe:	f000 fcbf 	bl	8010c80 <_Bfree>
 8010302:	2d00      	cmp	r5, #0
 8010304:	f000 80bd 	beq.w	8010482 <_dtoa_r+0x622>
 8010308:	b12f      	cbz	r7, 8010316 <_dtoa_r+0x4b6>
 801030a:	42af      	cmp	r7, r5
 801030c:	d003      	beq.n	8010316 <_dtoa_r+0x4b6>
 801030e:	4639      	mov	r1, r7
 8010310:	4648      	mov	r0, r9
 8010312:	f000 fcb5 	bl	8010c80 <_Bfree>
 8010316:	4629      	mov	r1, r5
 8010318:	4648      	mov	r0, r9
 801031a:	f000 fcb1 	bl	8010c80 <_Bfree>
 801031e:	e0b0      	b.n	8010482 <_dtoa_r+0x622>
 8010320:	07e2      	lsls	r2, r4, #31
 8010322:	d505      	bpl.n	8010330 <_dtoa_r+0x4d0>
 8010324:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010328:	f7f0 f96e 	bl	8000608 <__aeabi_dmul>
 801032c:	3601      	adds	r6, #1
 801032e:	2301      	movs	r3, #1
 8010330:	1064      	asrs	r4, r4, #1
 8010332:	3508      	adds	r5, #8
 8010334:	e762      	b.n	80101fc <_dtoa_r+0x39c>
 8010336:	2602      	movs	r6, #2
 8010338:	e765      	b.n	8010206 <_dtoa_r+0x3a6>
 801033a:	9c03      	ldr	r4, [sp, #12]
 801033c:	46b8      	mov	r8, r7
 801033e:	e784      	b.n	801024a <_dtoa_r+0x3ea>
 8010340:	4b27      	ldr	r3, [pc, #156]	@ (80103e0 <_dtoa_r+0x580>)
 8010342:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8010344:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010348:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801034c:	4454      	add	r4, sl
 801034e:	2900      	cmp	r1, #0
 8010350:	d054      	beq.n	80103fc <_dtoa_r+0x59c>
 8010352:	4929      	ldr	r1, [pc, #164]	@ (80103f8 <_dtoa_r+0x598>)
 8010354:	2000      	movs	r0, #0
 8010356:	f7f0 fa81 	bl	800085c <__aeabi_ddiv>
 801035a:	4633      	mov	r3, r6
 801035c:	462a      	mov	r2, r5
 801035e:	f7ef ff9b 	bl	8000298 <__aeabi_dsub>
 8010362:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010366:	4656      	mov	r6, sl
 8010368:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801036c:	f7f0 fbfc 	bl	8000b68 <__aeabi_d2iz>
 8010370:	4605      	mov	r5, r0
 8010372:	f7f0 f8df 	bl	8000534 <__aeabi_i2d>
 8010376:	4602      	mov	r2, r0
 8010378:	460b      	mov	r3, r1
 801037a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801037e:	f7ef ff8b 	bl	8000298 <__aeabi_dsub>
 8010382:	3530      	adds	r5, #48	@ 0x30
 8010384:	4602      	mov	r2, r0
 8010386:	460b      	mov	r3, r1
 8010388:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801038c:	f806 5b01 	strb.w	r5, [r6], #1
 8010390:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8010394:	f7f0 fbaa 	bl	8000aec <__aeabi_dcmplt>
 8010398:	2800      	cmp	r0, #0
 801039a:	d172      	bne.n	8010482 <_dtoa_r+0x622>
 801039c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80103a0:	4911      	ldr	r1, [pc, #68]	@ (80103e8 <_dtoa_r+0x588>)
 80103a2:	2000      	movs	r0, #0
 80103a4:	f7ef ff78 	bl	8000298 <__aeabi_dsub>
 80103a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80103ac:	f7f0 fb9e 	bl	8000aec <__aeabi_dcmplt>
 80103b0:	2800      	cmp	r0, #0
 80103b2:	f040 80b4 	bne.w	801051e <_dtoa_r+0x6be>
 80103b6:	42a6      	cmp	r6, r4
 80103b8:	f43f af70 	beq.w	801029c <_dtoa_r+0x43c>
 80103bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80103c0:	4b0a      	ldr	r3, [pc, #40]	@ (80103ec <_dtoa_r+0x58c>)
 80103c2:	2200      	movs	r2, #0
 80103c4:	f7f0 f920 	bl	8000608 <__aeabi_dmul>
 80103c8:	4b08      	ldr	r3, [pc, #32]	@ (80103ec <_dtoa_r+0x58c>)
 80103ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80103ce:	2200      	movs	r2, #0
 80103d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80103d4:	f7f0 f918 	bl	8000608 <__aeabi_dmul>
 80103d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80103dc:	e7c4      	b.n	8010368 <_dtoa_r+0x508>
 80103de:	bf00      	nop
 80103e0:	08013200 	.word	0x08013200
 80103e4:	080131d8 	.word	0x080131d8
 80103e8:	3ff00000 	.word	0x3ff00000
 80103ec:	40240000 	.word	0x40240000
 80103f0:	401c0000 	.word	0x401c0000
 80103f4:	40140000 	.word	0x40140000
 80103f8:	3fe00000 	.word	0x3fe00000
 80103fc:	4631      	mov	r1, r6
 80103fe:	4628      	mov	r0, r5
 8010400:	f7f0 f902 	bl	8000608 <__aeabi_dmul>
 8010404:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8010408:	9413      	str	r4, [sp, #76]	@ 0x4c
 801040a:	4656      	mov	r6, sl
 801040c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010410:	f7f0 fbaa 	bl	8000b68 <__aeabi_d2iz>
 8010414:	4605      	mov	r5, r0
 8010416:	f7f0 f88d 	bl	8000534 <__aeabi_i2d>
 801041a:	4602      	mov	r2, r0
 801041c:	460b      	mov	r3, r1
 801041e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8010422:	f7ef ff39 	bl	8000298 <__aeabi_dsub>
 8010426:	3530      	adds	r5, #48	@ 0x30
 8010428:	f806 5b01 	strb.w	r5, [r6], #1
 801042c:	4602      	mov	r2, r0
 801042e:	460b      	mov	r3, r1
 8010430:	42a6      	cmp	r6, r4
 8010432:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8010436:	f04f 0200 	mov.w	r2, #0
 801043a:	d124      	bne.n	8010486 <_dtoa_r+0x626>
 801043c:	4baf      	ldr	r3, [pc, #700]	@ (80106fc <_dtoa_r+0x89c>)
 801043e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8010442:	f7ef ff2b 	bl	800029c <__adddf3>
 8010446:	4602      	mov	r2, r0
 8010448:	460b      	mov	r3, r1
 801044a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801044e:	f7f0 fb6b 	bl	8000b28 <__aeabi_dcmpgt>
 8010452:	2800      	cmp	r0, #0
 8010454:	d163      	bne.n	801051e <_dtoa_r+0x6be>
 8010456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801045a:	49a8      	ldr	r1, [pc, #672]	@ (80106fc <_dtoa_r+0x89c>)
 801045c:	2000      	movs	r0, #0
 801045e:	f7ef ff1b 	bl	8000298 <__aeabi_dsub>
 8010462:	4602      	mov	r2, r0
 8010464:	460b      	mov	r3, r1
 8010466:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801046a:	f7f0 fb3f 	bl	8000aec <__aeabi_dcmplt>
 801046e:	2800      	cmp	r0, #0
 8010470:	f43f af14 	beq.w	801029c <_dtoa_r+0x43c>
 8010474:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8010476:	1e73      	subs	r3, r6, #1
 8010478:	9313      	str	r3, [sp, #76]	@ 0x4c
 801047a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801047e:	2b30      	cmp	r3, #48	@ 0x30
 8010480:	d0f8      	beq.n	8010474 <_dtoa_r+0x614>
 8010482:	4647      	mov	r7, r8
 8010484:	e03b      	b.n	80104fe <_dtoa_r+0x69e>
 8010486:	4b9e      	ldr	r3, [pc, #632]	@ (8010700 <_dtoa_r+0x8a0>)
 8010488:	f7f0 f8be 	bl	8000608 <__aeabi_dmul>
 801048c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010490:	e7bc      	b.n	801040c <_dtoa_r+0x5ac>
 8010492:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8010496:	4656      	mov	r6, sl
 8010498:	e9dd 2300 	ldrd	r2, r3, [sp]
 801049c:	4620      	mov	r0, r4
 801049e:	4629      	mov	r1, r5
 80104a0:	f7f0 f9dc 	bl	800085c <__aeabi_ddiv>
 80104a4:	f7f0 fb60 	bl	8000b68 <__aeabi_d2iz>
 80104a8:	4680      	mov	r8, r0
 80104aa:	f7f0 f843 	bl	8000534 <__aeabi_i2d>
 80104ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104b2:	f7f0 f8a9 	bl	8000608 <__aeabi_dmul>
 80104b6:	4602      	mov	r2, r0
 80104b8:	460b      	mov	r3, r1
 80104ba:	4620      	mov	r0, r4
 80104bc:	4629      	mov	r1, r5
 80104be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80104c2:	f7ef fee9 	bl	8000298 <__aeabi_dsub>
 80104c6:	f806 4b01 	strb.w	r4, [r6], #1
 80104ca:	9d03      	ldr	r5, [sp, #12]
 80104cc:	eba6 040a 	sub.w	r4, r6, sl
 80104d0:	42a5      	cmp	r5, r4
 80104d2:	4602      	mov	r2, r0
 80104d4:	460b      	mov	r3, r1
 80104d6:	d133      	bne.n	8010540 <_dtoa_r+0x6e0>
 80104d8:	f7ef fee0 	bl	800029c <__adddf3>
 80104dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e0:	4604      	mov	r4, r0
 80104e2:	460d      	mov	r5, r1
 80104e4:	f7f0 fb20 	bl	8000b28 <__aeabi_dcmpgt>
 80104e8:	b9c0      	cbnz	r0, 801051c <_dtoa_r+0x6bc>
 80104ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104ee:	4620      	mov	r0, r4
 80104f0:	4629      	mov	r1, r5
 80104f2:	f7f0 faf1 	bl	8000ad8 <__aeabi_dcmpeq>
 80104f6:	b110      	cbz	r0, 80104fe <_dtoa_r+0x69e>
 80104f8:	f018 0f01 	tst.w	r8, #1
 80104fc:	d10e      	bne.n	801051c <_dtoa_r+0x6bc>
 80104fe:	9902      	ldr	r1, [sp, #8]
 8010500:	4648      	mov	r0, r9
 8010502:	f000 fbbd 	bl	8010c80 <_Bfree>
 8010506:	2300      	movs	r3, #0
 8010508:	7033      	strb	r3, [r6, #0]
 801050a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801050c:	3701      	adds	r7, #1
 801050e:	601f      	str	r7, [r3, #0]
 8010510:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8010512:	2b00      	cmp	r3, #0
 8010514:	f000 824b 	beq.w	80109ae <_dtoa_r+0xb4e>
 8010518:	601e      	str	r6, [r3, #0]
 801051a:	e248      	b.n	80109ae <_dtoa_r+0xb4e>
 801051c:	46b8      	mov	r8, r7
 801051e:	4633      	mov	r3, r6
 8010520:	461e      	mov	r6, r3
 8010522:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010526:	2a39      	cmp	r2, #57	@ 0x39
 8010528:	d106      	bne.n	8010538 <_dtoa_r+0x6d8>
 801052a:	459a      	cmp	sl, r3
 801052c:	d1f8      	bne.n	8010520 <_dtoa_r+0x6c0>
 801052e:	2230      	movs	r2, #48	@ 0x30
 8010530:	f108 0801 	add.w	r8, r8, #1
 8010534:	f88a 2000 	strb.w	r2, [sl]
 8010538:	781a      	ldrb	r2, [r3, #0]
 801053a:	3201      	adds	r2, #1
 801053c:	701a      	strb	r2, [r3, #0]
 801053e:	e7a0      	b.n	8010482 <_dtoa_r+0x622>
 8010540:	4b6f      	ldr	r3, [pc, #444]	@ (8010700 <_dtoa_r+0x8a0>)
 8010542:	2200      	movs	r2, #0
 8010544:	f7f0 f860 	bl	8000608 <__aeabi_dmul>
 8010548:	2200      	movs	r2, #0
 801054a:	2300      	movs	r3, #0
 801054c:	4604      	mov	r4, r0
 801054e:	460d      	mov	r5, r1
 8010550:	f7f0 fac2 	bl	8000ad8 <__aeabi_dcmpeq>
 8010554:	2800      	cmp	r0, #0
 8010556:	d09f      	beq.n	8010498 <_dtoa_r+0x638>
 8010558:	e7d1      	b.n	80104fe <_dtoa_r+0x69e>
 801055a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801055c:	2a00      	cmp	r2, #0
 801055e:	f000 80ea 	beq.w	8010736 <_dtoa_r+0x8d6>
 8010562:	9a07      	ldr	r2, [sp, #28]
 8010564:	2a01      	cmp	r2, #1
 8010566:	f300 80cd 	bgt.w	8010704 <_dtoa_r+0x8a4>
 801056a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801056c:	2a00      	cmp	r2, #0
 801056e:	f000 80c1 	beq.w	80106f4 <_dtoa_r+0x894>
 8010572:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8010576:	9c08      	ldr	r4, [sp, #32]
 8010578:	9e00      	ldr	r6, [sp, #0]
 801057a:	9a00      	ldr	r2, [sp, #0]
 801057c:	441a      	add	r2, r3
 801057e:	9200      	str	r2, [sp, #0]
 8010580:	9a06      	ldr	r2, [sp, #24]
 8010582:	2101      	movs	r1, #1
 8010584:	441a      	add	r2, r3
 8010586:	4648      	mov	r0, r9
 8010588:	9206      	str	r2, [sp, #24]
 801058a:	f000 fc2d 	bl	8010de8 <__i2b>
 801058e:	4605      	mov	r5, r0
 8010590:	b166      	cbz	r6, 80105ac <_dtoa_r+0x74c>
 8010592:	9b06      	ldr	r3, [sp, #24]
 8010594:	2b00      	cmp	r3, #0
 8010596:	dd09      	ble.n	80105ac <_dtoa_r+0x74c>
 8010598:	42b3      	cmp	r3, r6
 801059a:	9a00      	ldr	r2, [sp, #0]
 801059c:	bfa8      	it	ge
 801059e:	4633      	movge	r3, r6
 80105a0:	1ad2      	subs	r2, r2, r3
 80105a2:	9200      	str	r2, [sp, #0]
 80105a4:	9a06      	ldr	r2, [sp, #24]
 80105a6:	1af6      	subs	r6, r6, r3
 80105a8:	1ad3      	subs	r3, r2, r3
 80105aa:	9306      	str	r3, [sp, #24]
 80105ac:	9b08      	ldr	r3, [sp, #32]
 80105ae:	b30b      	cbz	r3, 80105f4 <_dtoa_r+0x794>
 80105b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	f000 80c6 	beq.w	8010744 <_dtoa_r+0x8e4>
 80105b8:	2c00      	cmp	r4, #0
 80105ba:	f000 80c0 	beq.w	801073e <_dtoa_r+0x8de>
 80105be:	4629      	mov	r1, r5
 80105c0:	4622      	mov	r2, r4
 80105c2:	4648      	mov	r0, r9
 80105c4:	f000 fcc8 	bl	8010f58 <__pow5mult>
 80105c8:	9a02      	ldr	r2, [sp, #8]
 80105ca:	4601      	mov	r1, r0
 80105cc:	4605      	mov	r5, r0
 80105ce:	4648      	mov	r0, r9
 80105d0:	f000 fc20 	bl	8010e14 <__multiply>
 80105d4:	9902      	ldr	r1, [sp, #8]
 80105d6:	4680      	mov	r8, r0
 80105d8:	4648      	mov	r0, r9
 80105da:	f000 fb51 	bl	8010c80 <_Bfree>
 80105de:	9b08      	ldr	r3, [sp, #32]
 80105e0:	1b1b      	subs	r3, r3, r4
 80105e2:	9308      	str	r3, [sp, #32]
 80105e4:	f000 80b1 	beq.w	801074a <_dtoa_r+0x8ea>
 80105e8:	9a08      	ldr	r2, [sp, #32]
 80105ea:	4641      	mov	r1, r8
 80105ec:	4648      	mov	r0, r9
 80105ee:	f000 fcb3 	bl	8010f58 <__pow5mult>
 80105f2:	9002      	str	r0, [sp, #8]
 80105f4:	2101      	movs	r1, #1
 80105f6:	4648      	mov	r0, r9
 80105f8:	f000 fbf6 	bl	8010de8 <__i2b>
 80105fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80105fe:	4604      	mov	r4, r0
 8010600:	2b00      	cmp	r3, #0
 8010602:	f000 81d8 	beq.w	80109b6 <_dtoa_r+0xb56>
 8010606:	461a      	mov	r2, r3
 8010608:	4601      	mov	r1, r0
 801060a:	4648      	mov	r0, r9
 801060c:	f000 fca4 	bl	8010f58 <__pow5mult>
 8010610:	9b07      	ldr	r3, [sp, #28]
 8010612:	2b01      	cmp	r3, #1
 8010614:	4604      	mov	r4, r0
 8010616:	f300 809f 	bgt.w	8010758 <_dtoa_r+0x8f8>
 801061a:	9b04      	ldr	r3, [sp, #16]
 801061c:	2b00      	cmp	r3, #0
 801061e:	f040 8097 	bne.w	8010750 <_dtoa_r+0x8f0>
 8010622:	9b05      	ldr	r3, [sp, #20]
 8010624:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010628:	2b00      	cmp	r3, #0
 801062a:	f040 8093 	bne.w	8010754 <_dtoa_r+0x8f4>
 801062e:	9b05      	ldr	r3, [sp, #20]
 8010630:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010634:	0d1b      	lsrs	r3, r3, #20
 8010636:	051b      	lsls	r3, r3, #20
 8010638:	b133      	cbz	r3, 8010648 <_dtoa_r+0x7e8>
 801063a:	9b00      	ldr	r3, [sp, #0]
 801063c:	3301      	adds	r3, #1
 801063e:	9300      	str	r3, [sp, #0]
 8010640:	9b06      	ldr	r3, [sp, #24]
 8010642:	3301      	adds	r3, #1
 8010644:	9306      	str	r3, [sp, #24]
 8010646:	2301      	movs	r3, #1
 8010648:	9308      	str	r3, [sp, #32]
 801064a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801064c:	2b00      	cmp	r3, #0
 801064e:	f000 81b8 	beq.w	80109c2 <_dtoa_r+0xb62>
 8010652:	6923      	ldr	r3, [r4, #16]
 8010654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010658:	6918      	ldr	r0, [r3, #16]
 801065a:	f000 fb79 	bl	8010d50 <__hi0bits>
 801065e:	f1c0 0020 	rsb	r0, r0, #32
 8010662:	9b06      	ldr	r3, [sp, #24]
 8010664:	4418      	add	r0, r3
 8010666:	f010 001f 	ands.w	r0, r0, #31
 801066a:	f000 8082 	beq.w	8010772 <_dtoa_r+0x912>
 801066e:	f1c0 0320 	rsb	r3, r0, #32
 8010672:	2b04      	cmp	r3, #4
 8010674:	dd73      	ble.n	801075e <_dtoa_r+0x8fe>
 8010676:	9b00      	ldr	r3, [sp, #0]
 8010678:	f1c0 001c 	rsb	r0, r0, #28
 801067c:	4403      	add	r3, r0
 801067e:	9300      	str	r3, [sp, #0]
 8010680:	9b06      	ldr	r3, [sp, #24]
 8010682:	4403      	add	r3, r0
 8010684:	4406      	add	r6, r0
 8010686:	9306      	str	r3, [sp, #24]
 8010688:	9b00      	ldr	r3, [sp, #0]
 801068a:	2b00      	cmp	r3, #0
 801068c:	dd05      	ble.n	801069a <_dtoa_r+0x83a>
 801068e:	9902      	ldr	r1, [sp, #8]
 8010690:	461a      	mov	r2, r3
 8010692:	4648      	mov	r0, r9
 8010694:	f000 fcba 	bl	801100c <__lshift>
 8010698:	9002      	str	r0, [sp, #8]
 801069a:	9b06      	ldr	r3, [sp, #24]
 801069c:	2b00      	cmp	r3, #0
 801069e:	dd05      	ble.n	80106ac <_dtoa_r+0x84c>
 80106a0:	4621      	mov	r1, r4
 80106a2:	461a      	mov	r2, r3
 80106a4:	4648      	mov	r0, r9
 80106a6:	f000 fcb1 	bl	801100c <__lshift>
 80106aa:	4604      	mov	r4, r0
 80106ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d061      	beq.n	8010776 <_dtoa_r+0x916>
 80106b2:	9802      	ldr	r0, [sp, #8]
 80106b4:	4621      	mov	r1, r4
 80106b6:	f000 fd15 	bl	80110e4 <__mcmp>
 80106ba:	2800      	cmp	r0, #0
 80106bc:	da5b      	bge.n	8010776 <_dtoa_r+0x916>
 80106be:	2300      	movs	r3, #0
 80106c0:	9902      	ldr	r1, [sp, #8]
 80106c2:	220a      	movs	r2, #10
 80106c4:	4648      	mov	r0, r9
 80106c6:	f000 fafd 	bl	8010cc4 <__multadd>
 80106ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106cc:	9002      	str	r0, [sp, #8]
 80106ce:	f107 38ff 	add.w	r8, r7, #4294967295
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	f000 8177 	beq.w	80109c6 <_dtoa_r+0xb66>
 80106d8:	4629      	mov	r1, r5
 80106da:	2300      	movs	r3, #0
 80106dc:	220a      	movs	r2, #10
 80106de:	4648      	mov	r0, r9
 80106e0:	f000 faf0 	bl	8010cc4 <__multadd>
 80106e4:	f1bb 0f00 	cmp.w	fp, #0
 80106e8:	4605      	mov	r5, r0
 80106ea:	dc6f      	bgt.n	80107cc <_dtoa_r+0x96c>
 80106ec:	9b07      	ldr	r3, [sp, #28]
 80106ee:	2b02      	cmp	r3, #2
 80106f0:	dc49      	bgt.n	8010786 <_dtoa_r+0x926>
 80106f2:	e06b      	b.n	80107cc <_dtoa_r+0x96c>
 80106f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80106f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80106fa:	e73c      	b.n	8010576 <_dtoa_r+0x716>
 80106fc:	3fe00000 	.word	0x3fe00000
 8010700:	40240000 	.word	0x40240000
 8010704:	9b03      	ldr	r3, [sp, #12]
 8010706:	1e5c      	subs	r4, r3, #1
 8010708:	9b08      	ldr	r3, [sp, #32]
 801070a:	42a3      	cmp	r3, r4
 801070c:	db09      	blt.n	8010722 <_dtoa_r+0x8c2>
 801070e:	1b1c      	subs	r4, r3, r4
 8010710:	9b03      	ldr	r3, [sp, #12]
 8010712:	2b00      	cmp	r3, #0
 8010714:	f6bf af30 	bge.w	8010578 <_dtoa_r+0x718>
 8010718:	9b00      	ldr	r3, [sp, #0]
 801071a:	9a03      	ldr	r2, [sp, #12]
 801071c:	1a9e      	subs	r6, r3, r2
 801071e:	2300      	movs	r3, #0
 8010720:	e72b      	b.n	801057a <_dtoa_r+0x71a>
 8010722:	9b08      	ldr	r3, [sp, #32]
 8010724:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010726:	9408      	str	r4, [sp, #32]
 8010728:	1ae3      	subs	r3, r4, r3
 801072a:	441a      	add	r2, r3
 801072c:	9e00      	ldr	r6, [sp, #0]
 801072e:	9b03      	ldr	r3, [sp, #12]
 8010730:	920d      	str	r2, [sp, #52]	@ 0x34
 8010732:	2400      	movs	r4, #0
 8010734:	e721      	b.n	801057a <_dtoa_r+0x71a>
 8010736:	9c08      	ldr	r4, [sp, #32]
 8010738:	9e00      	ldr	r6, [sp, #0]
 801073a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801073c:	e728      	b.n	8010590 <_dtoa_r+0x730>
 801073e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8010742:	e751      	b.n	80105e8 <_dtoa_r+0x788>
 8010744:	9a08      	ldr	r2, [sp, #32]
 8010746:	9902      	ldr	r1, [sp, #8]
 8010748:	e750      	b.n	80105ec <_dtoa_r+0x78c>
 801074a:	f8cd 8008 	str.w	r8, [sp, #8]
 801074e:	e751      	b.n	80105f4 <_dtoa_r+0x794>
 8010750:	2300      	movs	r3, #0
 8010752:	e779      	b.n	8010648 <_dtoa_r+0x7e8>
 8010754:	9b04      	ldr	r3, [sp, #16]
 8010756:	e777      	b.n	8010648 <_dtoa_r+0x7e8>
 8010758:	2300      	movs	r3, #0
 801075a:	9308      	str	r3, [sp, #32]
 801075c:	e779      	b.n	8010652 <_dtoa_r+0x7f2>
 801075e:	d093      	beq.n	8010688 <_dtoa_r+0x828>
 8010760:	9a00      	ldr	r2, [sp, #0]
 8010762:	331c      	adds	r3, #28
 8010764:	441a      	add	r2, r3
 8010766:	9200      	str	r2, [sp, #0]
 8010768:	9a06      	ldr	r2, [sp, #24]
 801076a:	441a      	add	r2, r3
 801076c:	441e      	add	r6, r3
 801076e:	9206      	str	r2, [sp, #24]
 8010770:	e78a      	b.n	8010688 <_dtoa_r+0x828>
 8010772:	4603      	mov	r3, r0
 8010774:	e7f4      	b.n	8010760 <_dtoa_r+0x900>
 8010776:	9b03      	ldr	r3, [sp, #12]
 8010778:	2b00      	cmp	r3, #0
 801077a:	46b8      	mov	r8, r7
 801077c:	dc20      	bgt.n	80107c0 <_dtoa_r+0x960>
 801077e:	469b      	mov	fp, r3
 8010780:	9b07      	ldr	r3, [sp, #28]
 8010782:	2b02      	cmp	r3, #2
 8010784:	dd1e      	ble.n	80107c4 <_dtoa_r+0x964>
 8010786:	f1bb 0f00 	cmp.w	fp, #0
 801078a:	f47f adb1 	bne.w	80102f0 <_dtoa_r+0x490>
 801078e:	4621      	mov	r1, r4
 8010790:	465b      	mov	r3, fp
 8010792:	2205      	movs	r2, #5
 8010794:	4648      	mov	r0, r9
 8010796:	f000 fa95 	bl	8010cc4 <__multadd>
 801079a:	4601      	mov	r1, r0
 801079c:	4604      	mov	r4, r0
 801079e:	9802      	ldr	r0, [sp, #8]
 80107a0:	f000 fca0 	bl	80110e4 <__mcmp>
 80107a4:	2800      	cmp	r0, #0
 80107a6:	f77f ada3 	ble.w	80102f0 <_dtoa_r+0x490>
 80107aa:	4656      	mov	r6, sl
 80107ac:	2331      	movs	r3, #49	@ 0x31
 80107ae:	f806 3b01 	strb.w	r3, [r6], #1
 80107b2:	f108 0801 	add.w	r8, r8, #1
 80107b6:	e59f      	b.n	80102f8 <_dtoa_r+0x498>
 80107b8:	9c03      	ldr	r4, [sp, #12]
 80107ba:	46b8      	mov	r8, r7
 80107bc:	4625      	mov	r5, r4
 80107be:	e7f4      	b.n	80107aa <_dtoa_r+0x94a>
 80107c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80107c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	f000 8101 	beq.w	80109ce <_dtoa_r+0xb6e>
 80107cc:	2e00      	cmp	r6, #0
 80107ce:	dd05      	ble.n	80107dc <_dtoa_r+0x97c>
 80107d0:	4629      	mov	r1, r5
 80107d2:	4632      	mov	r2, r6
 80107d4:	4648      	mov	r0, r9
 80107d6:	f000 fc19 	bl	801100c <__lshift>
 80107da:	4605      	mov	r5, r0
 80107dc:	9b08      	ldr	r3, [sp, #32]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d05c      	beq.n	801089c <_dtoa_r+0xa3c>
 80107e2:	6869      	ldr	r1, [r5, #4]
 80107e4:	4648      	mov	r0, r9
 80107e6:	f000 fa0b 	bl	8010c00 <_Balloc>
 80107ea:	4606      	mov	r6, r0
 80107ec:	b928      	cbnz	r0, 80107fa <_dtoa_r+0x99a>
 80107ee:	4b82      	ldr	r3, [pc, #520]	@ (80109f8 <_dtoa_r+0xb98>)
 80107f0:	4602      	mov	r2, r0
 80107f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80107f6:	f7ff bb4a 	b.w	800fe8e <_dtoa_r+0x2e>
 80107fa:	692a      	ldr	r2, [r5, #16]
 80107fc:	3202      	adds	r2, #2
 80107fe:	0092      	lsls	r2, r2, #2
 8010800:	f105 010c 	add.w	r1, r5, #12
 8010804:	300c      	adds	r0, #12
 8010806:	f7ff fa76 	bl	800fcf6 <memcpy>
 801080a:	2201      	movs	r2, #1
 801080c:	4631      	mov	r1, r6
 801080e:	4648      	mov	r0, r9
 8010810:	f000 fbfc 	bl	801100c <__lshift>
 8010814:	f10a 0301 	add.w	r3, sl, #1
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	eb0a 030b 	add.w	r3, sl, fp
 801081e:	9308      	str	r3, [sp, #32]
 8010820:	9b04      	ldr	r3, [sp, #16]
 8010822:	f003 0301 	and.w	r3, r3, #1
 8010826:	462f      	mov	r7, r5
 8010828:	9306      	str	r3, [sp, #24]
 801082a:	4605      	mov	r5, r0
 801082c:	9b00      	ldr	r3, [sp, #0]
 801082e:	9802      	ldr	r0, [sp, #8]
 8010830:	4621      	mov	r1, r4
 8010832:	f103 3bff 	add.w	fp, r3, #4294967295
 8010836:	f7ff fa8b 	bl	800fd50 <quorem>
 801083a:	4603      	mov	r3, r0
 801083c:	3330      	adds	r3, #48	@ 0x30
 801083e:	9003      	str	r0, [sp, #12]
 8010840:	4639      	mov	r1, r7
 8010842:	9802      	ldr	r0, [sp, #8]
 8010844:	9309      	str	r3, [sp, #36]	@ 0x24
 8010846:	f000 fc4d 	bl	80110e4 <__mcmp>
 801084a:	462a      	mov	r2, r5
 801084c:	9004      	str	r0, [sp, #16]
 801084e:	4621      	mov	r1, r4
 8010850:	4648      	mov	r0, r9
 8010852:	f000 fc63 	bl	801111c <__mdiff>
 8010856:	68c2      	ldr	r2, [r0, #12]
 8010858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801085a:	4606      	mov	r6, r0
 801085c:	bb02      	cbnz	r2, 80108a0 <_dtoa_r+0xa40>
 801085e:	4601      	mov	r1, r0
 8010860:	9802      	ldr	r0, [sp, #8]
 8010862:	f000 fc3f 	bl	80110e4 <__mcmp>
 8010866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010868:	4602      	mov	r2, r0
 801086a:	4631      	mov	r1, r6
 801086c:	4648      	mov	r0, r9
 801086e:	920c      	str	r2, [sp, #48]	@ 0x30
 8010870:	9309      	str	r3, [sp, #36]	@ 0x24
 8010872:	f000 fa05 	bl	8010c80 <_Bfree>
 8010876:	9b07      	ldr	r3, [sp, #28]
 8010878:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801087a:	9e00      	ldr	r6, [sp, #0]
 801087c:	ea42 0103 	orr.w	r1, r2, r3
 8010880:	9b06      	ldr	r3, [sp, #24]
 8010882:	4319      	orrs	r1, r3
 8010884:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010886:	d10d      	bne.n	80108a4 <_dtoa_r+0xa44>
 8010888:	2b39      	cmp	r3, #57	@ 0x39
 801088a:	d027      	beq.n	80108dc <_dtoa_r+0xa7c>
 801088c:	9a04      	ldr	r2, [sp, #16]
 801088e:	2a00      	cmp	r2, #0
 8010890:	dd01      	ble.n	8010896 <_dtoa_r+0xa36>
 8010892:	9b03      	ldr	r3, [sp, #12]
 8010894:	3331      	adds	r3, #49	@ 0x31
 8010896:	f88b 3000 	strb.w	r3, [fp]
 801089a:	e52e      	b.n	80102fa <_dtoa_r+0x49a>
 801089c:	4628      	mov	r0, r5
 801089e:	e7b9      	b.n	8010814 <_dtoa_r+0x9b4>
 80108a0:	2201      	movs	r2, #1
 80108a2:	e7e2      	b.n	801086a <_dtoa_r+0xa0a>
 80108a4:	9904      	ldr	r1, [sp, #16]
 80108a6:	2900      	cmp	r1, #0
 80108a8:	db04      	blt.n	80108b4 <_dtoa_r+0xa54>
 80108aa:	9807      	ldr	r0, [sp, #28]
 80108ac:	4301      	orrs	r1, r0
 80108ae:	9806      	ldr	r0, [sp, #24]
 80108b0:	4301      	orrs	r1, r0
 80108b2:	d120      	bne.n	80108f6 <_dtoa_r+0xa96>
 80108b4:	2a00      	cmp	r2, #0
 80108b6:	ddee      	ble.n	8010896 <_dtoa_r+0xa36>
 80108b8:	9902      	ldr	r1, [sp, #8]
 80108ba:	9300      	str	r3, [sp, #0]
 80108bc:	2201      	movs	r2, #1
 80108be:	4648      	mov	r0, r9
 80108c0:	f000 fba4 	bl	801100c <__lshift>
 80108c4:	4621      	mov	r1, r4
 80108c6:	9002      	str	r0, [sp, #8]
 80108c8:	f000 fc0c 	bl	80110e4 <__mcmp>
 80108cc:	2800      	cmp	r0, #0
 80108ce:	9b00      	ldr	r3, [sp, #0]
 80108d0:	dc02      	bgt.n	80108d8 <_dtoa_r+0xa78>
 80108d2:	d1e0      	bne.n	8010896 <_dtoa_r+0xa36>
 80108d4:	07da      	lsls	r2, r3, #31
 80108d6:	d5de      	bpl.n	8010896 <_dtoa_r+0xa36>
 80108d8:	2b39      	cmp	r3, #57	@ 0x39
 80108da:	d1da      	bne.n	8010892 <_dtoa_r+0xa32>
 80108dc:	2339      	movs	r3, #57	@ 0x39
 80108de:	f88b 3000 	strb.w	r3, [fp]
 80108e2:	4633      	mov	r3, r6
 80108e4:	461e      	mov	r6, r3
 80108e6:	3b01      	subs	r3, #1
 80108e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80108ec:	2a39      	cmp	r2, #57	@ 0x39
 80108ee:	d04e      	beq.n	801098e <_dtoa_r+0xb2e>
 80108f0:	3201      	adds	r2, #1
 80108f2:	701a      	strb	r2, [r3, #0]
 80108f4:	e501      	b.n	80102fa <_dtoa_r+0x49a>
 80108f6:	2a00      	cmp	r2, #0
 80108f8:	dd03      	ble.n	8010902 <_dtoa_r+0xaa2>
 80108fa:	2b39      	cmp	r3, #57	@ 0x39
 80108fc:	d0ee      	beq.n	80108dc <_dtoa_r+0xa7c>
 80108fe:	3301      	adds	r3, #1
 8010900:	e7c9      	b.n	8010896 <_dtoa_r+0xa36>
 8010902:	9a00      	ldr	r2, [sp, #0]
 8010904:	9908      	ldr	r1, [sp, #32]
 8010906:	f802 3c01 	strb.w	r3, [r2, #-1]
 801090a:	428a      	cmp	r2, r1
 801090c:	d028      	beq.n	8010960 <_dtoa_r+0xb00>
 801090e:	9902      	ldr	r1, [sp, #8]
 8010910:	2300      	movs	r3, #0
 8010912:	220a      	movs	r2, #10
 8010914:	4648      	mov	r0, r9
 8010916:	f000 f9d5 	bl	8010cc4 <__multadd>
 801091a:	42af      	cmp	r7, r5
 801091c:	9002      	str	r0, [sp, #8]
 801091e:	f04f 0300 	mov.w	r3, #0
 8010922:	f04f 020a 	mov.w	r2, #10
 8010926:	4639      	mov	r1, r7
 8010928:	4648      	mov	r0, r9
 801092a:	d107      	bne.n	801093c <_dtoa_r+0xadc>
 801092c:	f000 f9ca 	bl	8010cc4 <__multadd>
 8010930:	4607      	mov	r7, r0
 8010932:	4605      	mov	r5, r0
 8010934:	9b00      	ldr	r3, [sp, #0]
 8010936:	3301      	adds	r3, #1
 8010938:	9300      	str	r3, [sp, #0]
 801093a:	e777      	b.n	801082c <_dtoa_r+0x9cc>
 801093c:	f000 f9c2 	bl	8010cc4 <__multadd>
 8010940:	4629      	mov	r1, r5
 8010942:	4607      	mov	r7, r0
 8010944:	2300      	movs	r3, #0
 8010946:	220a      	movs	r2, #10
 8010948:	4648      	mov	r0, r9
 801094a:	f000 f9bb 	bl	8010cc4 <__multadd>
 801094e:	4605      	mov	r5, r0
 8010950:	e7f0      	b.n	8010934 <_dtoa_r+0xad4>
 8010952:	f1bb 0f00 	cmp.w	fp, #0
 8010956:	bfcc      	ite	gt
 8010958:	465e      	movgt	r6, fp
 801095a:	2601      	movle	r6, #1
 801095c:	4456      	add	r6, sl
 801095e:	2700      	movs	r7, #0
 8010960:	9902      	ldr	r1, [sp, #8]
 8010962:	9300      	str	r3, [sp, #0]
 8010964:	2201      	movs	r2, #1
 8010966:	4648      	mov	r0, r9
 8010968:	f000 fb50 	bl	801100c <__lshift>
 801096c:	4621      	mov	r1, r4
 801096e:	9002      	str	r0, [sp, #8]
 8010970:	f000 fbb8 	bl	80110e4 <__mcmp>
 8010974:	2800      	cmp	r0, #0
 8010976:	dcb4      	bgt.n	80108e2 <_dtoa_r+0xa82>
 8010978:	d102      	bne.n	8010980 <_dtoa_r+0xb20>
 801097a:	9b00      	ldr	r3, [sp, #0]
 801097c:	07db      	lsls	r3, r3, #31
 801097e:	d4b0      	bmi.n	80108e2 <_dtoa_r+0xa82>
 8010980:	4633      	mov	r3, r6
 8010982:	461e      	mov	r6, r3
 8010984:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010988:	2a30      	cmp	r2, #48	@ 0x30
 801098a:	d0fa      	beq.n	8010982 <_dtoa_r+0xb22>
 801098c:	e4b5      	b.n	80102fa <_dtoa_r+0x49a>
 801098e:	459a      	cmp	sl, r3
 8010990:	d1a8      	bne.n	80108e4 <_dtoa_r+0xa84>
 8010992:	2331      	movs	r3, #49	@ 0x31
 8010994:	f108 0801 	add.w	r8, r8, #1
 8010998:	f88a 3000 	strb.w	r3, [sl]
 801099c:	e4ad      	b.n	80102fa <_dtoa_r+0x49a>
 801099e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80109a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80109fc <_dtoa_r+0xb9c>
 80109a4:	b11b      	cbz	r3, 80109ae <_dtoa_r+0xb4e>
 80109a6:	f10a 0308 	add.w	r3, sl, #8
 80109aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80109ac:	6013      	str	r3, [r2, #0]
 80109ae:	4650      	mov	r0, sl
 80109b0:	b017      	add	sp, #92	@ 0x5c
 80109b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109b6:	9b07      	ldr	r3, [sp, #28]
 80109b8:	2b01      	cmp	r3, #1
 80109ba:	f77f ae2e 	ble.w	801061a <_dtoa_r+0x7ba>
 80109be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80109c0:	9308      	str	r3, [sp, #32]
 80109c2:	2001      	movs	r0, #1
 80109c4:	e64d      	b.n	8010662 <_dtoa_r+0x802>
 80109c6:	f1bb 0f00 	cmp.w	fp, #0
 80109ca:	f77f aed9 	ble.w	8010780 <_dtoa_r+0x920>
 80109ce:	4656      	mov	r6, sl
 80109d0:	9802      	ldr	r0, [sp, #8]
 80109d2:	4621      	mov	r1, r4
 80109d4:	f7ff f9bc 	bl	800fd50 <quorem>
 80109d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80109dc:	f806 3b01 	strb.w	r3, [r6], #1
 80109e0:	eba6 020a 	sub.w	r2, r6, sl
 80109e4:	4593      	cmp	fp, r2
 80109e6:	ddb4      	ble.n	8010952 <_dtoa_r+0xaf2>
 80109e8:	9902      	ldr	r1, [sp, #8]
 80109ea:	2300      	movs	r3, #0
 80109ec:	220a      	movs	r2, #10
 80109ee:	4648      	mov	r0, r9
 80109f0:	f000 f968 	bl	8010cc4 <__multadd>
 80109f4:	9002      	str	r0, [sp, #8]
 80109f6:	e7eb      	b.n	80109d0 <_dtoa_r+0xb70>
 80109f8:	08013141 	.word	0x08013141
 80109fc:	080130c5 	.word	0x080130c5

08010a00 <_free_r>:
 8010a00:	b538      	push	{r3, r4, r5, lr}
 8010a02:	4605      	mov	r5, r0
 8010a04:	2900      	cmp	r1, #0
 8010a06:	d041      	beq.n	8010a8c <_free_r+0x8c>
 8010a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a0c:	1f0c      	subs	r4, r1, #4
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	bfb8      	it	lt
 8010a12:	18e4      	addlt	r4, r4, r3
 8010a14:	f000 f8e8 	bl	8010be8 <__malloc_lock>
 8010a18:	4a1d      	ldr	r2, [pc, #116]	@ (8010a90 <_free_r+0x90>)
 8010a1a:	6813      	ldr	r3, [r2, #0]
 8010a1c:	b933      	cbnz	r3, 8010a2c <_free_r+0x2c>
 8010a1e:	6063      	str	r3, [r4, #4]
 8010a20:	6014      	str	r4, [r2, #0]
 8010a22:	4628      	mov	r0, r5
 8010a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010a28:	f000 b8e4 	b.w	8010bf4 <__malloc_unlock>
 8010a2c:	42a3      	cmp	r3, r4
 8010a2e:	d908      	bls.n	8010a42 <_free_r+0x42>
 8010a30:	6820      	ldr	r0, [r4, #0]
 8010a32:	1821      	adds	r1, r4, r0
 8010a34:	428b      	cmp	r3, r1
 8010a36:	bf01      	itttt	eq
 8010a38:	6819      	ldreq	r1, [r3, #0]
 8010a3a:	685b      	ldreq	r3, [r3, #4]
 8010a3c:	1809      	addeq	r1, r1, r0
 8010a3e:	6021      	streq	r1, [r4, #0]
 8010a40:	e7ed      	b.n	8010a1e <_free_r+0x1e>
 8010a42:	461a      	mov	r2, r3
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	b10b      	cbz	r3, 8010a4c <_free_r+0x4c>
 8010a48:	42a3      	cmp	r3, r4
 8010a4a:	d9fa      	bls.n	8010a42 <_free_r+0x42>
 8010a4c:	6811      	ldr	r1, [r2, #0]
 8010a4e:	1850      	adds	r0, r2, r1
 8010a50:	42a0      	cmp	r0, r4
 8010a52:	d10b      	bne.n	8010a6c <_free_r+0x6c>
 8010a54:	6820      	ldr	r0, [r4, #0]
 8010a56:	4401      	add	r1, r0
 8010a58:	1850      	adds	r0, r2, r1
 8010a5a:	4283      	cmp	r3, r0
 8010a5c:	6011      	str	r1, [r2, #0]
 8010a5e:	d1e0      	bne.n	8010a22 <_free_r+0x22>
 8010a60:	6818      	ldr	r0, [r3, #0]
 8010a62:	685b      	ldr	r3, [r3, #4]
 8010a64:	6053      	str	r3, [r2, #4]
 8010a66:	4408      	add	r0, r1
 8010a68:	6010      	str	r0, [r2, #0]
 8010a6a:	e7da      	b.n	8010a22 <_free_r+0x22>
 8010a6c:	d902      	bls.n	8010a74 <_free_r+0x74>
 8010a6e:	230c      	movs	r3, #12
 8010a70:	602b      	str	r3, [r5, #0]
 8010a72:	e7d6      	b.n	8010a22 <_free_r+0x22>
 8010a74:	6820      	ldr	r0, [r4, #0]
 8010a76:	1821      	adds	r1, r4, r0
 8010a78:	428b      	cmp	r3, r1
 8010a7a:	bf04      	itt	eq
 8010a7c:	6819      	ldreq	r1, [r3, #0]
 8010a7e:	685b      	ldreq	r3, [r3, #4]
 8010a80:	6063      	str	r3, [r4, #4]
 8010a82:	bf04      	itt	eq
 8010a84:	1809      	addeq	r1, r1, r0
 8010a86:	6021      	streq	r1, [r4, #0]
 8010a88:	6054      	str	r4, [r2, #4]
 8010a8a:	e7ca      	b.n	8010a22 <_free_r+0x22>
 8010a8c:	bd38      	pop	{r3, r4, r5, pc}
 8010a8e:	bf00      	nop
 8010a90:	2000553c 	.word	0x2000553c

08010a94 <malloc>:
 8010a94:	4b02      	ldr	r3, [pc, #8]	@ (8010aa0 <malloc+0xc>)
 8010a96:	4601      	mov	r1, r0
 8010a98:	6818      	ldr	r0, [r3, #0]
 8010a9a:	f000 b825 	b.w	8010ae8 <_malloc_r>
 8010a9e:	bf00      	nop
 8010aa0:	20000024 	.word	0x20000024

08010aa4 <sbrk_aligned>:
 8010aa4:	b570      	push	{r4, r5, r6, lr}
 8010aa6:	4e0f      	ldr	r6, [pc, #60]	@ (8010ae4 <sbrk_aligned+0x40>)
 8010aa8:	460c      	mov	r4, r1
 8010aaa:	6831      	ldr	r1, [r6, #0]
 8010aac:	4605      	mov	r5, r0
 8010aae:	b911      	cbnz	r1, 8010ab6 <sbrk_aligned+0x12>
 8010ab0:	f001 f816 	bl	8011ae0 <_sbrk_r>
 8010ab4:	6030      	str	r0, [r6, #0]
 8010ab6:	4621      	mov	r1, r4
 8010ab8:	4628      	mov	r0, r5
 8010aba:	f001 f811 	bl	8011ae0 <_sbrk_r>
 8010abe:	1c43      	adds	r3, r0, #1
 8010ac0:	d103      	bne.n	8010aca <sbrk_aligned+0x26>
 8010ac2:	f04f 34ff 	mov.w	r4, #4294967295
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	bd70      	pop	{r4, r5, r6, pc}
 8010aca:	1cc4      	adds	r4, r0, #3
 8010acc:	f024 0403 	bic.w	r4, r4, #3
 8010ad0:	42a0      	cmp	r0, r4
 8010ad2:	d0f8      	beq.n	8010ac6 <sbrk_aligned+0x22>
 8010ad4:	1a21      	subs	r1, r4, r0
 8010ad6:	4628      	mov	r0, r5
 8010ad8:	f001 f802 	bl	8011ae0 <_sbrk_r>
 8010adc:	3001      	adds	r0, #1
 8010ade:	d1f2      	bne.n	8010ac6 <sbrk_aligned+0x22>
 8010ae0:	e7ef      	b.n	8010ac2 <sbrk_aligned+0x1e>
 8010ae2:	bf00      	nop
 8010ae4:	20005538 	.word	0x20005538

08010ae8 <_malloc_r>:
 8010ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aec:	1ccd      	adds	r5, r1, #3
 8010aee:	f025 0503 	bic.w	r5, r5, #3
 8010af2:	3508      	adds	r5, #8
 8010af4:	2d0c      	cmp	r5, #12
 8010af6:	bf38      	it	cc
 8010af8:	250c      	movcc	r5, #12
 8010afa:	2d00      	cmp	r5, #0
 8010afc:	4606      	mov	r6, r0
 8010afe:	db01      	blt.n	8010b04 <_malloc_r+0x1c>
 8010b00:	42a9      	cmp	r1, r5
 8010b02:	d904      	bls.n	8010b0e <_malloc_r+0x26>
 8010b04:	230c      	movs	r3, #12
 8010b06:	6033      	str	r3, [r6, #0]
 8010b08:	2000      	movs	r0, #0
 8010b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010be4 <_malloc_r+0xfc>
 8010b12:	f000 f869 	bl	8010be8 <__malloc_lock>
 8010b16:	f8d8 3000 	ldr.w	r3, [r8]
 8010b1a:	461c      	mov	r4, r3
 8010b1c:	bb44      	cbnz	r4, 8010b70 <_malloc_r+0x88>
 8010b1e:	4629      	mov	r1, r5
 8010b20:	4630      	mov	r0, r6
 8010b22:	f7ff ffbf 	bl	8010aa4 <sbrk_aligned>
 8010b26:	1c43      	adds	r3, r0, #1
 8010b28:	4604      	mov	r4, r0
 8010b2a:	d158      	bne.n	8010bde <_malloc_r+0xf6>
 8010b2c:	f8d8 4000 	ldr.w	r4, [r8]
 8010b30:	4627      	mov	r7, r4
 8010b32:	2f00      	cmp	r7, #0
 8010b34:	d143      	bne.n	8010bbe <_malloc_r+0xd6>
 8010b36:	2c00      	cmp	r4, #0
 8010b38:	d04b      	beq.n	8010bd2 <_malloc_r+0xea>
 8010b3a:	6823      	ldr	r3, [r4, #0]
 8010b3c:	4639      	mov	r1, r7
 8010b3e:	4630      	mov	r0, r6
 8010b40:	eb04 0903 	add.w	r9, r4, r3
 8010b44:	f000 ffcc 	bl	8011ae0 <_sbrk_r>
 8010b48:	4581      	cmp	r9, r0
 8010b4a:	d142      	bne.n	8010bd2 <_malloc_r+0xea>
 8010b4c:	6821      	ldr	r1, [r4, #0]
 8010b4e:	1a6d      	subs	r5, r5, r1
 8010b50:	4629      	mov	r1, r5
 8010b52:	4630      	mov	r0, r6
 8010b54:	f7ff ffa6 	bl	8010aa4 <sbrk_aligned>
 8010b58:	3001      	adds	r0, #1
 8010b5a:	d03a      	beq.n	8010bd2 <_malloc_r+0xea>
 8010b5c:	6823      	ldr	r3, [r4, #0]
 8010b5e:	442b      	add	r3, r5
 8010b60:	6023      	str	r3, [r4, #0]
 8010b62:	f8d8 3000 	ldr.w	r3, [r8]
 8010b66:	685a      	ldr	r2, [r3, #4]
 8010b68:	bb62      	cbnz	r2, 8010bc4 <_malloc_r+0xdc>
 8010b6a:	f8c8 7000 	str.w	r7, [r8]
 8010b6e:	e00f      	b.n	8010b90 <_malloc_r+0xa8>
 8010b70:	6822      	ldr	r2, [r4, #0]
 8010b72:	1b52      	subs	r2, r2, r5
 8010b74:	d420      	bmi.n	8010bb8 <_malloc_r+0xd0>
 8010b76:	2a0b      	cmp	r2, #11
 8010b78:	d917      	bls.n	8010baa <_malloc_r+0xc2>
 8010b7a:	1961      	adds	r1, r4, r5
 8010b7c:	42a3      	cmp	r3, r4
 8010b7e:	6025      	str	r5, [r4, #0]
 8010b80:	bf18      	it	ne
 8010b82:	6059      	strne	r1, [r3, #4]
 8010b84:	6863      	ldr	r3, [r4, #4]
 8010b86:	bf08      	it	eq
 8010b88:	f8c8 1000 	streq.w	r1, [r8]
 8010b8c:	5162      	str	r2, [r4, r5]
 8010b8e:	604b      	str	r3, [r1, #4]
 8010b90:	4630      	mov	r0, r6
 8010b92:	f000 f82f 	bl	8010bf4 <__malloc_unlock>
 8010b96:	f104 000b 	add.w	r0, r4, #11
 8010b9a:	1d23      	adds	r3, r4, #4
 8010b9c:	f020 0007 	bic.w	r0, r0, #7
 8010ba0:	1ac2      	subs	r2, r0, r3
 8010ba2:	bf1c      	itt	ne
 8010ba4:	1a1b      	subne	r3, r3, r0
 8010ba6:	50a3      	strne	r3, [r4, r2]
 8010ba8:	e7af      	b.n	8010b0a <_malloc_r+0x22>
 8010baa:	6862      	ldr	r2, [r4, #4]
 8010bac:	42a3      	cmp	r3, r4
 8010bae:	bf0c      	ite	eq
 8010bb0:	f8c8 2000 	streq.w	r2, [r8]
 8010bb4:	605a      	strne	r2, [r3, #4]
 8010bb6:	e7eb      	b.n	8010b90 <_malloc_r+0xa8>
 8010bb8:	4623      	mov	r3, r4
 8010bba:	6864      	ldr	r4, [r4, #4]
 8010bbc:	e7ae      	b.n	8010b1c <_malloc_r+0x34>
 8010bbe:	463c      	mov	r4, r7
 8010bc0:	687f      	ldr	r7, [r7, #4]
 8010bc2:	e7b6      	b.n	8010b32 <_malloc_r+0x4a>
 8010bc4:	461a      	mov	r2, r3
 8010bc6:	685b      	ldr	r3, [r3, #4]
 8010bc8:	42a3      	cmp	r3, r4
 8010bca:	d1fb      	bne.n	8010bc4 <_malloc_r+0xdc>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	6053      	str	r3, [r2, #4]
 8010bd0:	e7de      	b.n	8010b90 <_malloc_r+0xa8>
 8010bd2:	230c      	movs	r3, #12
 8010bd4:	6033      	str	r3, [r6, #0]
 8010bd6:	4630      	mov	r0, r6
 8010bd8:	f000 f80c 	bl	8010bf4 <__malloc_unlock>
 8010bdc:	e794      	b.n	8010b08 <_malloc_r+0x20>
 8010bde:	6005      	str	r5, [r0, #0]
 8010be0:	e7d6      	b.n	8010b90 <_malloc_r+0xa8>
 8010be2:	bf00      	nop
 8010be4:	2000553c 	.word	0x2000553c

08010be8 <__malloc_lock>:
 8010be8:	4801      	ldr	r0, [pc, #4]	@ (8010bf0 <__malloc_lock+0x8>)
 8010bea:	f7ff b882 	b.w	800fcf2 <__retarget_lock_acquire_recursive>
 8010bee:	bf00      	nop
 8010bf0:	20005534 	.word	0x20005534

08010bf4 <__malloc_unlock>:
 8010bf4:	4801      	ldr	r0, [pc, #4]	@ (8010bfc <__malloc_unlock+0x8>)
 8010bf6:	f7ff b87d 	b.w	800fcf4 <__retarget_lock_release_recursive>
 8010bfa:	bf00      	nop
 8010bfc:	20005534 	.word	0x20005534

08010c00 <_Balloc>:
 8010c00:	b570      	push	{r4, r5, r6, lr}
 8010c02:	69c6      	ldr	r6, [r0, #28]
 8010c04:	4604      	mov	r4, r0
 8010c06:	460d      	mov	r5, r1
 8010c08:	b976      	cbnz	r6, 8010c28 <_Balloc+0x28>
 8010c0a:	2010      	movs	r0, #16
 8010c0c:	f7ff ff42 	bl	8010a94 <malloc>
 8010c10:	4602      	mov	r2, r0
 8010c12:	61e0      	str	r0, [r4, #28]
 8010c14:	b920      	cbnz	r0, 8010c20 <_Balloc+0x20>
 8010c16:	4b18      	ldr	r3, [pc, #96]	@ (8010c78 <_Balloc+0x78>)
 8010c18:	4818      	ldr	r0, [pc, #96]	@ (8010c7c <_Balloc+0x7c>)
 8010c1a:	216b      	movs	r1, #107	@ 0x6b
 8010c1c:	f7ff f87a 	bl	800fd14 <__assert_func>
 8010c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010c24:	6006      	str	r6, [r0, #0]
 8010c26:	60c6      	str	r6, [r0, #12]
 8010c28:	69e6      	ldr	r6, [r4, #28]
 8010c2a:	68f3      	ldr	r3, [r6, #12]
 8010c2c:	b183      	cbz	r3, 8010c50 <_Balloc+0x50>
 8010c2e:	69e3      	ldr	r3, [r4, #28]
 8010c30:	68db      	ldr	r3, [r3, #12]
 8010c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010c36:	b9b8      	cbnz	r0, 8010c68 <_Balloc+0x68>
 8010c38:	2101      	movs	r1, #1
 8010c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8010c3e:	1d72      	adds	r2, r6, #5
 8010c40:	0092      	lsls	r2, r2, #2
 8010c42:	4620      	mov	r0, r4
 8010c44:	f000 ff63 	bl	8011b0e <_calloc_r>
 8010c48:	b160      	cbz	r0, 8010c64 <_Balloc+0x64>
 8010c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010c4e:	e00e      	b.n	8010c6e <_Balloc+0x6e>
 8010c50:	2221      	movs	r2, #33	@ 0x21
 8010c52:	2104      	movs	r1, #4
 8010c54:	4620      	mov	r0, r4
 8010c56:	f000 ff5a 	bl	8011b0e <_calloc_r>
 8010c5a:	69e3      	ldr	r3, [r4, #28]
 8010c5c:	60f0      	str	r0, [r6, #12]
 8010c5e:	68db      	ldr	r3, [r3, #12]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d1e4      	bne.n	8010c2e <_Balloc+0x2e>
 8010c64:	2000      	movs	r0, #0
 8010c66:	bd70      	pop	{r4, r5, r6, pc}
 8010c68:	6802      	ldr	r2, [r0, #0]
 8010c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c74:	e7f7      	b.n	8010c66 <_Balloc+0x66>
 8010c76:	bf00      	nop
 8010c78:	080130d2 	.word	0x080130d2
 8010c7c:	08013152 	.word	0x08013152

08010c80 <_Bfree>:
 8010c80:	b570      	push	{r4, r5, r6, lr}
 8010c82:	69c6      	ldr	r6, [r0, #28]
 8010c84:	4605      	mov	r5, r0
 8010c86:	460c      	mov	r4, r1
 8010c88:	b976      	cbnz	r6, 8010ca8 <_Bfree+0x28>
 8010c8a:	2010      	movs	r0, #16
 8010c8c:	f7ff ff02 	bl	8010a94 <malloc>
 8010c90:	4602      	mov	r2, r0
 8010c92:	61e8      	str	r0, [r5, #28]
 8010c94:	b920      	cbnz	r0, 8010ca0 <_Bfree+0x20>
 8010c96:	4b09      	ldr	r3, [pc, #36]	@ (8010cbc <_Bfree+0x3c>)
 8010c98:	4809      	ldr	r0, [pc, #36]	@ (8010cc0 <_Bfree+0x40>)
 8010c9a:	218f      	movs	r1, #143	@ 0x8f
 8010c9c:	f7ff f83a 	bl	800fd14 <__assert_func>
 8010ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ca4:	6006      	str	r6, [r0, #0]
 8010ca6:	60c6      	str	r6, [r0, #12]
 8010ca8:	b13c      	cbz	r4, 8010cba <_Bfree+0x3a>
 8010caa:	69eb      	ldr	r3, [r5, #28]
 8010cac:	6862      	ldr	r2, [r4, #4]
 8010cae:	68db      	ldr	r3, [r3, #12]
 8010cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010cb4:	6021      	str	r1, [r4, #0]
 8010cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010cba:	bd70      	pop	{r4, r5, r6, pc}
 8010cbc:	080130d2 	.word	0x080130d2
 8010cc0:	08013152 	.word	0x08013152

08010cc4 <__multadd>:
 8010cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cc8:	690d      	ldr	r5, [r1, #16]
 8010cca:	4607      	mov	r7, r0
 8010ccc:	460c      	mov	r4, r1
 8010cce:	461e      	mov	r6, r3
 8010cd0:	f101 0c14 	add.w	ip, r1, #20
 8010cd4:	2000      	movs	r0, #0
 8010cd6:	f8dc 3000 	ldr.w	r3, [ip]
 8010cda:	b299      	uxth	r1, r3
 8010cdc:	fb02 6101 	mla	r1, r2, r1, r6
 8010ce0:	0c1e      	lsrs	r6, r3, #16
 8010ce2:	0c0b      	lsrs	r3, r1, #16
 8010ce4:	fb02 3306 	mla	r3, r2, r6, r3
 8010ce8:	b289      	uxth	r1, r1
 8010cea:	3001      	adds	r0, #1
 8010cec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010cf0:	4285      	cmp	r5, r0
 8010cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8010cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010cfa:	dcec      	bgt.n	8010cd6 <__multadd+0x12>
 8010cfc:	b30e      	cbz	r6, 8010d42 <__multadd+0x7e>
 8010cfe:	68a3      	ldr	r3, [r4, #8]
 8010d00:	42ab      	cmp	r3, r5
 8010d02:	dc19      	bgt.n	8010d38 <__multadd+0x74>
 8010d04:	6861      	ldr	r1, [r4, #4]
 8010d06:	4638      	mov	r0, r7
 8010d08:	3101      	adds	r1, #1
 8010d0a:	f7ff ff79 	bl	8010c00 <_Balloc>
 8010d0e:	4680      	mov	r8, r0
 8010d10:	b928      	cbnz	r0, 8010d1e <__multadd+0x5a>
 8010d12:	4602      	mov	r2, r0
 8010d14:	4b0c      	ldr	r3, [pc, #48]	@ (8010d48 <__multadd+0x84>)
 8010d16:	480d      	ldr	r0, [pc, #52]	@ (8010d4c <__multadd+0x88>)
 8010d18:	21ba      	movs	r1, #186	@ 0xba
 8010d1a:	f7fe fffb 	bl	800fd14 <__assert_func>
 8010d1e:	6922      	ldr	r2, [r4, #16]
 8010d20:	3202      	adds	r2, #2
 8010d22:	f104 010c 	add.w	r1, r4, #12
 8010d26:	0092      	lsls	r2, r2, #2
 8010d28:	300c      	adds	r0, #12
 8010d2a:	f7fe ffe4 	bl	800fcf6 <memcpy>
 8010d2e:	4621      	mov	r1, r4
 8010d30:	4638      	mov	r0, r7
 8010d32:	f7ff ffa5 	bl	8010c80 <_Bfree>
 8010d36:	4644      	mov	r4, r8
 8010d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010d3c:	3501      	adds	r5, #1
 8010d3e:	615e      	str	r6, [r3, #20]
 8010d40:	6125      	str	r5, [r4, #16]
 8010d42:	4620      	mov	r0, r4
 8010d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010d48:	08013141 	.word	0x08013141
 8010d4c:	08013152 	.word	0x08013152

08010d50 <__hi0bits>:
 8010d50:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010d54:	4603      	mov	r3, r0
 8010d56:	bf36      	itet	cc
 8010d58:	0403      	lslcc	r3, r0, #16
 8010d5a:	2000      	movcs	r0, #0
 8010d5c:	2010      	movcc	r0, #16
 8010d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010d62:	bf3c      	itt	cc
 8010d64:	021b      	lslcc	r3, r3, #8
 8010d66:	3008      	addcc	r0, #8
 8010d68:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d6c:	bf3c      	itt	cc
 8010d6e:	011b      	lslcc	r3, r3, #4
 8010d70:	3004      	addcc	r0, #4
 8010d72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010d76:	bf3c      	itt	cc
 8010d78:	009b      	lslcc	r3, r3, #2
 8010d7a:	3002      	addcc	r0, #2
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	db05      	blt.n	8010d8c <__hi0bits+0x3c>
 8010d80:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010d84:	f100 0001 	add.w	r0, r0, #1
 8010d88:	bf08      	it	eq
 8010d8a:	2020      	moveq	r0, #32
 8010d8c:	4770      	bx	lr

08010d8e <__lo0bits>:
 8010d8e:	6803      	ldr	r3, [r0, #0]
 8010d90:	4602      	mov	r2, r0
 8010d92:	f013 0007 	ands.w	r0, r3, #7
 8010d96:	d00b      	beq.n	8010db0 <__lo0bits+0x22>
 8010d98:	07d9      	lsls	r1, r3, #31
 8010d9a:	d421      	bmi.n	8010de0 <__lo0bits+0x52>
 8010d9c:	0798      	lsls	r0, r3, #30
 8010d9e:	bf49      	itett	mi
 8010da0:	085b      	lsrmi	r3, r3, #1
 8010da2:	089b      	lsrpl	r3, r3, #2
 8010da4:	2001      	movmi	r0, #1
 8010da6:	6013      	strmi	r3, [r2, #0]
 8010da8:	bf5c      	itt	pl
 8010daa:	6013      	strpl	r3, [r2, #0]
 8010dac:	2002      	movpl	r0, #2
 8010dae:	4770      	bx	lr
 8010db0:	b299      	uxth	r1, r3
 8010db2:	b909      	cbnz	r1, 8010db8 <__lo0bits+0x2a>
 8010db4:	0c1b      	lsrs	r3, r3, #16
 8010db6:	2010      	movs	r0, #16
 8010db8:	b2d9      	uxtb	r1, r3
 8010dba:	b909      	cbnz	r1, 8010dc0 <__lo0bits+0x32>
 8010dbc:	3008      	adds	r0, #8
 8010dbe:	0a1b      	lsrs	r3, r3, #8
 8010dc0:	0719      	lsls	r1, r3, #28
 8010dc2:	bf04      	itt	eq
 8010dc4:	091b      	lsreq	r3, r3, #4
 8010dc6:	3004      	addeq	r0, #4
 8010dc8:	0799      	lsls	r1, r3, #30
 8010dca:	bf04      	itt	eq
 8010dcc:	089b      	lsreq	r3, r3, #2
 8010dce:	3002      	addeq	r0, #2
 8010dd0:	07d9      	lsls	r1, r3, #31
 8010dd2:	d403      	bmi.n	8010ddc <__lo0bits+0x4e>
 8010dd4:	085b      	lsrs	r3, r3, #1
 8010dd6:	f100 0001 	add.w	r0, r0, #1
 8010dda:	d003      	beq.n	8010de4 <__lo0bits+0x56>
 8010ddc:	6013      	str	r3, [r2, #0]
 8010dde:	4770      	bx	lr
 8010de0:	2000      	movs	r0, #0
 8010de2:	4770      	bx	lr
 8010de4:	2020      	movs	r0, #32
 8010de6:	4770      	bx	lr

08010de8 <__i2b>:
 8010de8:	b510      	push	{r4, lr}
 8010dea:	460c      	mov	r4, r1
 8010dec:	2101      	movs	r1, #1
 8010dee:	f7ff ff07 	bl	8010c00 <_Balloc>
 8010df2:	4602      	mov	r2, r0
 8010df4:	b928      	cbnz	r0, 8010e02 <__i2b+0x1a>
 8010df6:	4b05      	ldr	r3, [pc, #20]	@ (8010e0c <__i2b+0x24>)
 8010df8:	4805      	ldr	r0, [pc, #20]	@ (8010e10 <__i2b+0x28>)
 8010dfa:	f240 1145 	movw	r1, #325	@ 0x145
 8010dfe:	f7fe ff89 	bl	800fd14 <__assert_func>
 8010e02:	2301      	movs	r3, #1
 8010e04:	6144      	str	r4, [r0, #20]
 8010e06:	6103      	str	r3, [r0, #16]
 8010e08:	bd10      	pop	{r4, pc}
 8010e0a:	bf00      	nop
 8010e0c:	08013141 	.word	0x08013141
 8010e10:	08013152 	.word	0x08013152

08010e14 <__multiply>:
 8010e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e18:	4617      	mov	r7, r2
 8010e1a:	690a      	ldr	r2, [r1, #16]
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	429a      	cmp	r2, r3
 8010e20:	bfa8      	it	ge
 8010e22:	463b      	movge	r3, r7
 8010e24:	4689      	mov	r9, r1
 8010e26:	bfa4      	itt	ge
 8010e28:	460f      	movge	r7, r1
 8010e2a:	4699      	movge	r9, r3
 8010e2c:	693d      	ldr	r5, [r7, #16]
 8010e2e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010e32:	68bb      	ldr	r3, [r7, #8]
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	eb05 060a 	add.w	r6, r5, sl
 8010e3a:	42b3      	cmp	r3, r6
 8010e3c:	b085      	sub	sp, #20
 8010e3e:	bfb8      	it	lt
 8010e40:	3101      	addlt	r1, #1
 8010e42:	f7ff fedd 	bl	8010c00 <_Balloc>
 8010e46:	b930      	cbnz	r0, 8010e56 <__multiply+0x42>
 8010e48:	4602      	mov	r2, r0
 8010e4a:	4b41      	ldr	r3, [pc, #260]	@ (8010f50 <__multiply+0x13c>)
 8010e4c:	4841      	ldr	r0, [pc, #260]	@ (8010f54 <__multiply+0x140>)
 8010e4e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8010e52:	f7fe ff5f 	bl	800fd14 <__assert_func>
 8010e56:	f100 0414 	add.w	r4, r0, #20
 8010e5a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8010e5e:	4623      	mov	r3, r4
 8010e60:	2200      	movs	r2, #0
 8010e62:	4573      	cmp	r3, lr
 8010e64:	d320      	bcc.n	8010ea8 <__multiply+0x94>
 8010e66:	f107 0814 	add.w	r8, r7, #20
 8010e6a:	f109 0114 	add.w	r1, r9, #20
 8010e6e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8010e72:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8010e76:	9302      	str	r3, [sp, #8]
 8010e78:	1beb      	subs	r3, r5, r7
 8010e7a:	3b15      	subs	r3, #21
 8010e7c:	f023 0303 	bic.w	r3, r3, #3
 8010e80:	3304      	adds	r3, #4
 8010e82:	3715      	adds	r7, #21
 8010e84:	42bd      	cmp	r5, r7
 8010e86:	bf38      	it	cc
 8010e88:	2304      	movcc	r3, #4
 8010e8a:	9301      	str	r3, [sp, #4]
 8010e8c:	9b02      	ldr	r3, [sp, #8]
 8010e8e:	9103      	str	r1, [sp, #12]
 8010e90:	428b      	cmp	r3, r1
 8010e92:	d80c      	bhi.n	8010eae <__multiply+0x9a>
 8010e94:	2e00      	cmp	r6, #0
 8010e96:	dd03      	ble.n	8010ea0 <__multiply+0x8c>
 8010e98:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d055      	beq.n	8010f4c <__multiply+0x138>
 8010ea0:	6106      	str	r6, [r0, #16]
 8010ea2:	b005      	add	sp, #20
 8010ea4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea8:	f843 2b04 	str.w	r2, [r3], #4
 8010eac:	e7d9      	b.n	8010e62 <__multiply+0x4e>
 8010eae:	f8b1 a000 	ldrh.w	sl, [r1]
 8010eb2:	f1ba 0f00 	cmp.w	sl, #0
 8010eb6:	d01f      	beq.n	8010ef8 <__multiply+0xe4>
 8010eb8:	46c4      	mov	ip, r8
 8010eba:	46a1      	mov	r9, r4
 8010ebc:	2700      	movs	r7, #0
 8010ebe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010ec2:	f8d9 3000 	ldr.w	r3, [r9]
 8010ec6:	fa1f fb82 	uxth.w	fp, r2
 8010eca:	b29b      	uxth	r3, r3
 8010ecc:	fb0a 330b 	mla	r3, sl, fp, r3
 8010ed0:	443b      	add	r3, r7
 8010ed2:	f8d9 7000 	ldr.w	r7, [r9]
 8010ed6:	0c12      	lsrs	r2, r2, #16
 8010ed8:	0c3f      	lsrs	r7, r7, #16
 8010eda:	fb0a 7202 	mla	r2, sl, r2, r7
 8010ede:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010ee2:	b29b      	uxth	r3, r3
 8010ee4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010ee8:	4565      	cmp	r5, ip
 8010eea:	f849 3b04 	str.w	r3, [r9], #4
 8010eee:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010ef2:	d8e4      	bhi.n	8010ebe <__multiply+0xaa>
 8010ef4:	9b01      	ldr	r3, [sp, #4]
 8010ef6:	50e7      	str	r7, [r4, r3]
 8010ef8:	9b03      	ldr	r3, [sp, #12]
 8010efa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010efe:	3104      	adds	r1, #4
 8010f00:	f1b9 0f00 	cmp.w	r9, #0
 8010f04:	d020      	beq.n	8010f48 <__multiply+0x134>
 8010f06:	6823      	ldr	r3, [r4, #0]
 8010f08:	4647      	mov	r7, r8
 8010f0a:	46a4      	mov	ip, r4
 8010f0c:	f04f 0a00 	mov.w	sl, #0
 8010f10:	f8b7 b000 	ldrh.w	fp, [r7]
 8010f14:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010f18:	fb09 220b 	mla	r2, r9, fp, r2
 8010f1c:	4452      	add	r2, sl
 8010f1e:	b29b      	uxth	r3, r3
 8010f20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f24:	f84c 3b04 	str.w	r3, [ip], #4
 8010f28:	f857 3b04 	ldr.w	r3, [r7], #4
 8010f2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f30:	f8bc 3000 	ldrh.w	r3, [ip]
 8010f34:	fb09 330a 	mla	r3, r9, sl, r3
 8010f38:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010f3c:	42bd      	cmp	r5, r7
 8010f3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010f42:	d8e5      	bhi.n	8010f10 <__multiply+0xfc>
 8010f44:	9a01      	ldr	r2, [sp, #4]
 8010f46:	50a3      	str	r3, [r4, r2]
 8010f48:	3404      	adds	r4, #4
 8010f4a:	e79f      	b.n	8010e8c <__multiply+0x78>
 8010f4c:	3e01      	subs	r6, #1
 8010f4e:	e7a1      	b.n	8010e94 <__multiply+0x80>
 8010f50:	08013141 	.word	0x08013141
 8010f54:	08013152 	.word	0x08013152

08010f58 <__pow5mult>:
 8010f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f5c:	4615      	mov	r5, r2
 8010f5e:	f012 0203 	ands.w	r2, r2, #3
 8010f62:	4607      	mov	r7, r0
 8010f64:	460e      	mov	r6, r1
 8010f66:	d007      	beq.n	8010f78 <__pow5mult+0x20>
 8010f68:	4c25      	ldr	r4, [pc, #148]	@ (8011000 <__pow5mult+0xa8>)
 8010f6a:	3a01      	subs	r2, #1
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f72:	f7ff fea7 	bl	8010cc4 <__multadd>
 8010f76:	4606      	mov	r6, r0
 8010f78:	10ad      	asrs	r5, r5, #2
 8010f7a:	d03d      	beq.n	8010ff8 <__pow5mult+0xa0>
 8010f7c:	69fc      	ldr	r4, [r7, #28]
 8010f7e:	b97c      	cbnz	r4, 8010fa0 <__pow5mult+0x48>
 8010f80:	2010      	movs	r0, #16
 8010f82:	f7ff fd87 	bl	8010a94 <malloc>
 8010f86:	4602      	mov	r2, r0
 8010f88:	61f8      	str	r0, [r7, #28]
 8010f8a:	b928      	cbnz	r0, 8010f98 <__pow5mult+0x40>
 8010f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8011004 <__pow5mult+0xac>)
 8010f8e:	481e      	ldr	r0, [pc, #120]	@ (8011008 <__pow5mult+0xb0>)
 8010f90:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010f94:	f7fe febe 	bl	800fd14 <__assert_func>
 8010f98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f9c:	6004      	str	r4, [r0, #0]
 8010f9e:	60c4      	str	r4, [r0, #12]
 8010fa0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010fa4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010fa8:	b94c      	cbnz	r4, 8010fbe <__pow5mult+0x66>
 8010faa:	f240 2171 	movw	r1, #625	@ 0x271
 8010fae:	4638      	mov	r0, r7
 8010fb0:	f7ff ff1a 	bl	8010de8 <__i2b>
 8010fb4:	2300      	movs	r3, #0
 8010fb6:	f8c8 0008 	str.w	r0, [r8, #8]
 8010fba:	4604      	mov	r4, r0
 8010fbc:	6003      	str	r3, [r0, #0]
 8010fbe:	f04f 0900 	mov.w	r9, #0
 8010fc2:	07eb      	lsls	r3, r5, #31
 8010fc4:	d50a      	bpl.n	8010fdc <__pow5mult+0x84>
 8010fc6:	4631      	mov	r1, r6
 8010fc8:	4622      	mov	r2, r4
 8010fca:	4638      	mov	r0, r7
 8010fcc:	f7ff ff22 	bl	8010e14 <__multiply>
 8010fd0:	4631      	mov	r1, r6
 8010fd2:	4680      	mov	r8, r0
 8010fd4:	4638      	mov	r0, r7
 8010fd6:	f7ff fe53 	bl	8010c80 <_Bfree>
 8010fda:	4646      	mov	r6, r8
 8010fdc:	106d      	asrs	r5, r5, #1
 8010fde:	d00b      	beq.n	8010ff8 <__pow5mult+0xa0>
 8010fe0:	6820      	ldr	r0, [r4, #0]
 8010fe2:	b938      	cbnz	r0, 8010ff4 <__pow5mult+0x9c>
 8010fe4:	4622      	mov	r2, r4
 8010fe6:	4621      	mov	r1, r4
 8010fe8:	4638      	mov	r0, r7
 8010fea:	f7ff ff13 	bl	8010e14 <__multiply>
 8010fee:	6020      	str	r0, [r4, #0]
 8010ff0:	f8c0 9000 	str.w	r9, [r0]
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	e7e4      	b.n	8010fc2 <__pow5mult+0x6a>
 8010ff8:	4630      	mov	r0, r6
 8010ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010ffe:	bf00      	nop
 8011000:	080131c8 	.word	0x080131c8
 8011004:	080130d2 	.word	0x080130d2
 8011008:	08013152 	.word	0x08013152

0801100c <__lshift>:
 801100c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011010:	460c      	mov	r4, r1
 8011012:	6849      	ldr	r1, [r1, #4]
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801101a:	68a3      	ldr	r3, [r4, #8]
 801101c:	4607      	mov	r7, r0
 801101e:	4691      	mov	r9, r2
 8011020:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011024:	f108 0601 	add.w	r6, r8, #1
 8011028:	42b3      	cmp	r3, r6
 801102a:	db0b      	blt.n	8011044 <__lshift+0x38>
 801102c:	4638      	mov	r0, r7
 801102e:	f7ff fde7 	bl	8010c00 <_Balloc>
 8011032:	4605      	mov	r5, r0
 8011034:	b948      	cbnz	r0, 801104a <__lshift+0x3e>
 8011036:	4602      	mov	r2, r0
 8011038:	4b28      	ldr	r3, [pc, #160]	@ (80110dc <__lshift+0xd0>)
 801103a:	4829      	ldr	r0, [pc, #164]	@ (80110e0 <__lshift+0xd4>)
 801103c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8011040:	f7fe fe68 	bl	800fd14 <__assert_func>
 8011044:	3101      	adds	r1, #1
 8011046:	005b      	lsls	r3, r3, #1
 8011048:	e7ee      	b.n	8011028 <__lshift+0x1c>
 801104a:	2300      	movs	r3, #0
 801104c:	f100 0114 	add.w	r1, r0, #20
 8011050:	f100 0210 	add.w	r2, r0, #16
 8011054:	4618      	mov	r0, r3
 8011056:	4553      	cmp	r3, sl
 8011058:	db33      	blt.n	80110c2 <__lshift+0xb6>
 801105a:	6920      	ldr	r0, [r4, #16]
 801105c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011060:	f104 0314 	add.w	r3, r4, #20
 8011064:	f019 091f 	ands.w	r9, r9, #31
 8011068:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801106c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011070:	d02b      	beq.n	80110ca <__lshift+0xbe>
 8011072:	f1c9 0e20 	rsb	lr, r9, #32
 8011076:	468a      	mov	sl, r1
 8011078:	2200      	movs	r2, #0
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	fa00 f009 	lsl.w	r0, r0, r9
 8011080:	4310      	orrs	r0, r2
 8011082:	f84a 0b04 	str.w	r0, [sl], #4
 8011086:	f853 2b04 	ldr.w	r2, [r3], #4
 801108a:	459c      	cmp	ip, r3
 801108c:	fa22 f20e 	lsr.w	r2, r2, lr
 8011090:	d8f3      	bhi.n	801107a <__lshift+0x6e>
 8011092:	ebac 0304 	sub.w	r3, ip, r4
 8011096:	3b15      	subs	r3, #21
 8011098:	f023 0303 	bic.w	r3, r3, #3
 801109c:	3304      	adds	r3, #4
 801109e:	f104 0015 	add.w	r0, r4, #21
 80110a2:	4560      	cmp	r0, ip
 80110a4:	bf88      	it	hi
 80110a6:	2304      	movhi	r3, #4
 80110a8:	50ca      	str	r2, [r1, r3]
 80110aa:	b10a      	cbz	r2, 80110b0 <__lshift+0xa4>
 80110ac:	f108 0602 	add.w	r6, r8, #2
 80110b0:	3e01      	subs	r6, #1
 80110b2:	4638      	mov	r0, r7
 80110b4:	612e      	str	r6, [r5, #16]
 80110b6:	4621      	mov	r1, r4
 80110b8:	f7ff fde2 	bl	8010c80 <_Bfree>
 80110bc:	4628      	mov	r0, r5
 80110be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80110c6:	3301      	adds	r3, #1
 80110c8:	e7c5      	b.n	8011056 <__lshift+0x4a>
 80110ca:	3904      	subs	r1, #4
 80110cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80110d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80110d4:	459c      	cmp	ip, r3
 80110d6:	d8f9      	bhi.n	80110cc <__lshift+0xc0>
 80110d8:	e7ea      	b.n	80110b0 <__lshift+0xa4>
 80110da:	bf00      	nop
 80110dc:	08013141 	.word	0x08013141
 80110e0:	08013152 	.word	0x08013152

080110e4 <__mcmp>:
 80110e4:	690a      	ldr	r2, [r1, #16]
 80110e6:	4603      	mov	r3, r0
 80110e8:	6900      	ldr	r0, [r0, #16]
 80110ea:	1a80      	subs	r0, r0, r2
 80110ec:	b530      	push	{r4, r5, lr}
 80110ee:	d10e      	bne.n	801110e <__mcmp+0x2a>
 80110f0:	3314      	adds	r3, #20
 80110f2:	3114      	adds	r1, #20
 80110f4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80110f8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80110fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011100:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011104:	4295      	cmp	r5, r2
 8011106:	d003      	beq.n	8011110 <__mcmp+0x2c>
 8011108:	d205      	bcs.n	8011116 <__mcmp+0x32>
 801110a:	f04f 30ff 	mov.w	r0, #4294967295
 801110e:	bd30      	pop	{r4, r5, pc}
 8011110:	42a3      	cmp	r3, r4
 8011112:	d3f3      	bcc.n	80110fc <__mcmp+0x18>
 8011114:	e7fb      	b.n	801110e <__mcmp+0x2a>
 8011116:	2001      	movs	r0, #1
 8011118:	e7f9      	b.n	801110e <__mcmp+0x2a>
	...

0801111c <__mdiff>:
 801111c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011120:	4689      	mov	r9, r1
 8011122:	4606      	mov	r6, r0
 8011124:	4611      	mov	r1, r2
 8011126:	4648      	mov	r0, r9
 8011128:	4614      	mov	r4, r2
 801112a:	f7ff ffdb 	bl	80110e4 <__mcmp>
 801112e:	1e05      	subs	r5, r0, #0
 8011130:	d112      	bne.n	8011158 <__mdiff+0x3c>
 8011132:	4629      	mov	r1, r5
 8011134:	4630      	mov	r0, r6
 8011136:	f7ff fd63 	bl	8010c00 <_Balloc>
 801113a:	4602      	mov	r2, r0
 801113c:	b928      	cbnz	r0, 801114a <__mdiff+0x2e>
 801113e:	4b3f      	ldr	r3, [pc, #252]	@ (801123c <__mdiff+0x120>)
 8011140:	f240 2137 	movw	r1, #567	@ 0x237
 8011144:	483e      	ldr	r0, [pc, #248]	@ (8011240 <__mdiff+0x124>)
 8011146:	f7fe fde5 	bl	800fd14 <__assert_func>
 801114a:	2301      	movs	r3, #1
 801114c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011150:	4610      	mov	r0, r2
 8011152:	b003      	add	sp, #12
 8011154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011158:	bfbc      	itt	lt
 801115a:	464b      	movlt	r3, r9
 801115c:	46a1      	movlt	r9, r4
 801115e:	4630      	mov	r0, r6
 8011160:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011164:	bfba      	itte	lt
 8011166:	461c      	movlt	r4, r3
 8011168:	2501      	movlt	r5, #1
 801116a:	2500      	movge	r5, #0
 801116c:	f7ff fd48 	bl	8010c00 <_Balloc>
 8011170:	4602      	mov	r2, r0
 8011172:	b918      	cbnz	r0, 801117c <__mdiff+0x60>
 8011174:	4b31      	ldr	r3, [pc, #196]	@ (801123c <__mdiff+0x120>)
 8011176:	f240 2145 	movw	r1, #581	@ 0x245
 801117a:	e7e3      	b.n	8011144 <__mdiff+0x28>
 801117c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011180:	6926      	ldr	r6, [r4, #16]
 8011182:	60c5      	str	r5, [r0, #12]
 8011184:	f109 0310 	add.w	r3, r9, #16
 8011188:	f109 0514 	add.w	r5, r9, #20
 801118c:	f104 0e14 	add.w	lr, r4, #20
 8011190:	f100 0b14 	add.w	fp, r0, #20
 8011194:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011198:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801119c:	9301      	str	r3, [sp, #4]
 801119e:	46d9      	mov	r9, fp
 80111a0:	f04f 0c00 	mov.w	ip, #0
 80111a4:	9b01      	ldr	r3, [sp, #4]
 80111a6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80111aa:	f853 af04 	ldr.w	sl, [r3, #4]!
 80111ae:	9301      	str	r3, [sp, #4]
 80111b0:	fa1f f38a 	uxth.w	r3, sl
 80111b4:	4619      	mov	r1, r3
 80111b6:	b283      	uxth	r3, r0
 80111b8:	1acb      	subs	r3, r1, r3
 80111ba:	0c00      	lsrs	r0, r0, #16
 80111bc:	4463      	add	r3, ip
 80111be:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80111c2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80111c6:	b29b      	uxth	r3, r3
 80111c8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80111cc:	4576      	cmp	r6, lr
 80111ce:	f849 3b04 	str.w	r3, [r9], #4
 80111d2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80111d6:	d8e5      	bhi.n	80111a4 <__mdiff+0x88>
 80111d8:	1b33      	subs	r3, r6, r4
 80111da:	3b15      	subs	r3, #21
 80111dc:	f023 0303 	bic.w	r3, r3, #3
 80111e0:	3415      	adds	r4, #21
 80111e2:	3304      	adds	r3, #4
 80111e4:	42a6      	cmp	r6, r4
 80111e6:	bf38      	it	cc
 80111e8:	2304      	movcc	r3, #4
 80111ea:	441d      	add	r5, r3
 80111ec:	445b      	add	r3, fp
 80111ee:	461e      	mov	r6, r3
 80111f0:	462c      	mov	r4, r5
 80111f2:	4544      	cmp	r4, r8
 80111f4:	d30e      	bcc.n	8011214 <__mdiff+0xf8>
 80111f6:	f108 0103 	add.w	r1, r8, #3
 80111fa:	1b49      	subs	r1, r1, r5
 80111fc:	f021 0103 	bic.w	r1, r1, #3
 8011200:	3d03      	subs	r5, #3
 8011202:	45a8      	cmp	r8, r5
 8011204:	bf38      	it	cc
 8011206:	2100      	movcc	r1, #0
 8011208:	440b      	add	r3, r1
 801120a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801120e:	b191      	cbz	r1, 8011236 <__mdiff+0x11a>
 8011210:	6117      	str	r7, [r2, #16]
 8011212:	e79d      	b.n	8011150 <__mdiff+0x34>
 8011214:	f854 1b04 	ldr.w	r1, [r4], #4
 8011218:	46e6      	mov	lr, ip
 801121a:	0c08      	lsrs	r0, r1, #16
 801121c:	fa1c fc81 	uxtah	ip, ip, r1
 8011220:	4471      	add	r1, lr
 8011222:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011226:	b289      	uxth	r1, r1
 8011228:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801122c:	f846 1b04 	str.w	r1, [r6], #4
 8011230:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011234:	e7dd      	b.n	80111f2 <__mdiff+0xd6>
 8011236:	3f01      	subs	r7, #1
 8011238:	e7e7      	b.n	801120a <__mdiff+0xee>
 801123a:	bf00      	nop
 801123c:	08013141 	.word	0x08013141
 8011240:	08013152 	.word	0x08013152

08011244 <__d2b>:
 8011244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011248:	460f      	mov	r7, r1
 801124a:	2101      	movs	r1, #1
 801124c:	ec59 8b10 	vmov	r8, r9, d0
 8011250:	4616      	mov	r6, r2
 8011252:	f7ff fcd5 	bl	8010c00 <_Balloc>
 8011256:	4604      	mov	r4, r0
 8011258:	b930      	cbnz	r0, 8011268 <__d2b+0x24>
 801125a:	4602      	mov	r2, r0
 801125c:	4b23      	ldr	r3, [pc, #140]	@ (80112ec <__d2b+0xa8>)
 801125e:	4824      	ldr	r0, [pc, #144]	@ (80112f0 <__d2b+0xac>)
 8011260:	f240 310f 	movw	r1, #783	@ 0x30f
 8011264:	f7fe fd56 	bl	800fd14 <__assert_func>
 8011268:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801126c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011270:	b10d      	cbz	r5, 8011276 <__d2b+0x32>
 8011272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011276:	9301      	str	r3, [sp, #4]
 8011278:	f1b8 0300 	subs.w	r3, r8, #0
 801127c:	d023      	beq.n	80112c6 <__d2b+0x82>
 801127e:	4668      	mov	r0, sp
 8011280:	9300      	str	r3, [sp, #0]
 8011282:	f7ff fd84 	bl	8010d8e <__lo0bits>
 8011286:	e9dd 1200 	ldrd	r1, r2, [sp]
 801128a:	b1d0      	cbz	r0, 80112c2 <__d2b+0x7e>
 801128c:	f1c0 0320 	rsb	r3, r0, #32
 8011290:	fa02 f303 	lsl.w	r3, r2, r3
 8011294:	430b      	orrs	r3, r1
 8011296:	40c2      	lsrs	r2, r0
 8011298:	6163      	str	r3, [r4, #20]
 801129a:	9201      	str	r2, [sp, #4]
 801129c:	9b01      	ldr	r3, [sp, #4]
 801129e:	61a3      	str	r3, [r4, #24]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	bf0c      	ite	eq
 80112a4:	2201      	moveq	r2, #1
 80112a6:	2202      	movne	r2, #2
 80112a8:	6122      	str	r2, [r4, #16]
 80112aa:	b1a5      	cbz	r5, 80112d6 <__d2b+0x92>
 80112ac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80112b0:	4405      	add	r5, r0
 80112b2:	603d      	str	r5, [r7, #0]
 80112b4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80112b8:	6030      	str	r0, [r6, #0]
 80112ba:	4620      	mov	r0, r4
 80112bc:	b003      	add	sp, #12
 80112be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112c2:	6161      	str	r1, [r4, #20]
 80112c4:	e7ea      	b.n	801129c <__d2b+0x58>
 80112c6:	a801      	add	r0, sp, #4
 80112c8:	f7ff fd61 	bl	8010d8e <__lo0bits>
 80112cc:	9b01      	ldr	r3, [sp, #4]
 80112ce:	6163      	str	r3, [r4, #20]
 80112d0:	3020      	adds	r0, #32
 80112d2:	2201      	movs	r2, #1
 80112d4:	e7e8      	b.n	80112a8 <__d2b+0x64>
 80112d6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80112da:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80112de:	6038      	str	r0, [r7, #0]
 80112e0:	6918      	ldr	r0, [r3, #16]
 80112e2:	f7ff fd35 	bl	8010d50 <__hi0bits>
 80112e6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80112ea:	e7e5      	b.n	80112b8 <__d2b+0x74>
 80112ec:	08013141 	.word	0x08013141
 80112f0:	08013152 	.word	0x08013152

080112f4 <__ssputs_r>:
 80112f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112f8:	688e      	ldr	r6, [r1, #8]
 80112fa:	461f      	mov	r7, r3
 80112fc:	42be      	cmp	r6, r7
 80112fe:	680b      	ldr	r3, [r1, #0]
 8011300:	4682      	mov	sl, r0
 8011302:	460c      	mov	r4, r1
 8011304:	4690      	mov	r8, r2
 8011306:	d82d      	bhi.n	8011364 <__ssputs_r+0x70>
 8011308:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801130c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8011310:	d026      	beq.n	8011360 <__ssputs_r+0x6c>
 8011312:	6965      	ldr	r5, [r4, #20]
 8011314:	6909      	ldr	r1, [r1, #16]
 8011316:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801131a:	eba3 0901 	sub.w	r9, r3, r1
 801131e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011322:	1c7b      	adds	r3, r7, #1
 8011324:	444b      	add	r3, r9
 8011326:	106d      	asrs	r5, r5, #1
 8011328:	429d      	cmp	r5, r3
 801132a:	bf38      	it	cc
 801132c:	461d      	movcc	r5, r3
 801132e:	0553      	lsls	r3, r2, #21
 8011330:	d527      	bpl.n	8011382 <__ssputs_r+0x8e>
 8011332:	4629      	mov	r1, r5
 8011334:	f7ff fbd8 	bl	8010ae8 <_malloc_r>
 8011338:	4606      	mov	r6, r0
 801133a:	b360      	cbz	r0, 8011396 <__ssputs_r+0xa2>
 801133c:	6921      	ldr	r1, [r4, #16]
 801133e:	464a      	mov	r2, r9
 8011340:	f7fe fcd9 	bl	800fcf6 <memcpy>
 8011344:	89a3      	ldrh	r3, [r4, #12]
 8011346:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801134a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801134e:	81a3      	strh	r3, [r4, #12]
 8011350:	6126      	str	r6, [r4, #16]
 8011352:	6165      	str	r5, [r4, #20]
 8011354:	444e      	add	r6, r9
 8011356:	eba5 0509 	sub.w	r5, r5, r9
 801135a:	6026      	str	r6, [r4, #0]
 801135c:	60a5      	str	r5, [r4, #8]
 801135e:	463e      	mov	r6, r7
 8011360:	42be      	cmp	r6, r7
 8011362:	d900      	bls.n	8011366 <__ssputs_r+0x72>
 8011364:	463e      	mov	r6, r7
 8011366:	6820      	ldr	r0, [r4, #0]
 8011368:	4632      	mov	r2, r6
 801136a:	4641      	mov	r1, r8
 801136c:	f000 fb7c 	bl	8011a68 <memmove>
 8011370:	68a3      	ldr	r3, [r4, #8]
 8011372:	1b9b      	subs	r3, r3, r6
 8011374:	60a3      	str	r3, [r4, #8]
 8011376:	6823      	ldr	r3, [r4, #0]
 8011378:	4433      	add	r3, r6
 801137a:	6023      	str	r3, [r4, #0]
 801137c:	2000      	movs	r0, #0
 801137e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011382:	462a      	mov	r2, r5
 8011384:	f000 fbe9 	bl	8011b5a <_realloc_r>
 8011388:	4606      	mov	r6, r0
 801138a:	2800      	cmp	r0, #0
 801138c:	d1e0      	bne.n	8011350 <__ssputs_r+0x5c>
 801138e:	6921      	ldr	r1, [r4, #16]
 8011390:	4650      	mov	r0, sl
 8011392:	f7ff fb35 	bl	8010a00 <_free_r>
 8011396:	230c      	movs	r3, #12
 8011398:	f8ca 3000 	str.w	r3, [sl]
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113a2:	81a3      	strh	r3, [r4, #12]
 80113a4:	f04f 30ff 	mov.w	r0, #4294967295
 80113a8:	e7e9      	b.n	801137e <__ssputs_r+0x8a>
	...

080113ac <_svfiprintf_r>:
 80113ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b0:	4698      	mov	r8, r3
 80113b2:	898b      	ldrh	r3, [r1, #12]
 80113b4:	061b      	lsls	r3, r3, #24
 80113b6:	b09d      	sub	sp, #116	@ 0x74
 80113b8:	4607      	mov	r7, r0
 80113ba:	460d      	mov	r5, r1
 80113bc:	4614      	mov	r4, r2
 80113be:	d510      	bpl.n	80113e2 <_svfiprintf_r+0x36>
 80113c0:	690b      	ldr	r3, [r1, #16]
 80113c2:	b973      	cbnz	r3, 80113e2 <_svfiprintf_r+0x36>
 80113c4:	2140      	movs	r1, #64	@ 0x40
 80113c6:	f7ff fb8f 	bl	8010ae8 <_malloc_r>
 80113ca:	6028      	str	r0, [r5, #0]
 80113cc:	6128      	str	r0, [r5, #16]
 80113ce:	b930      	cbnz	r0, 80113de <_svfiprintf_r+0x32>
 80113d0:	230c      	movs	r3, #12
 80113d2:	603b      	str	r3, [r7, #0]
 80113d4:	f04f 30ff 	mov.w	r0, #4294967295
 80113d8:	b01d      	add	sp, #116	@ 0x74
 80113da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80113de:	2340      	movs	r3, #64	@ 0x40
 80113e0:	616b      	str	r3, [r5, #20]
 80113e2:	2300      	movs	r3, #0
 80113e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80113e6:	2320      	movs	r3, #32
 80113e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80113ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80113f0:	2330      	movs	r3, #48	@ 0x30
 80113f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8011590 <_svfiprintf_r+0x1e4>
 80113f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80113fa:	f04f 0901 	mov.w	r9, #1
 80113fe:	4623      	mov	r3, r4
 8011400:	469a      	mov	sl, r3
 8011402:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011406:	b10a      	cbz	r2, 801140c <_svfiprintf_r+0x60>
 8011408:	2a25      	cmp	r2, #37	@ 0x25
 801140a:	d1f9      	bne.n	8011400 <_svfiprintf_r+0x54>
 801140c:	ebba 0b04 	subs.w	fp, sl, r4
 8011410:	d00b      	beq.n	801142a <_svfiprintf_r+0x7e>
 8011412:	465b      	mov	r3, fp
 8011414:	4622      	mov	r2, r4
 8011416:	4629      	mov	r1, r5
 8011418:	4638      	mov	r0, r7
 801141a:	f7ff ff6b 	bl	80112f4 <__ssputs_r>
 801141e:	3001      	adds	r0, #1
 8011420:	f000 80a7 	beq.w	8011572 <_svfiprintf_r+0x1c6>
 8011424:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011426:	445a      	add	r2, fp
 8011428:	9209      	str	r2, [sp, #36]	@ 0x24
 801142a:	f89a 3000 	ldrb.w	r3, [sl]
 801142e:	2b00      	cmp	r3, #0
 8011430:	f000 809f 	beq.w	8011572 <_svfiprintf_r+0x1c6>
 8011434:	2300      	movs	r3, #0
 8011436:	f04f 32ff 	mov.w	r2, #4294967295
 801143a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801143e:	f10a 0a01 	add.w	sl, sl, #1
 8011442:	9304      	str	r3, [sp, #16]
 8011444:	9307      	str	r3, [sp, #28]
 8011446:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801144a:	931a      	str	r3, [sp, #104]	@ 0x68
 801144c:	4654      	mov	r4, sl
 801144e:	2205      	movs	r2, #5
 8011450:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011454:	484e      	ldr	r0, [pc, #312]	@ (8011590 <_svfiprintf_r+0x1e4>)
 8011456:	f7ee fec3 	bl	80001e0 <memchr>
 801145a:	9a04      	ldr	r2, [sp, #16]
 801145c:	b9d8      	cbnz	r0, 8011496 <_svfiprintf_r+0xea>
 801145e:	06d0      	lsls	r0, r2, #27
 8011460:	bf44      	itt	mi
 8011462:	2320      	movmi	r3, #32
 8011464:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011468:	0711      	lsls	r1, r2, #28
 801146a:	bf44      	itt	mi
 801146c:	232b      	movmi	r3, #43	@ 0x2b
 801146e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011472:	f89a 3000 	ldrb.w	r3, [sl]
 8011476:	2b2a      	cmp	r3, #42	@ 0x2a
 8011478:	d015      	beq.n	80114a6 <_svfiprintf_r+0xfa>
 801147a:	9a07      	ldr	r2, [sp, #28]
 801147c:	4654      	mov	r4, sl
 801147e:	2000      	movs	r0, #0
 8011480:	f04f 0c0a 	mov.w	ip, #10
 8011484:	4621      	mov	r1, r4
 8011486:	f811 3b01 	ldrb.w	r3, [r1], #1
 801148a:	3b30      	subs	r3, #48	@ 0x30
 801148c:	2b09      	cmp	r3, #9
 801148e:	d94b      	bls.n	8011528 <_svfiprintf_r+0x17c>
 8011490:	b1b0      	cbz	r0, 80114c0 <_svfiprintf_r+0x114>
 8011492:	9207      	str	r2, [sp, #28]
 8011494:	e014      	b.n	80114c0 <_svfiprintf_r+0x114>
 8011496:	eba0 0308 	sub.w	r3, r0, r8
 801149a:	fa09 f303 	lsl.w	r3, r9, r3
 801149e:	4313      	orrs	r3, r2
 80114a0:	9304      	str	r3, [sp, #16]
 80114a2:	46a2      	mov	sl, r4
 80114a4:	e7d2      	b.n	801144c <_svfiprintf_r+0xa0>
 80114a6:	9b03      	ldr	r3, [sp, #12]
 80114a8:	1d19      	adds	r1, r3, #4
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	9103      	str	r1, [sp, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	bfbb      	ittet	lt
 80114b2:	425b      	neglt	r3, r3
 80114b4:	f042 0202 	orrlt.w	r2, r2, #2
 80114b8:	9307      	strge	r3, [sp, #28]
 80114ba:	9307      	strlt	r3, [sp, #28]
 80114bc:	bfb8      	it	lt
 80114be:	9204      	strlt	r2, [sp, #16]
 80114c0:	7823      	ldrb	r3, [r4, #0]
 80114c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80114c4:	d10a      	bne.n	80114dc <_svfiprintf_r+0x130>
 80114c6:	7863      	ldrb	r3, [r4, #1]
 80114c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80114ca:	d132      	bne.n	8011532 <_svfiprintf_r+0x186>
 80114cc:	9b03      	ldr	r3, [sp, #12]
 80114ce:	1d1a      	adds	r2, r3, #4
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	9203      	str	r2, [sp, #12]
 80114d4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80114d8:	3402      	adds	r4, #2
 80114da:	9305      	str	r3, [sp, #20]
 80114dc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80115a0 <_svfiprintf_r+0x1f4>
 80114e0:	7821      	ldrb	r1, [r4, #0]
 80114e2:	2203      	movs	r2, #3
 80114e4:	4650      	mov	r0, sl
 80114e6:	f7ee fe7b 	bl	80001e0 <memchr>
 80114ea:	b138      	cbz	r0, 80114fc <_svfiprintf_r+0x150>
 80114ec:	9b04      	ldr	r3, [sp, #16]
 80114ee:	eba0 000a 	sub.w	r0, r0, sl
 80114f2:	2240      	movs	r2, #64	@ 0x40
 80114f4:	4082      	lsls	r2, r0
 80114f6:	4313      	orrs	r3, r2
 80114f8:	3401      	adds	r4, #1
 80114fa:	9304      	str	r3, [sp, #16]
 80114fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011500:	4824      	ldr	r0, [pc, #144]	@ (8011594 <_svfiprintf_r+0x1e8>)
 8011502:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011506:	2206      	movs	r2, #6
 8011508:	f7ee fe6a 	bl	80001e0 <memchr>
 801150c:	2800      	cmp	r0, #0
 801150e:	d036      	beq.n	801157e <_svfiprintf_r+0x1d2>
 8011510:	4b21      	ldr	r3, [pc, #132]	@ (8011598 <_svfiprintf_r+0x1ec>)
 8011512:	bb1b      	cbnz	r3, 801155c <_svfiprintf_r+0x1b0>
 8011514:	9b03      	ldr	r3, [sp, #12]
 8011516:	3307      	adds	r3, #7
 8011518:	f023 0307 	bic.w	r3, r3, #7
 801151c:	3308      	adds	r3, #8
 801151e:	9303      	str	r3, [sp, #12]
 8011520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011522:	4433      	add	r3, r6
 8011524:	9309      	str	r3, [sp, #36]	@ 0x24
 8011526:	e76a      	b.n	80113fe <_svfiprintf_r+0x52>
 8011528:	fb0c 3202 	mla	r2, ip, r2, r3
 801152c:	460c      	mov	r4, r1
 801152e:	2001      	movs	r0, #1
 8011530:	e7a8      	b.n	8011484 <_svfiprintf_r+0xd8>
 8011532:	2300      	movs	r3, #0
 8011534:	3401      	adds	r4, #1
 8011536:	9305      	str	r3, [sp, #20]
 8011538:	4619      	mov	r1, r3
 801153a:	f04f 0c0a 	mov.w	ip, #10
 801153e:	4620      	mov	r0, r4
 8011540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011544:	3a30      	subs	r2, #48	@ 0x30
 8011546:	2a09      	cmp	r2, #9
 8011548:	d903      	bls.n	8011552 <_svfiprintf_r+0x1a6>
 801154a:	2b00      	cmp	r3, #0
 801154c:	d0c6      	beq.n	80114dc <_svfiprintf_r+0x130>
 801154e:	9105      	str	r1, [sp, #20]
 8011550:	e7c4      	b.n	80114dc <_svfiprintf_r+0x130>
 8011552:	fb0c 2101 	mla	r1, ip, r1, r2
 8011556:	4604      	mov	r4, r0
 8011558:	2301      	movs	r3, #1
 801155a:	e7f0      	b.n	801153e <_svfiprintf_r+0x192>
 801155c:	ab03      	add	r3, sp, #12
 801155e:	9300      	str	r3, [sp, #0]
 8011560:	462a      	mov	r2, r5
 8011562:	4b0e      	ldr	r3, [pc, #56]	@ (801159c <_svfiprintf_r+0x1f0>)
 8011564:	a904      	add	r1, sp, #16
 8011566:	4638      	mov	r0, r7
 8011568:	f7fd fcb6 	bl	800eed8 <_printf_float>
 801156c:	1c42      	adds	r2, r0, #1
 801156e:	4606      	mov	r6, r0
 8011570:	d1d6      	bne.n	8011520 <_svfiprintf_r+0x174>
 8011572:	89ab      	ldrh	r3, [r5, #12]
 8011574:	065b      	lsls	r3, r3, #25
 8011576:	f53f af2d 	bmi.w	80113d4 <_svfiprintf_r+0x28>
 801157a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801157c:	e72c      	b.n	80113d8 <_svfiprintf_r+0x2c>
 801157e:	ab03      	add	r3, sp, #12
 8011580:	9300      	str	r3, [sp, #0]
 8011582:	462a      	mov	r2, r5
 8011584:	4b05      	ldr	r3, [pc, #20]	@ (801159c <_svfiprintf_r+0x1f0>)
 8011586:	a904      	add	r1, sp, #16
 8011588:	4638      	mov	r0, r7
 801158a:	f7fd ff3d 	bl	800f408 <_printf_i>
 801158e:	e7ed      	b.n	801156c <_svfiprintf_r+0x1c0>
 8011590:	080131ab 	.word	0x080131ab
 8011594:	080131b5 	.word	0x080131b5
 8011598:	0800eed9 	.word	0x0800eed9
 801159c:	080112f5 	.word	0x080112f5
 80115a0:	080131b1 	.word	0x080131b1

080115a4 <__sfputc_r>:
 80115a4:	6893      	ldr	r3, [r2, #8]
 80115a6:	3b01      	subs	r3, #1
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	b410      	push	{r4}
 80115ac:	6093      	str	r3, [r2, #8]
 80115ae:	da08      	bge.n	80115c2 <__sfputc_r+0x1e>
 80115b0:	6994      	ldr	r4, [r2, #24]
 80115b2:	42a3      	cmp	r3, r4
 80115b4:	db01      	blt.n	80115ba <__sfputc_r+0x16>
 80115b6:	290a      	cmp	r1, #10
 80115b8:	d103      	bne.n	80115c2 <__sfputc_r+0x1e>
 80115ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115be:	f7fe ba29 	b.w	800fa14 <__swbuf_r>
 80115c2:	6813      	ldr	r3, [r2, #0]
 80115c4:	1c58      	adds	r0, r3, #1
 80115c6:	6010      	str	r0, [r2, #0]
 80115c8:	7019      	strb	r1, [r3, #0]
 80115ca:	4608      	mov	r0, r1
 80115cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80115d0:	4770      	bx	lr

080115d2 <__sfputs_r>:
 80115d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d4:	4606      	mov	r6, r0
 80115d6:	460f      	mov	r7, r1
 80115d8:	4614      	mov	r4, r2
 80115da:	18d5      	adds	r5, r2, r3
 80115dc:	42ac      	cmp	r4, r5
 80115de:	d101      	bne.n	80115e4 <__sfputs_r+0x12>
 80115e0:	2000      	movs	r0, #0
 80115e2:	e007      	b.n	80115f4 <__sfputs_r+0x22>
 80115e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80115e8:	463a      	mov	r2, r7
 80115ea:	4630      	mov	r0, r6
 80115ec:	f7ff ffda 	bl	80115a4 <__sfputc_r>
 80115f0:	1c43      	adds	r3, r0, #1
 80115f2:	d1f3      	bne.n	80115dc <__sfputs_r+0xa>
 80115f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080115f8 <_vfiprintf_r>:
 80115f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115fc:	460d      	mov	r5, r1
 80115fe:	b09d      	sub	sp, #116	@ 0x74
 8011600:	4614      	mov	r4, r2
 8011602:	4698      	mov	r8, r3
 8011604:	4606      	mov	r6, r0
 8011606:	b118      	cbz	r0, 8011610 <_vfiprintf_r+0x18>
 8011608:	6a03      	ldr	r3, [r0, #32]
 801160a:	b90b      	cbnz	r3, 8011610 <_vfiprintf_r+0x18>
 801160c:	f7fe f8a6 	bl	800f75c <__sinit>
 8011610:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011612:	07d9      	lsls	r1, r3, #31
 8011614:	d405      	bmi.n	8011622 <_vfiprintf_r+0x2a>
 8011616:	89ab      	ldrh	r3, [r5, #12]
 8011618:	059a      	lsls	r2, r3, #22
 801161a:	d402      	bmi.n	8011622 <_vfiprintf_r+0x2a>
 801161c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801161e:	f7fe fb68 	bl	800fcf2 <__retarget_lock_acquire_recursive>
 8011622:	89ab      	ldrh	r3, [r5, #12]
 8011624:	071b      	lsls	r3, r3, #28
 8011626:	d501      	bpl.n	801162c <_vfiprintf_r+0x34>
 8011628:	692b      	ldr	r3, [r5, #16]
 801162a:	b99b      	cbnz	r3, 8011654 <_vfiprintf_r+0x5c>
 801162c:	4629      	mov	r1, r5
 801162e:	4630      	mov	r0, r6
 8011630:	f7fe fa2e 	bl	800fa90 <__swsetup_r>
 8011634:	b170      	cbz	r0, 8011654 <_vfiprintf_r+0x5c>
 8011636:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011638:	07dc      	lsls	r4, r3, #31
 801163a:	d504      	bpl.n	8011646 <_vfiprintf_r+0x4e>
 801163c:	f04f 30ff 	mov.w	r0, #4294967295
 8011640:	b01d      	add	sp, #116	@ 0x74
 8011642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011646:	89ab      	ldrh	r3, [r5, #12]
 8011648:	0598      	lsls	r0, r3, #22
 801164a:	d4f7      	bmi.n	801163c <_vfiprintf_r+0x44>
 801164c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801164e:	f7fe fb51 	bl	800fcf4 <__retarget_lock_release_recursive>
 8011652:	e7f3      	b.n	801163c <_vfiprintf_r+0x44>
 8011654:	2300      	movs	r3, #0
 8011656:	9309      	str	r3, [sp, #36]	@ 0x24
 8011658:	2320      	movs	r3, #32
 801165a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801165e:	f8cd 800c 	str.w	r8, [sp, #12]
 8011662:	2330      	movs	r3, #48	@ 0x30
 8011664:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011814 <_vfiprintf_r+0x21c>
 8011668:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801166c:	f04f 0901 	mov.w	r9, #1
 8011670:	4623      	mov	r3, r4
 8011672:	469a      	mov	sl, r3
 8011674:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011678:	b10a      	cbz	r2, 801167e <_vfiprintf_r+0x86>
 801167a:	2a25      	cmp	r2, #37	@ 0x25
 801167c:	d1f9      	bne.n	8011672 <_vfiprintf_r+0x7a>
 801167e:	ebba 0b04 	subs.w	fp, sl, r4
 8011682:	d00b      	beq.n	801169c <_vfiprintf_r+0xa4>
 8011684:	465b      	mov	r3, fp
 8011686:	4622      	mov	r2, r4
 8011688:	4629      	mov	r1, r5
 801168a:	4630      	mov	r0, r6
 801168c:	f7ff ffa1 	bl	80115d2 <__sfputs_r>
 8011690:	3001      	adds	r0, #1
 8011692:	f000 80a7 	beq.w	80117e4 <_vfiprintf_r+0x1ec>
 8011696:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011698:	445a      	add	r2, fp
 801169a:	9209      	str	r2, [sp, #36]	@ 0x24
 801169c:	f89a 3000 	ldrb.w	r3, [sl]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f000 809f 	beq.w	80117e4 <_vfiprintf_r+0x1ec>
 80116a6:	2300      	movs	r3, #0
 80116a8:	f04f 32ff 	mov.w	r2, #4294967295
 80116ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80116b0:	f10a 0a01 	add.w	sl, sl, #1
 80116b4:	9304      	str	r3, [sp, #16]
 80116b6:	9307      	str	r3, [sp, #28]
 80116b8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80116bc:	931a      	str	r3, [sp, #104]	@ 0x68
 80116be:	4654      	mov	r4, sl
 80116c0:	2205      	movs	r2, #5
 80116c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116c6:	4853      	ldr	r0, [pc, #332]	@ (8011814 <_vfiprintf_r+0x21c>)
 80116c8:	f7ee fd8a 	bl	80001e0 <memchr>
 80116cc:	9a04      	ldr	r2, [sp, #16]
 80116ce:	b9d8      	cbnz	r0, 8011708 <_vfiprintf_r+0x110>
 80116d0:	06d1      	lsls	r1, r2, #27
 80116d2:	bf44      	itt	mi
 80116d4:	2320      	movmi	r3, #32
 80116d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116da:	0713      	lsls	r3, r2, #28
 80116dc:	bf44      	itt	mi
 80116de:	232b      	movmi	r3, #43	@ 0x2b
 80116e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80116e4:	f89a 3000 	ldrb.w	r3, [sl]
 80116e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80116ea:	d015      	beq.n	8011718 <_vfiprintf_r+0x120>
 80116ec:	9a07      	ldr	r2, [sp, #28]
 80116ee:	4654      	mov	r4, sl
 80116f0:	2000      	movs	r0, #0
 80116f2:	f04f 0c0a 	mov.w	ip, #10
 80116f6:	4621      	mov	r1, r4
 80116f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80116fc:	3b30      	subs	r3, #48	@ 0x30
 80116fe:	2b09      	cmp	r3, #9
 8011700:	d94b      	bls.n	801179a <_vfiprintf_r+0x1a2>
 8011702:	b1b0      	cbz	r0, 8011732 <_vfiprintf_r+0x13a>
 8011704:	9207      	str	r2, [sp, #28]
 8011706:	e014      	b.n	8011732 <_vfiprintf_r+0x13a>
 8011708:	eba0 0308 	sub.w	r3, r0, r8
 801170c:	fa09 f303 	lsl.w	r3, r9, r3
 8011710:	4313      	orrs	r3, r2
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	46a2      	mov	sl, r4
 8011716:	e7d2      	b.n	80116be <_vfiprintf_r+0xc6>
 8011718:	9b03      	ldr	r3, [sp, #12]
 801171a:	1d19      	adds	r1, r3, #4
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	9103      	str	r1, [sp, #12]
 8011720:	2b00      	cmp	r3, #0
 8011722:	bfbb      	ittet	lt
 8011724:	425b      	neglt	r3, r3
 8011726:	f042 0202 	orrlt.w	r2, r2, #2
 801172a:	9307      	strge	r3, [sp, #28]
 801172c:	9307      	strlt	r3, [sp, #28]
 801172e:	bfb8      	it	lt
 8011730:	9204      	strlt	r2, [sp, #16]
 8011732:	7823      	ldrb	r3, [r4, #0]
 8011734:	2b2e      	cmp	r3, #46	@ 0x2e
 8011736:	d10a      	bne.n	801174e <_vfiprintf_r+0x156>
 8011738:	7863      	ldrb	r3, [r4, #1]
 801173a:	2b2a      	cmp	r3, #42	@ 0x2a
 801173c:	d132      	bne.n	80117a4 <_vfiprintf_r+0x1ac>
 801173e:	9b03      	ldr	r3, [sp, #12]
 8011740:	1d1a      	adds	r2, r3, #4
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	9203      	str	r2, [sp, #12]
 8011746:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801174a:	3402      	adds	r4, #2
 801174c:	9305      	str	r3, [sp, #20]
 801174e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011824 <_vfiprintf_r+0x22c>
 8011752:	7821      	ldrb	r1, [r4, #0]
 8011754:	2203      	movs	r2, #3
 8011756:	4650      	mov	r0, sl
 8011758:	f7ee fd42 	bl	80001e0 <memchr>
 801175c:	b138      	cbz	r0, 801176e <_vfiprintf_r+0x176>
 801175e:	9b04      	ldr	r3, [sp, #16]
 8011760:	eba0 000a 	sub.w	r0, r0, sl
 8011764:	2240      	movs	r2, #64	@ 0x40
 8011766:	4082      	lsls	r2, r0
 8011768:	4313      	orrs	r3, r2
 801176a:	3401      	adds	r4, #1
 801176c:	9304      	str	r3, [sp, #16]
 801176e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011772:	4829      	ldr	r0, [pc, #164]	@ (8011818 <_vfiprintf_r+0x220>)
 8011774:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011778:	2206      	movs	r2, #6
 801177a:	f7ee fd31 	bl	80001e0 <memchr>
 801177e:	2800      	cmp	r0, #0
 8011780:	d03f      	beq.n	8011802 <_vfiprintf_r+0x20a>
 8011782:	4b26      	ldr	r3, [pc, #152]	@ (801181c <_vfiprintf_r+0x224>)
 8011784:	bb1b      	cbnz	r3, 80117ce <_vfiprintf_r+0x1d6>
 8011786:	9b03      	ldr	r3, [sp, #12]
 8011788:	3307      	adds	r3, #7
 801178a:	f023 0307 	bic.w	r3, r3, #7
 801178e:	3308      	adds	r3, #8
 8011790:	9303      	str	r3, [sp, #12]
 8011792:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011794:	443b      	add	r3, r7
 8011796:	9309      	str	r3, [sp, #36]	@ 0x24
 8011798:	e76a      	b.n	8011670 <_vfiprintf_r+0x78>
 801179a:	fb0c 3202 	mla	r2, ip, r2, r3
 801179e:	460c      	mov	r4, r1
 80117a0:	2001      	movs	r0, #1
 80117a2:	e7a8      	b.n	80116f6 <_vfiprintf_r+0xfe>
 80117a4:	2300      	movs	r3, #0
 80117a6:	3401      	adds	r4, #1
 80117a8:	9305      	str	r3, [sp, #20]
 80117aa:	4619      	mov	r1, r3
 80117ac:	f04f 0c0a 	mov.w	ip, #10
 80117b0:	4620      	mov	r0, r4
 80117b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80117b6:	3a30      	subs	r2, #48	@ 0x30
 80117b8:	2a09      	cmp	r2, #9
 80117ba:	d903      	bls.n	80117c4 <_vfiprintf_r+0x1cc>
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d0c6      	beq.n	801174e <_vfiprintf_r+0x156>
 80117c0:	9105      	str	r1, [sp, #20]
 80117c2:	e7c4      	b.n	801174e <_vfiprintf_r+0x156>
 80117c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80117c8:	4604      	mov	r4, r0
 80117ca:	2301      	movs	r3, #1
 80117cc:	e7f0      	b.n	80117b0 <_vfiprintf_r+0x1b8>
 80117ce:	ab03      	add	r3, sp, #12
 80117d0:	9300      	str	r3, [sp, #0]
 80117d2:	462a      	mov	r2, r5
 80117d4:	4b12      	ldr	r3, [pc, #72]	@ (8011820 <_vfiprintf_r+0x228>)
 80117d6:	a904      	add	r1, sp, #16
 80117d8:	4630      	mov	r0, r6
 80117da:	f7fd fb7d 	bl	800eed8 <_printf_float>
 80117de:	4607      	mov	r7, r0
 80117e0:	1c78      	adds	r0, r7, #1
 80117e2:	d1d6      	bne.n	8011792 <_vfiprintf_r+0x19a>
 80117e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80117e6:	07d9      	lsls	r1, r3, #31
 80117e8:	d405      	bmi.n	80117f6 <_vfiprintf_r+0x1fe>
 80117ea:	89ab      	ldrh	r3, [r5, #12]
 80117ec:	059a      	lsls	r2, r3, #22
 80117ee:	d402      	bmi.n	80117f6 <_vfiprintf_r+0x1fe>
 80117f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80117f2:	f7fe fa7f 	bl	800fcf4 <__retarget_lock_release_recursive>
 80117f6:	89ab      	ldrh	r3, [r5, #12]
 80117f8:	065b      	lsls	r3, r3, #25
 80117fa:	f53f af1f 	bmi.w	801163c <_vfiprintf_r+0x44>
 80117fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011800:	e71e      	b.n	8011640 <_vfiprintf_r+0x48>
 8011802:	ab03      	add	r3, sp, #12
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	462a      	mov	r2, r5
 8011808:	4b05      	ldr	r3, [pc, #20]	@ (8011820 <_vfiprintf_r+0x228>)
 801180a:	a904      	add	r1, sp, #16
 801180c:	4630      	mov	r0, r6
 801180e:	f7fd fdfb 	bl	800f408 <_printf_i>
 8011812:	e7e4      	b.n	80117de <_vfiprintf_r+0x1e6>
 8011814:	080131ab 	.word	0x080131ab
 8011818:	080131b5 	.word	0x080131b5
 801181c:	0800eed9 	.word	0x0800eed9
 8011820:	080115d3 	.word	0x080115d3
 8011824:	080131b1 	.word	0x080131b1

08011828 <__sflush_r>:
 8011828:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011830:	0716      	lsls	r6, r2, #28
 8011832:	4605      	mov	r5, r0
 8011834:	460c      	mov	r4, r1
 8011836:	d454      	bmi.n	80118e2 <__sflush_r+0xba>
 8011838:	684b      	ldr	r3, [r1, #4]
 801183a:	2b00      	cmp	r3, #0
 801183c:	dc02      	bgt.n	8011844 <__sflush_r+0x1c>
 801183e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011840:	2b00      	cmp	r3, #0
 8011842:	dd48      	ble.n	80118d6 <__sflush_r+0xae>
 8011844:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011846:	2e00      	cmp	r6, #0
 8011848:	d045      	beq.n	80118d6 <__sflush_r+0xae>
 801184a:	2300      	movs	r3, #0
 801184c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011850:	682f      	ldr	r7, [r5, #0]
 8011852:	6a21      	ldr	r1, [r4, #32]
 8011854:	602b      	str	r3, [r5, #0]
 8011856:	d030      	beq.n	80118ba <__sflush_r+0x92>
 8011858:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801185a:	89a3      	ldrh	r3, [r4, #12]
 801185c:	0759      	lsls	r1, r3, #29
 801185e:	d505      	bpl.n	801186c <__sflush_r+0x44>
 8011860:	6863      	ldr	r3, [r4, #4]
 8011862:	1ad2      	subs	r2, r2, r3
 8011864:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011866:	b10b      	cbz	r3, 801186c <__sflush_r+0x44>
 8011868:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801186a:	1ad2      	subs	r2, r2, r3
 801186c:	2300      	movs	r3, #0
 801186e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011870:	6a21      	ldr	r1, [r4, #32]
 8011872:	4628      	mov	r0, r5
 8011874:	47b0      	blx	r6
 8011876:	1c43      	adds	r3, r0, #1
 8011878:	89a3      	ldrh	r3, [r4, #12]
 801187a:	d106      	bne.n	801188a <__sflush_r+0x62>
 801187c:	6829      	ldr	r1, [r5, #0]
 801187e:	291d      	cmp	r1, #29
 8011880:	d82b      	bhi.n	80118da <__sflush_r+0xb2>
 8011882:	4a2a      	ldr	r2, [pc, #168]	@ (801192c <__sflush_r+0x104>)
 8011884:	40ca      	lsrs	r2, r1
 8011886:	07d6      	lsls	r6, r2, #31
 8011888:	d527      	bpl.n	80118da <__sflush_r+0xb2>
 801188a:	2200      	movs	r2, #0
 801188c:	6062      	str	r2, [r4, #4]
 801188e:	04d9      	lsls	r1, r3, #19
 8011890:	6922      	ldr	r2, [r4, #16]
 8011892:	6022      	str	r2, [r4, #0]
 8011894:	d504      	bpl.n	80118a0 <__sflush_r+0x78>
 8011896:	1c42      	adds	r2, r0, #1
 8011898:	d101      	bne.n	801189e <__sflush_r+0x76>
 801189a:	682b      	ldr	r3, [r5, #0]
 801189c:	b903      	cbnz	r3, 80118a0 <__sflush_r+0x78>
 801189e:	6560      	str	r0, [r4, #84]	@ 0x54
 80118a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80118a2:	602f      	str	r7, [r5, #0]
 80118a4:	b1b9      	cbz	r1, 80118d6 <__sflush_r+0xae>
 80118a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80118aa:	4299      	cmp	r1, r3
 80118ac:	d002      	beq.n	80118b4 <__sflush_r+0x8c>
 80118ae:	4628      	mov	r0, r5
 80118b0:	f7ff f8a6 	bl	8010a00 <_free_r>
 80118b4:	2300      	movs	r3, #0
 80118b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80118b8:	e00d      	b.n	80118d6 <__sflush_r+0xae>
 80118ba:	2301      	movs	r3, #1
 80118bc:	4628      	mov	r0, r5
 80118be:	47b0      	blx	r6
 80118c0:	4602      	mov	r2, r0
 80118c2:	1c50      	adds	r0, r2, #1
 80118c4:	d1c9      	bne.n	801185a <__sflush_r+0x32>
 80118c6:	682b      	ldr	r3, [r5, #0]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d0c6      	beq.n	801185a <__sflush_r+0x32>
 80118cc:	2b1d      	cmp	r3, #29
 80118ce:	d001      	beq.n	80118d4 <__sflush_r+0xac>
 80118d0:	2b16      	cmp	r3, #22
 80118d2:	d11e      	bne.n	8011912 <__sflush_r+0xea>
 80118d4:	602f      	str	r7, [r5, #0]
 80118d6:	2000      	movs	r0, #0
 80118d8:	e022      	b.n	8011920 <__sflush_r+0xf8>
 80118da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80118de:	b21b      	sxth	r3, r3
 80118e0:	e01b      	b.n	801191a <__sflush_r+0xf2>
 80118e2:	690f      	ldr	r7, [r1, #16]
 80118e4:	2f00      	cmp	r7, #0
 80118e6:	d0f6      	beq.n	80118d6 <__sflush_r+0xae>
 80118e8:	0793      	lsls	r3, r2, #30
 80118ea:	680e      	ldr	r6, [r1, #0]
 80118ec:	bf08      	it	eq
 80118ee:	694b      	ldreq	r3, [r1, #20]
 80118f0:	600f      	str	r7, [r1, #0]
 80118f2:	bf18      	it	ne
 80118f4:	2300      	movne	r3, #0
 80118f6:	eba6 0807 	sub.w	r8, r6, r7
 80118fa:	608b      	str	r3, [r1, #8]
 80118fc:	f1b8 0f00 	cmp.w	r8, #0
 8011900:	dde9      	ble.n	80118d6 <__sflush_r+0xae>
 8011902:	6a21      	ldr	r1, [r4, #32]
 8011904:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011906:	4643      	mov	r3, r8
 8011908:	463a      	mov	r2, r7
 801190a:	4628      	mov	r0, r5
 801190c:	47b0      	blx	r6
 801190e:	2800      	cmp	r0, #0
 8011910:	dc08      	bgt.n	8011924 <__sflush_r+0xfc>
 8011912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801191a:	81a3      	strh	r3, [r4, #12]
 801191c:	f04f 30ff 	mov.w	r0, #4294967295
 8011920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011924:	4407      	add	r7, r0
 8011926:	eba8 0800 	sub.w	r8, r8, r0
 801192a:	e7e7      	b.n	80118fc <__sflush_r+0xd4>
 801192c:	20400001 	.word	0x20400001

08011930 <_fflush_r>:
 8011930:	b538      	push	{r3, r4, r5, lr}
 8011932:	690b      	ldr	r3, [r1, #16]
 8011934:	4605      	mov	r5, r0
 8011936:	460c      	mov	r4, r1
 8011938:	b913      	cbnz	r3, 8011940 <_fflush_r+0x10>
 801193a:	2500      	movs	r5, #0
 801193c:	4628      	mov	r0, r5
 801193e:	bd38      	pop	{r3, r4, r5, pc}
 8011940:	b118      	cbz	r0, 801194a <_fflush_r+0x1a>
 8011942:	6a03      	ldr	r3, [r0, #32]
 8011944:	b90b      	cbnz	r3, 801194a <_fflush_r+0x1a>
 8011946:	f7fd ff09 	bl	800f75c <__sinit>
 801194a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d0f3      	beq.n	801193a <_fflush_r+0xa>
 8011952:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011954:	07d0      	lsls	r0, r2, #31
 8011956:	d404      	bmi.n	8011962 <_fflush_r+0x32>
 8011958:	0599      	lsls	r1, r3, #22
 801195a:	d402      	bmi.n	8011962 <_fflush_r+0x32>
 801195c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801195e:	f7fe f9c8 	bl	800fcf2 <__retarget_lock_acquire_recursive>
 8011962:	4628      	mov	r0, r5
 8011964:	4621      	mov	r1, r4
 8011966:	f7ff ff5f 	bl	8011828 <__sflush_r>
 801196a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801196c:	07da      	lsls	r2, r3, #31
 801196e:	4605      	mov	r5, r0
 8011970:	d4e4      	bmi.n	801193c <_fflush_r+0xc>
 8011972:	89a3      	ldrh	r3, [r4, #12]
 8011974:	059b      	lsls	r3, r3, #22
 8011976:	d4e1      	bmi.n	801193c <_fflush_r+0xc>
 8011978:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801197a:	f7fe f9bb 	bl	800fcf4 <__retarget_lock_release_recursive>
 801197e:	e7dd      	b.n	801193c <_fflush_r+0xc>

08011980 <fiprintf>:
 8011980:	b40e      	push	{r1, r2, r3}
 8011982:	b503      	push	{r0, r1, lr}
 8011984:	4601      	mov	r1, r0
 8011986:	ab03      	add	r3, sp, #12
 8011988:	4805      	ldr	r0, [pc, #20]	@ (80119a0 <fiprintf+0x20>)
 801198a:	f853 2b04 	ldr.w	r2, [r3], #4
 801198e:	6800      	ldr	r0, [r0, #0]
 8011990:	9301      	str	r3, [sp, #4]
 8011992:	f7ff fe31 	bl	80115f8 <_vfiprintf_r>
 8011996:	b002      	add	sp, #8
 8011998:	f85d eb04 	ldr.w	lr, [sp], #4
 801199c:	b003      	add	sp, #12
 801199e:	4770      	bx	lr
 80119a0:	20000024 	.word	0x20000024

080119a4 <__swhatbuf_r>:
 80119a4:	b570      	push	{r4, r5, r6, lr}
 80119a6:	460c      	mov	r4, r1
 80119a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80119ac:	2900      	cmp	r1, #0
 80119ae:	b096      	sub	sp, #88	@ 0x58
 80119b0:	4615      	mov	r5, r2
 80119b2:	461e      	mov	r6, r3
 80119b4:	da0d      	bge.n	80119d2 <__swhatbuf_r+0x2e>
 80119b6:	89a3      	ldrh	r3, [r4, #12]
 80119b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80119bc:	f04f 0100 	mov.w	r1, #0
 80119c0:	bf14      	ite	ne
 80119c2:	2340      	movne	r3, #64	@ 0x40
 80119c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80119c8:	2000      	movs	r0, #0
 80119ca:	6031      	str	r1, [r6, #0]
 80119cc:	602b      	str	r3, [r5, #0]
 80119ce:	b016      	add	sp, #88	@ 0x58
 80119d0:	bd70      	pop	{r4, r5, r6, pc}
 80119d2:	466a      	mov	r2, sp
 80119d4:	f000 f862 	bl	8011a9c <_fstat_r>
 80119d8:	2800      	cmp	r0, #0
 80119da:	dbec      	blt.n	80119b6 <__swhatbuf_r+0x12>
 80119dc:	9901      	ldr	r1, [sp, #4]
 80119de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80119e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80119e6:	4259      	negs	r1, r3
 80119e8:	4159      	adcs	r1, r3
 80119ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80119ee:	e7eb      	b.n	80119c8 <__swhatbuf_r+0x24>

080119f0 <__smakebuf_r>:
 80119f0:	898b      	ldrh	r3, [r1, #12]
 80119f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80119f4:	079d      	lsls	r5, r3, #30
 80119f6:	4606      	mov	r6, r0
 80119f8:	460c      	mov	r4, r1
 80119fa:	d507      	bpl.n	8011a0c <__smakebuf_r+0x1c>
 80119fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011a00:	6023      	str	r3, [r4, #0]
 8011a02:	6123      	str	r3, [r4, #16]
 8011a04:	2301      	movs	r3, #1
 8011a06:	6163      	str	r3, [r4, #20]
 8011a08:	b003      	add	sp, #12
 8011a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a0c:	ab01      	add	r3, sp, #4
 8011a0e:	466a      	mov	r2, sp
 8011a10:	f7ff ffc8 	bl	80119a4 <__swhatbuf_r>
 8011a14:	9f00      	ldr	r7, [sp, #0]
 8011a16:	4605      	mov	r5, r0
 8011a18:	4639      	mov	r1, r7
 8011a1a:	4630      	mov	r0, r6
 8011a1c:	f7ff f864 	bl	8010ae8 <_malloc_r>
 8011a20:	b948      	cbnz	r0, 8011a36 <__smakebuf_r+0x46>
 8011a22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011a26:	059a      	lsls	r2, r3, #22
 8011a28:	d4ee      	bmi.n	8011a08 <__smakebuf_r+0x18>
 8011a2a:	f023 0303 	bic.w	r3, r3, #3
 8011a2e:	f043 0302 	orr.w	r3, r3, #2
 8011a32:	81a3      	strh	r3, [r4, #12]
 8011a34:	e7e2      	b.n	80119fc <__smakebuf_r+0xc>
 8011a36:	89a3      	ldrh	r3, [r4, #12]
 8011a38:	6020      	str	r0, [r4, #0]
 8011a3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011a3e:	81a3      	strh	r3, [r4, #12]
 8011a40:	9b01      	ldr	r3, [sp, #4]
 8011a42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011a46:	b15b      	cbz	r3, 8011a60 <__smakebuf_r+0x70>
 8011a48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a4c:	4630      	mov	r0, r6
 8011a4e:	f000 f837 	bl	8011ac0 <_isatty_r>
 8011a52:	b128      	cbz	r0, 8011a60 <__smakebuf_r+0x70>
 8011a54:	89a3      	ldrh	r3, [r4, #12]
 8011a56:	f023 0303 	bic.w	r3, r3, #3
 8011a5a:	f043 0301 	orr.w	r3, r3, #1
 8011a5e:	81a3      	strh	r3, [r4, #12]
 8011a60:	89a3      	ldrh	r3, [r4, #12]
 8011a62:	431d      	orrs	r5, r3
 8011a64:	81a5      	strh	r5, [r4, #12]
 8011a66:	e7cf      	b.n	8011a08 <__smakebuf_r+0x18>

08011a68 <memmove>:
 8011a68:	4288      	cmp	r0, r1
 8011a6a:	b510      	push	{r4, lr}
 8011a6c:	eb01 0402 	add.w	r4, r1, r2
 8011a70:	d902      	bls.n	8011a78 <memmove+0x10>
 8011a72:	4284      	cmp	r4, r0
 8011a74:	4623      	mov	r3, r4
 8011a76:	d807      	bhi.n	8011a88 <memmove+0x20>
 8011a78:	1e43      	subs	r3, r0, #1
 8011a7a:	42a1      	cmp	r1, r4
 8011a7c:	d008      	beq.n	8011a90 <memmove+0x28>
 8011a7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011a82:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011a86:	e7f8      	b.n	8011a7a <memmove+0x12>
 8011a88:	4402      	add	r2, r0
 8011a8a:	4601      	mov	r1, r0
 8011a8c:	428a      	cmp	r2, r1
 8011a8e:	d100      	bne.n	8011a92 <memmove+0x2a>
 8011a90:	bd10      	pop	{r4, pc}
 8011a92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011a96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011a9a:	e7f7      	b.n	8011a8c <memmove+0x24>

08011a9c <_fstat_r>:
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4d07      	ldr	r5, [pc, #28]	@ (8011abc <_fstat_r+0x20>)
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	4604      	mov	r4, r0
 8011aa4:	4608      	mov	r0, r1
 8011aa6:	4611      	mov	r1, r2
 8011aa8:	602b      	str	r3, [r5, #0]
 8011aaa:	f7f1 fde9 	bl	8003680 <_fstat>
 8011aae:	1c43      	adds	r3, r0, #1
 8011ab0:	d102      	bne.n	8011ab8 <_fstat_r+0x1c>
 8011ab2:	682b      	ldr	r3, [r5, #0]
 8011ab4:	b103      	cbz	r3, 8011ab8 <_fstat_r+0x1c>
 8011ab6:	6023      	str	r3, [r4, #0]
 8011ab8:	bd38      	pop	{r3, r4, r5, pc}
 8011aba:	bf00      	nop
 8011abc:	20005530 	.word	0x20005530

08011ac0 <_isatty_r>:
 8011ac0:	b538      	push	{r3, r4, r5, lr}
 8011ac2:	4d06      	ldr	r5, [pc, #24]	@ (8011adc <_isatty_r+0x1c>)
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	4604      	mov	r4, r0
 8011ac8:	4608      	mov	r0, r1
 8011aca:	602b      	str	r3, [r5, #0]
 8011acc:	f7f1 fde8 	bl	80036a0 <_isatty>
 8011ad0:	1c43      	adds	r3, r0, #1
 8011ad2:	d102      	bne.n	8011ada <_isatty_r+0x1a>
 8011ad4:	682b      	ldr	r3, [r5, #0]
 8011ad6:	b103      	cbz	r3, 8011ada <_isatty_r+0x1a>
 8011ad8:	6023      	str	r3, [r4, #0]
 8011ada:	bd38      	pop	{r3, r4, r5, pc}
 8011adc:	20005530 	.word	0x20005530

08011ae0 <_sbrk_r>:
 8011ae0:	b538      	push	{r3, r4, r5, lr}
 8011ae2:	4d06      	ldr	r5, [pc, #24]	@ (8011afc <_sbrk_r+0x1c>)
 8011ae4:	2300      	movs	r3, #0
 8011ae6:	4604      	mov	r4, r0
 8011ae8:	4608      	mov	r0, r1
 8011aea:	602b      	str	r3, [r5, #0]
 8011aec:	f7f1 fdf0 	bl	80036d0 <_sbrk>
 8011af0:	1c43      	adds	r3, r0, #1
 8011af2:	d102      	bne.n	8011afa <_sbrk_r+0x1a>
 8011af4:	682b      	ldr	r3, [r5, #0]
 8011af6:	b103      	cbz	r3, 8011afa <_sbrk_r+0x1a>
 8011af8:	6023      	str	r3, [r4, #0]
 8011afa:	bd38      	pop	{r3, r4, r5, pc}
 8011afc:	20005530 	.word	0x20005530

08011b00 <abort>:
 8011b00:	b508      	push	{r3, lr}
 8011b02:	2006      	movs	r0, #6
 8011b04:	f000 f88c 	bl	8011c20 <raise>
 8011b08:	2001      	movs	r0, #1
 8011b0a:	f7f1 fd69 	bl	80035e0 <_exit>

08011b0e <_calloc_r>:
 8011b0e:	b570      	push	{r4, r5, r6, lr}
 8011b10:	fba1 5402 	umull	r5, r4, r1, r2
 8011b14:	b934      	cbnz	r4, 8011b24 <_calloc_r+0x16>
 8011b16:	4629      	mov	r1, r5
 8011b18:	f7fe ffe6 	bl	8010ae8 <_malloc_r>
 8011b1c:	4606      	mov	r6, r0
 8011b1e:	b928      	cbnz	r0, 8011b2c <_calloc_r+0x1e>
 8011b20:	4630      	mov	r0, r6
 8011b22:	bd70      	pop	{r4, r5, r6, pc}
 8011b24:	220c      	movs	r2, #12
 8011b26:	6002      	str	r2, [r0, #0]
 8011b28:	2600      	movs	r6, #0
 8011b2a:	e7f9      	b.n	8011b20 <_calloc_r+0x12>
 8011b2c:	462a      	mov	r2, r5
 8011b2e:	4621      	mov	r1, r4
 8011b30:	f7fe f804 	bl	800fb3c <memset>
 8011b34:	e7f4      	b.n	8011b20 <_calloc_r+0x12>

08011b36 <__ascii_mbtowc>:
 8011b36:	b082      	sub	sp, #8
 8011b38:	b901      	cbnz	r1, 8011b3c <__ascii_mbtowc+0x6>
 8011b3a:	a901      	add	r1, sp, #4
 8011b3c:	b142      	cbz	r2, 8011b50 <__ascii_mbtowc+0x1a>
 8011b3e:	b14b      	cbz	r3, 8011b54 <__ascii_mbtowc+0x1e>
 8011b40:	7813      	ldrb	r3, [r2, #0]
 8011b42:	600b      	str	r3, [r1, #0]
 8011b44:	7812      	ldrb	r2, [r2, #0]
 8011b46:	1e10      	subs	r0, r2, #0
 8011b48:	bf18      	it	ne
 8011b4a:	2001      	movne	r0, #1
 8011b4c:	b002      	add	sp, #8
 8011b4e:	4770      	bx	lr
 8011b50:	4610      	mov	r0, r2
 8011b52:	e7fb      	b.n	8011b4c <__ascii_mbtowc+0x16>
 8011b54:	f06f 0001 	mvn.w	r0, #1
 8011b58:	e7f8      	b.n	8011b4c <__ascii_mbtowc+0x16>

08011b5a <_realloc_r>:
 8011b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b5e:	4607      	mov	r7, r0
 8011b60:	4614      	mov	r4, r2
 8011b62:	460d      	mov	r5, r1
 8011b64:	b921      	cbnz	r1, 8011b70 <_realloc_r+0x16>
 8011b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011b6a:	4611      	mov	r1, r2
 8011b6c:	f7fe bfbc 	b.w	8010ae8 <_malloc_r>
 8011b70:	b92a      	cbnz	r2, 8011b7e <_realloc_r+0x24>
 8011b72:	f7fe ff45 	bl	8010a00 <_free_r>
 8011b76:	4625      	mov	r5, r4
 8011b78:	4628      	mov	r0, r5
 8011b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b7e:	f000 f86b 	bl	8011c58 <_malloc_usable_size_r>
 8011b82:	4284      	cmp	r4, r0
 8011b84:	4606      	mov	r6, r0
 8011b86:	d802      	bhi.n	8011b8e <_realloc_r+0x34>
 8011b88:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011b8c:	d8f4      	bhi.n	8011b78 <_realloc_r+0x1e>
 8011b8e:	4621      	mov	r1, r4
 8011b90:	4638      	mov	r0, r7
 8011b92:	f7fe ffa9 	bl	8010ae8 <_malloc_r>
 8011b96:	4680      	mov	r8, r0
 8011b98:	b908      	cbnz	r0, 8011b9e <_realloc_r+0x44>
 8011b9a:	4645      	mov	r5, r8
 8011b9c:	e7ec      	b.n	8011b78 <_realloc_r+0x1e>
 8011b9e:	42b4      	cmp	r4, r6
 8011ba0:	4622      	mov	r2, r4
 8011ba2:	4629      	mov	r1, r5
 8011ba4:	bf28      	it	cs
 8011ba6:	4632      	movcs	r2, r6
 8011ba8:	f7fe f8a5 	bl	800fcf6 <memcpy>
 8011bac:	4629      	mov	r1, r5
 8011bae:	4638      	mov	r0, r7
 8011bb0:	f7fe ff26 	bl	8010a00 <_free_r>
 8011bb4:	e7f1      	b.n	8011b9a <_realloc_r+0x40>

08011bb6 <__ascii_wctomb>:
 8011bb6:	4603      	mov	r3, r0
 8011bb8:	4608      	mov	r0, r1
 8011bba:	b141      	cbz	r1, 8011bce <__ascii_wctomb+0x18>
 8011bbc:	2aff      	cmp	r2, #255	@ 0xff
 8011bbe:	d904      	bls.n	8011bca <__ascii_wctomb+0x14>
 8011bc0:	228a      	movs	r2, #138	@ 0x8a
 8011bc2:	601a      	str	r2, [r3, #0]
 8011bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011bc8:	4770      	bx	lr
 8011bca:	700a      	strb	r2, [r1, #0]
 8011bcc:	2001      	movs	r0, #1
 8011bce:	4770      	bx	lr

08011bd0 <_raise_r>:
 8011bd0:	291f      	cmp	r1, #31
 8011bd2:	b538      	push	{r3, r4, r5, lr}
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	460c      	mov	r4, r1
 8011bd8:	d904      	bls.n	8011be4 <_raise_r+0x14>
 8011bda:	2316      	movs	r3, #22
 8011bdc:	6003      	str	r3, [r0, #0]
 8011bde:	f04f 30ff 	mov.w	r0, #4294967295
 8011be2:	bd38      	pop	{r3, r4, r5, pc}
 8011be4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011be6:	b112      	cbz	r2, 8011bee <_raise_r+0x1e>
 8011be8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011bec:	b94b      	cbnz	r3, 8011c02 <_raise_r+0x32>
 8011bee:	4628      	mov	r0, r5
 8011bf0:	f000 f830 	bl	8011c54 <_getpid_r>
 8011bf4:	4622      	mov	r2, r4
 8011bf6:	4601      	mov	r1, r0
 8011bf8:	4628      	mov	r0, r5
 8011bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011bfe:	f000 b817 	b.w	8011c30 <_kill_r>
 8011c02:	2b01      	cmp	r3, #1
 8011c04:	d00a      	beq.n	8011c1c <_raise_r+0x4c>
 8011c06:	1c59      	adds	r1, r3, #1
 8011c08:	d103      	bne.n	8011c12 <_raise_r+0x42>
 8011c0a:	2316      	movs	r3, #22
 8011c0c:	6003      	str	r3, [r0, #0]
 8011c0e:	2001      	movs	r0, #1
 8011c10:	e7e7      	b.n	8011be2 <_raise_r+0x12>
 8011c12:	2100      	movs	r1, #0
 8011c14:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011c18:	4620      	mov	r0, r4
 8011c1a:	4798      	blx	r3
 8011c1c:	2000      	movs	r0, #0
 8011c1e:	e7e0      	b.n	8011be2 <_raise_r+0x12>

08011c20 <raise>:
 8011c20:	4b02      	ldr	r3, [pc, #8]	@ (8011c2c <raise+0xc>)
 8011c22:	4601      	mov	r1, r0
 8011c24:	6818      	ldr	r0, [r3, #0]
 8011c26:	f7ff bfd3 	b.w	8011bd0 <_raise_r>
 8011c2a:	bf00      	nop
 8011c2c:	20000024 	.word	0x20000024

08011c30 <_kill_r>:
 8011c30:	b538      	push	{r3, r4, r5, lr}
 8011c32:	4d07      	ldr	r5, [pc, #28]	@ (8011c50 <_kill_r+0x20>)
 8011c34:	2300      	movs	r3, #0
 8011c36:	4604      	mov	r4, r0
 8011c38:	4608      	mov	r0, r1
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	602b      	str	r3, [r5, #0]
 8011c3e:	f7f1 fcbf 	bl	80035c0 <_kill>
 8011c42:	1c43      	adds	r3, r0, #1
 8011c44:	d102      	bne.n	8011c4c <_kill_r+0x1c>
 8011c46:	682b      	ldr	r3, [r5, #0]
 8011c48:	b103      	cbz	r3, 8011c4c <_kill_r+0x1c>
 8011c4a:	6023      	str	r3, [r4, #0]
 8011c4c:	bd38      	pop	{r3, r4, r5, pc}
 8011c4e:	bf00      	nop
 8011c50:	20005530 	.word	0x20005530

08011c54 <_getpid_r>:
 8011c54:	f7f1 bcac 	b.w	80035b0 <_getpid>

08011c58 <_malloc_usable_size_r>:
 8011c58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011c5c:	1f18      	subs	r0, r3, #4
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	bfbc      	itt	lt
 8011c62:	580b      	ldrlt	r3, [r1, r0]
 8011c64:	18c0      	addlt	r0, r0, r3
 8011c66:	4770      	bx	lr

08011c68 <_init>:
 8011c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c6a:	bf00      	nop
 8011c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c6e:	bc08      	pop	{r3}
 8011c70:	469e      	mov	lr, r3
 8011c72:	4770      	bx	lr

08011c74 <_fini>:
 8011c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c76:	bf00      	nop
 8011c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011c7a:	bc08      	pop	{r3}
 8011c7c:	469e      	mov	lr, r3
 8011c7e:	4770      	bx	lr
